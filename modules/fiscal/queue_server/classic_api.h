#ifndef CLASSIC_API_H
#define CLASSIC_API_H

#include <ctime>
#include <functional>
#include <memory>
#include <string>
#include <vector>

// Generic helper definitions for shared library support
#if defined _WIN32 || defined __CYGWIN__
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_IMPORT __declspec(dllimport)
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_EXPORT __declspec(dllexport)
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_LOCAL
#else
#if __GNUC__ >= 4
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_IMPORT __attribute__((visibility("default")))
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_EXPORT __attribute__((visibility("default")))
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_LOCAL __attribute__((visibility("hidden")))
#else
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_IMPORT
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_EXPORT
#define CLASSIC_FR_DRV_NGX_HELPER_DLL_LOCAL
#endif
#endif

// Now we use the generic helper definitions above to define CLASSIC_FR_DRV_NGX_API and
// CLASSIC_FR_DRV_NGX_LOCAL. CLASSIC_FR_DRV_NGX_API is used for the public API symbols. It either DLL
// imports or DLL exports (or does nothing for static build) CLASSIC_FR_DRV_NGX_LOCAL is used for
// non-api symbols.

#ifdef CLASSIC_FR_DRV_NGX_DLL // defined if CLASSIC_FR_DRV_NG is compiled as a DLL
#ifdef CLASSIC_FR_DRV_NGX_DLL_EXPORTS // defined if we are building the CLASSIC_FR_DRV_NG DLL (instead of using it)
#define CLASSIC_FR_DRV_NGX_API CLASSIC_FR_DRV_NGX_HELPER_DLL_EXPORT
#else
#define CLASSIC_FR_DRV_NGX_API CLASSIC_FR_DRV_NGX_HELPER_DLL_IMPORT
#endif // CLASSIC_FR_DRV_NGX_DLL_EXPORTS
#define CLASSIC_FR_DRV_NGX_LOCAL CLASSIC_FR_DRV_NGX_HELPER_DLL_LOCAL
#else // CLASSIC_FR_DRV_NGX_DLL is not defined: this means CLASSIC_FR_DRV_NG is a static lib.
#define CLASSIC_FR_DRV_NGX_API
#define CLASSIC_FR_DRV_NGX_LOCAL
#endif // CLASSIC_FR_DRV_NGX_DLL

#ifndef DOXYGEN_PROPERTY
#define DOXYGEN_PROPERTY(...)
#endif

namespace kkt_driver {

class CLASSIC_FR_DRV_NGX_API classic_interface {
public:
    //!
    //! @brief The TBarcodeAlignment enum
    //! Выравнивание штрих-кода
    //!
    enum class TBarcodeAlignment {
        baCenter = 0, ///< по центру
        baLeft = 1, ///< влево
        baRight = 2, ///< вправо
    };

    //! Режим завершения документа
    enum class TFinishDocumentMode {
        //! Не печатать рекламный текст
        fdmTrailerDisabled = 0,

        //! Печатать рекламный текст
        fdmTrailerEnabled = 1,
    };

    //! Режим конвертации двоичных данных
    enum class TBinaryConversion {
        //! Без ковертации
        BINARY_CONVERSION_NONE = 0,
        //! В виде HEX строки
        BINARY_CONVERSION_HEX = 1,
    };

    enum class TCodePage {
        CODE_PAGE_DEFAULT = 0,
        CODE_PAGE_RUSSIAN = 1,
        CODE_PAGE_ARMENIAN_UNICODE = 2,
        CODE_PAGE_ARMENIAN_ANSI = 3,
        CODE_PAGE_KAZAKH_UNICODE = 4,
        CODE_PAGE_TURKMEN_UNICODE = 5,
    };

    //! Тип подключения
    enum class TConnectionType {
        //! Локально
        Local = 0,

        //! Сервер ККМ (TCP)
        ServerTcp = 1,

        //! Сервер ККМ (DCOM)
        ServerDCOM = 2,

        //! ESCAPE
        ESCAPE = 3,

        //! Не используется
        NotUsed = 4,

        //! Эмулятор
        Emulator = 5,

        //! Подключение через ТСР-сокет
        Tcp = 6,
    };

    /**
     * Следующие перечисления-утилиты они не выведены в интерфейс для совместимости
     */

    /**
     * @brief The BarcodeTextPosition enum
     * Положение текста при печати штрих-кода. Используется методами #PrintBarcodeLine
     */
    enum BarcodeTextPosition : int {
        BCT_None = 0, ///< Не печатать
        BCT_Below = 1, ///< Печатать снизу
        BCT_Above = 2, ///< Печатать сверху
        BCT_Both = 3, ///< Печатать сверху и снизу
    };

    /**
     * @brief The BarcodeLineType enum
     * Тип штрих-кода для метода PrintBacodeLine
     */
    enum BarcodeLineType : int {
        BC1D_Code128A, ///< для Code128 можно всегда выставлять первое значение. Код будет
        ///< автоматически преобразовываться к минимальному по ширине варианту в
        ///< зависимости от входных данных
        BC1D_Code128B,
        BC1D_Code128C,
        BC1D_ReservedForQR, ///< Зарезервировано для совместимости, нельзя напечатать QR методом
        ///< PrintBacodeLine
        BC1D_Code39, ///< Code39
        BC1D_EAN13, ///< EAN13
    };

    /**
     * @brief The Barcode2DType enum
     *
     */
    enum Barcode2DType : int {
        BC2D_PDF417, ///< PDF417
        BC2D_DATAMATRIX, ///< Datamatrix
        BC2D_AZTEC, ///< AZTEC
        BC2D_QRCODE, ///< QR code
    };
    // clang-format off
    /**
     * @brief The DevicePropertiesEnumeration enum
     * целые можно передавать в Set_ModelParamNumber
     */
    enum DevicePropertiesEnumeration : int {
        DPE_f00_journal_weight_sensor                     = 0 , ///< Весовой датчик контрольной ленты
        DPE_f01_receipt_weight_sensor                         , ///< Весовой датчик чековой ленты
        DPE_f02_journal_opt_sensor                            , ///< Оптический датчик контрольной ленты
        DPE_f03_receipt_opt_sensor                            , ///< Оптический датчик чековой ленты
        DPE_f04_cover_sensor                                  , ///< Датчик крышки
        DPE_f05_journal_lever                                 , ///< Рычаг термоголовки контрольной ленты
        DPE_f06_receipt_lever                                 , ///< Рычаг термоголовки чековой ленты
        DPE_f07_hi_slip_sensor                                , ///< Верхний датчик подкладного документа
        DPE_f08_low_slip_sensor                               , ///< Нижний датчик подкладного документа
        DPE_f09_presenter                                     , ///< Презентер поддерживается
        DPE_f10_presenter_commands                            , ///< Поддержка команд работы с презентером
        DPE_f11_ej_overflow_flag                              , ///< Флаг заполнения ЭКЛЗ
        DPE_f12_ej                                            , ///< ЭКЛЗ поддерживается
        DPE_f13_cutter                                        , ///< Отрезчик поддерживается
        DPE_f14_drawer_status_as_presenter_paper_sensor       , ///< Состояние ДЯ как датчик бумаги в презентере
        DPE_f15_drawer_sensor                                 , ///< Датчик денежного ящика
        DPE_f16_presenter_in_paper_sensor                     , ///< Датчик бумаги на входе в презентер
        DPE_f17_presenter_out_paper_sensor                    , ///< Датчик бумаги на выходе из презентера
        DPE_f18_bill_acceptor                                 , ///< Купюроприемник поддерживается
        DPE_f19_tax_keyboard                                  , ///< Клавиатура НИ поддерживается
        DPE_f20_journal                                       , ///< Контрольная лента поддерживается
        DPE_f21_slip                                          , ///< Подкладной документ поддерживается
        DPE_f22_non_fiscal_doc_commands                       , ///< Поддержка команд нефискального документа
        DPE_f23_cashcore                                      , ///< Поддержка протокола Кассового Ядра (cashcore)
        DPE_f24_inn_leading_zeros                             , ///< Ведущие нули в ИНН
        DPE_f25_rnm_leading_zeros                             , ///< Ведущие нули в РНМ
        DPE_f26_line_printing_bytes_swapping                  , ///< Переворачивать байты при печати линии
        DPE_f27_wrong_tax_password_blocking                   , ///< Блокировка ФР по неверному паролю налогового инспектора
        DPE_f28_alt_protocol                                  , ///< Поддержка альтернативного нижнего уровня протокола ККТ
        DPE_f29_string_printing_commands_wrap_strings_by_n    , ///< Поддержка переноса строк символом '\n' (код 10) в командах печати строк 12H,17H,2FH
        DPE_f30_string_printing_commands_wrap_strings_by_font , ///< Поддержка переноса строк номером шрифта (коды 1…9) в команде печати строк 2FH
        DPE_f31_fisc_commands_wrap_strings_by_n               , ///< Поддержка переноса строк символом '\n' (код 10) в фискальных командах 80H…87H,8AH,8BH
        DPE_f32_fisc_commands_wrap_strings_by_font            , ///< Поддержка переноса строк номером шрифта (коды 1…9) в фискальных командах 80H…87H,8AH,8BH
        DPE_f33_senior_cashier                                , ///< Права "СТАРШИЙ КАССИР" (28) на снятие отчетов: X, операционных регистров, по отделам, по налогам, по кассирам, почасового, по товарам
        DPE_f34_slip_receipt_bit3                             , ///< Поддержка "Бит 3 - слип чек" в командах печати строк 12H,17H,2FH, графики C1H,C3H; Поддержка поля "результат последней печати" в кратком запросе ФР 10H
        DPE_f35_block_graphic_loading                         , ///< Поддержка блочной загрузки графики в команде C4H
        DPE_f36_error_description_command                     , ///< Поддержка команды 6BH возврата описания ошибок ФР
        DPE_f37_print_flags_for_print_ext_graphics_print_line , ///< Поддержка флагов печати для команд печати расширенной графики C3H и печати линии C5H
        DPE_f38_skno                                          , ///< Поддержка СКНО
        DPE_f39_mfp                                           , ///< Поддержка МФП
        DPE_f40_ej5                                           , ///< Поддержка ЭКЛЗ5
        DPE_f41_print_scaled_graphics                         , ///< Печать графики с масштабированием
        DPE_f42_print_ext_graphics_512                        , ///< Загрузка и печать графики 512 с масштабированием
        DPE_f43_fs                                            , ///< Поддержка ФН
        DPE_f44_eod                                           , ///< Поддержка EoD
        DPE_f45_tag_autoprint_support                         , ///< Поддержка авопечати тегов
        DPE_f46_qr_in_footer_support                          , ///< Поддержка двумерных штрихкодов в футере
        DPE_f47_fs_1_1_support                                , ///< Поддержка ФН 1.1
        DPE_f48_correction_new_support                        , ///< Поддержка чеков коррекции как обычных чеков
        DPE_f49_error_description_command_extended            , ///< Поддержка в команде 6BH отсутствие параметров или передача четырех байтного подкода ошибки
        DPE_f50_fd_answers_extended                           , ///< Поддержка расширенных ответов на команды формирования ФД.
        DPE_f51_fd_authorization_req                          , ///< Требуется авторизация на команды формирования ФД
        DPE_f52_plain_protocolv1_transfer                     , ///< Поддержка "чистой" передачи поверх надежного протокола
        DPE_f53_blocking_mode_available                       , ///< Поддержка режима блокирования в рамках сесси поверх надежного протокола(автоматическая отмена незавершенного документа)
        DPE_reserved                                          , ///< Зарезервировано
        DPE_Font1Width                                   = 64 , ///< Ширина печати шрифтом 1
        DPE_Font2Width                                        , ///< Ширина печати шрифтом 2
        DPE_FirstDrawLine                                     , ///< Номер первой печатаемой линии в графике
        DPE_InnDigitCount                                     , ///< Количество цифр в ИНН
        DPE_RnmDigitCount                                     , ///< Количество цифр в РНМ
        DPE_LongRnmDigitCount                                 , ///< Количество цифр в длинном РНМ
        DPE_LongSerialDigitCount                              , ///< Количество цифр в длинном заводском номере
        DPE_DefaultTaxPassword                                , ///< Пароль налогового инспектора по умолчанию
        DPE_DefaultAdminPassword                              , ///< Пароль сист.админа по умолчанию
        DPE_BluetoothTableNumber                              , ///< Номер таблицы "BLUETOOTH БЕСПРОВОДНОЙ МОДУЛЬ"
        DPE_TaxFieldNumber                                    , ///< Номер поля "НАЧИСЛЕНИЕ НАЛОГОВ"
        DPE_MaxCmdLength                                      , ///< Максимальная длина команды
        DPE_MaxDrawLineWidth                                  , ///< Ширина произвольной графической линии в байтах (печать одномерного штрих-кода)
        DPE_MaxDrawLineWidth512                               , ///< Ширина графической линии в буфере графики-512
        DPE_MaxDrawLineCount512                               , ///< Количество линий в буфере графики-512
        DPE_FsTableNumber                                     , ///< Номер таблицы Фискального Накопителя
        DPE_OfdTableNmb                                       , ///< Номер таблицы параметров ОФД
        DPE_EmbeddedTableNumber                               , ///< Номер таблицы встраиваемой техники
        DPE_FFDVersionTableNumber                             , ///< Номер таблицы версии ФФД
        DPE_FFDVersionFieldNumber                             , ///< Номер поля версии ФФД
    };

    enum ESwapBytesMode : int {
        SBM_Swap = 0, ///< Переворачивать
        SBM_NoSwap = 1, ///< Не переворачивать
        SBM_Prop = 2, ///< Использовать свойство драйвера LineSwapBytes
        SBM_Model = 3, ///< Использовать настройки модели(бит 26 из флагов команды F7)
    };
    /**
     * @brief The PrinterMode enum
     * Режим ФР
     */
    enum PrinterMode : int {
        PM_UnknownMode = 0x0, ///<  0 - Например, на время печати отчетов из буфера. Технический режим.
        PM_DumpMode = 0x01, ///<  1 - Выдача данных
        PM_SessionOpen = 0x02, ///<  2 - Открытая смена, 24 часа не кончились
        PM_SessionOpenOver24h = 0x03, ///<  3 - Открытая смена, 24 часа кончились
        PM_SessionClosed = 0x04, ///<  4 - Закрытая смена
        PM_TaxmanPasswordError = 0x05, ///<  5 - Блокировка по неправильному паролю налогового инспектора
        PM_DateConfirmWaiting = 0x06, ///<  6 - Ожидание подтверждения ввода даты
        PM_PointModificationAllowed = 0x07, ///<  7 - Разрешение изменения положения десятичной точки
        PM_OpenedDocument = 0x08, ///<  8 - Открытый документ
        PM_TechnologicalResetAllowed = 0x09, ///<  9 - Режим разрешения технологического обнуления
        PM_TestRun = 0x0A, ///<  10 - Тестовый прогон.
        PM_FullFiscalReportInProgress = 0x0B, ///<  11 - Печать полного фис. отчета
        PM_CryptoJournalReportInProgress = 0x0C, ///<  12 - Печать отчёта ЭКЛЗ
        PM_FiscalSlipMode = 0x0D, ///<  13 - Работа с фискальным подкладным документом
        PM_SlipPrintingInProgress = 0x0E, ///<  14 - Печать подкладного документа
        PM_FiscalSlipIsReady = 0x0F, ///<  15 - Фискальный подкладной документ сформирован
        PM_OpenedDocumentBuy = 0x18, ///<  Открытый документ: покупка
        PM_OpenedSlipDocumentBuy = 0x1D, ///< Открыт ПД покупки
        PM_LoadingAndPositioningSlip = 0x1E, ///< Загрузка и позиционирование ПД
        PM_OpenedDocumentSaleReturn = 0x28, ///< Открытый документ: возврат продажи
        PM_OpenedSlipDocumentSaleReturn = 0x2D, ///< Открыт ПД возврата продажи
        PM_PositioningSlip = 0x2E, ///< Позиционирование ПД
        PM_OpenedDocumentBuyReturn = 0x38, ///< Открытый документ: возврат покупки
        PM_OpenedSlipDocumentBuyReturn = 0x3D, ///< Открыт ПД возврата покупки
        PM_PrintingSlip = 0x3E, ///< Печать ПД
        PM_OpenedDocumentNonFiscal = 0x48, ///< Открытый документ: нефискальный
        PM_SlipPrinted = 0x4C, ///< Печать ПД закончена
        PM_DocumentPrinted = 0x4E, ///< Печать закончена
        PM_EjectingSlip = 0x5E, ///< Выброс ПД
        PM_WaitingSlipRemoval = 0x6E, ///< Ожидание извлечения ПД
    };

    enum PrinterSubmode : int {
        PSM_PaperPresent = 0, ///<  0 - Бумага есть – ФР не в фазе печати операции
        PSM_PassivePaperAbsense = 1, ///<  1 - Пассивное отсутствие бумаги – ФР не в фазе печати операции
        PSM_ActivePaperAbsense = 2, ///<  2 - Активное отсутствие бумаги – ФР в фазе печати операции
        PSM_AfterAvtivePaperAbsense = 3, ///<  3 - После активного отсутствия бумаги – ФР ждет команду продолжения печати
        PSM_ReportPrintingInProgress = 4, ///<  4 - Фаза печати операции полных фискальных отчетов
        PSM_OperationPrintingInProgress = 5 ///<  5 - Фаза печати операции
    };


    enum DeviceFunctionEnumeration : int {
        DFE_SkipAllPrinting = 0,  ///< Пропуск печати всех документов. Если установлено в 1, то документы на бумажной ленте не печатаются и формируются только в электронном виде.
        DFE_AutoReadDetailedErrorDescription = 1,  //!< Автоматически получать подробное описание ошибки из ККТ(на основе КЯ). Подробное описание находится в свойстве #ErrorDescription.
        DFE_DataPresentation = 2, //!< Вид представления данных(0 - в виде строк, разделенных \n, 1 - в виде json)
        DFE_PlainTransfer = 3, //!< Прямая передача команд поверх надежных протоколов нижнего уровня (TCP)
        DFE_BlockingMode = 4, //!< Эксклюзивная обработка команд на ККТ (блокировка команд на остальных интерфейсах, доступно только если передача надежная (TCP) )
        DFE_SkipRequisitePrint = 5, //!< Пропуск печати реквизитов документов средствами драйвера. Если установлено в 1, то печать управляется в зависимости от поля "печать реквизитов пользователя" Т17П12 или "АВТОПЕЧАТЬ ТЕГОВ в КЯ" Т1П50 в КЯ
        /**
         *  Меняет поведение драйвера в отношении свойств. Если свойство не было установлено (Set_*) между вызовами - то метод
         *  будет использовать значение свойства по умолчанию. Чтобы, например, не устанавливать в 0 все Summ* при закрытии чека и.т.д.
         */
        DFE_UseDefaultPropertyIfNotSetByUser = 6,
    };

    enum DataPresentationFormat
    {
        DPF_ClassicText = 0, //!< Данные в виде строк с разделителем \n и уровнем вложенности за счет пробелов в начале строки
        DPF_ClassicJson = 1, //!< Данные в виде json {"tag": 1234, "value": "значение", "desc": "описание тега"}
    };


    enum TagTypeEnumeration : int {
        TT_Byte = 0, ///> Тип Byte
        TT_Uint16 = 1, ///> Тип Uint16
        TT_Uint32 = 2, ///> Тип UInt32
        TT_VLN = 3, ///> Тип VLN
        TT_FVLN = 4, ///> Тип FVLN
        TT_BitMask = 5, ///> Тип "битовое поле"
        TT_UnixTime = 6, ///> Тип "время"
        TT_String = 7, ///> Тип "строка".
        TT_STLV = 8, ///> Тип составной тег
        TT_ByteArray = 9, ///> Тип массив байт
    };

    /**
     * @brief Мера количества предмета расчета, свойство MeasureUnit (тег 2108)
     */
    enum MeasurementUnitEnumeration : int {
        MU_Item = 0, ///< Применяется для предметов расчета, которые могут быть реализованы поштучно или единицами
        MU_Gram = 10, ///< Грамм
        MU_Kilogram = 11, ///< Килограмм
        MU_Ton = 12, ///< Тонна
        MU_Centimeter = 20, ///< Сантиметр
        MU_Decimeter = 21, ///< Дециметр
        MU_Meter = 22, ///< Метр
        MU_SquareCentimeter = 30, ///< Квадратный сантиметр
        MU_SquareDecimeter = 31, ///< Квадратный дециметр
        MU_SquareMeter = 32, ///< Квадратный метр
        MU_Milliliter = 40, ///< Миллилитр
        MU_Liter = 41, ///< Литр
        MU_CubicMeter = 42, ///< Кубический метр
        MU_KilowattHour = 50, ///< Киловатт час
        MU_Gigacalorie = 51, ///< Гигакалория
        MU_Day = 70, ///< Сутки (день)
        MU_Hour = 71, ///< Час
        MU_Minute = 72, ///< Минута
        MU_Second = 73, ///< Секунда
        MU_Kilobyte = 80, ///< Килобайт
        MU_Megabyte = 81, ///< Мегабайт
        MU_Gigabyte = 82, ///< Гигабайт
        MU_Terabyte = 83, ///< Терабайт
        MU_Other = 255, ///< Применяется при использовании иных единиц измерения
    };
    // clang-format on

public:
    classic_interface();
    classic_interface(const std::string& name);
    ~classic_interface();
    int AddLD();

    //!
    //! @brief Гудок.
    //!
    //! Выдача звукового сигнала на ККМ.
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int Beep();

    //!
    //! @brief Покупка.
    //!
    //! Команда производит регистрацию покупки.
    //!
    //! @note 2, 4, 7, 8 (если статус 8-го режима ККМ=1) и 9.Переводит ККМ в режим 8 подрежим 1
    //! или 3.
    //!
    //! @attention Количество округляется до 3 знаков после запятой.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Quantity - количество товара(3 знака после запятой),
    //!  - #Price - цена за единицу товара(в копейках),
    //!  - #Department - номер отдела (секции),
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNOperation.
    //!
    int Buy();
    int BuyEx();

    //!
    //! @brief Аннулировать чек.
    //!
    //! Операция производит аннулирование (отмену) всего чека.
    //!
    //! @note 8. Переводит ККМ в режим, в котором ККМ была до открытия чека, или в режим 3.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int CancelCheck();

    //!
    //! @brief Внесение.
    //!
    //! Метод регистрирует внесение денежной суммы в кассу.
    //!
    //! @note Работает в режимах 2, 3, 4, 7 и 9. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - вносимая сумма.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован
    //!  - #OpenDocumentNumber - cквозной номер последнего документа ККМ
    //!
    //! @return Код ошибки
    //!
    int CashIncome();

    //!
    //! @brief Выплата.
    //!
    //! Метод регистрирует выплату денежной суммы из кассы.
    //!
    //! @note Работает в режимах 2, 3, 4, 7 и 9. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - вносимая сумма.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован
    //!  - #OpenDocumentNumber - cквозной номер последнего документа ККМ.
    //!
    //! @return Код ошибки
    //!
    int CashOutcome();

    //!
    //! @brief Надбавка.
    //!
    //! Метод регистрирует надбавку на денежную сумму.
    //!
    //! @note 8. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - денежная сумма, на которую регистрируется надбавка,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int Charge();

    //!
    //! @brief Подытог чека.
    //!
    //! Метод возвращает подытог текущего чека.
    //!
    //! @note 8. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #Summ1 - подытог текущего чека.
    //! \return Код ошибки
    //!
    int CheckSubTotal();

    //!
    //! @brief Закрыть чек.
    //!
    //! Метод производит закрытие чека комбинированным типом оплаты с вычислением налогов и суммы
    //! сдачи.
    //!
    //! @note Работает в режиме 8. Переводит ККМ в режим 2 или 3.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - сумма наличных клиента,
    //!  - #Summ2 - сумма клиента типа оплаты 2,
    //!  - #Summ3 - сумма клиента типа оплаты 3,
    //!  - #Summ4 - сумма клиента типа оплаты 4,
    //!  - #DiscountOnCheck - Скидка на чек,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей сумму.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #Change - сдача.
    //!
    //! @return Код ошибки
    //!
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNCloseCheckEx.
    //!
    int CloseCheck();

    //!
    //! @brief Подтвердить дату.
    //!
    //! Команда подтверждения программирования даты во внутренних часах ККМ.
    //!
    //! @note Работает только в режиме 6. При успешном выполнении команды переводит ККМ в режим 4.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #Date - устанавливаемая в ККМ дата.
    //!
    //! @return Код ошибки
    //!
    int ConfirmDate();

    //!
    //! @brief Установить связь
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #ComNumber - номер Com-порта ПК к которому подсоединена ККМ (0 – порт 1),
    //!  - #BaudRate - скорость обмена между ККМ и подключенным к ней устройством,
    //!  - #Timeout - таймаут приема байта,
    //!  - #ComputerName - имя компьютера, к которому подключена ККТ,
    //!  - #ProtocolType - тип протокола,
    //!  - #ConnectionType -тип подключения,
    //!  - #TCPPort - TCP порт ККТ,
    //!  - #IPAddress - IP адрес,
    //!  - #UseIPAddress - использовать при подключении IPAddress или ComputerName.
    //!
    //! @return Код ошибки
    //!
    int Connect();

    //!
    //! @brief Продолжить печать.
    //!
    //! Команда возобновления печати после заправки в ККМ бумаги. После заправки бумаги ККМ
    //! находится в подрежиме 3 (см. свойство ECRAdvancedMode) до тех пор, пока не будет вызван
    //! данный метод.
    //!
    //! @note Работает в любом режиме, но только в подрежиме 3. Не меняет режима ККМ, но выводит из
    //! подрежима 3.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int ContinuePrint();

    int Correction();

    //!
    //! @brief Отрезать чек.
    //!
    //! Метод подает на принтер чеков команду «Отрезать чек». Перед исполнением метода необходимо
    //! задать способ отрезки («Полная» или «Неполная») в свойстве CutType. После отрезки в
    //! зависимости от значения свойства FeedAfterCut может производиться автоматическая промотка
    //! чековой ленты. Количество строк промотки необходимо задать в свойстве FeedLineCount.
    //!
    //! @note Метод может вызываться в любом режиме, кроме 8, 10, 11, 12, 14 и подрежимов 4 и 5. Не
    //! меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #CutType - тип отрезки(TRUE – неполная отрезка, FALSE – полная отрезка)
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int CutCheck();

    //!
    //! @brief Запрос дампа
    //!
    //! Посылает в ККМ запрос передачи данных от указанного в свойстве #DeviceCode устройства.
    //!
    //! @note Работает в любом режиме, кроме 1 – независимо от запроса к ФП или другому устройству.
    //! Переводит ККМ в режим 1.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль ЦТО или пароль системного администратора
    //!                    (в случае, если пароль ЦТО не установлен),
    //!  - #DeviceCode - код внутреннего устройства ККМ.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int DampRequest();

    int DeleteLD();

    //!
    //! @brief Разорвать связь.
    //!
    //! Освобождает COM-порт ПК, занятый под драйвер методом Connect.
    //!
    //! @return Код ошибки
    //!
    int Disconnect();

    //!
    //! @brief Скидка.
    //!
    //! Метод регистрирует скидку на сумму, задаваемую в свойстве #Summ1, с вычислением налогов.
    //!
    //! @note Работает в режиме 8. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - денежная сумма, на которую регистрируется скидка,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int Discount();

    int DozeOilCheck();
    //!
    //! @brief ПечатьКартинки.
    //!
    //! Печатает загруженную в ККМ картинку на чеке.
    //! Картинка загружается в ККМ через вызов метода #LoadImage.
    //!
    //! @note Метод может вызываться в любом режиме.Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #FirstLineNumber - Номер линии пикселей исходной картинки, которая будет первой в
    //!  диапазоне выводимых на печать.
    //!  - #LastLineNumber - Номер линии пикселей исходной картинки, которая будет последней в
    //!  диапазоне выводимых на печать.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int Draw();
    int EKLZDepartmentReportInDatesRange();
    int EKLZDepartmentReportInSessionsRange();
    int EKLZJournalOnSessionNumber();
    int EKLZSessionReportInDatesRange();
    int EKLZSessionReportInSessionsRange();
    //!
    //! @brief Метод посылает последовательность байтов от хоста в ККТ и получает ответ.
    //!
    //! Посылает последовательность по текущему транспортному слою
    //!
    //! @note Метод может вызываться в любой момент времени
    //!
    //! @par Используемые свойства:
    //!  - #TransferBytes - Последовательность байтов, посылаемая от хоста в ККТ.
    //!
    //! @par Модифицируемые свойства:
    //!  - #TransferBytes - ответ ККТ
    //!
    //! @return Код ошибки
    //!
    int ExchangeBytes();

    //!
    //! @brief Продвинуть документ.
    //!
    //! Продвигает документ на указанное в свойстве StringQuantity количество строк. Продвигаемый
    //! документ задается свойствами UseSlipDocument, UseReceiptRibbon, UseJournalRibbon.
    //!
    //! @note Метод может вызываться в любом режиме, кроме режимов 8, 10, 11, 12, 14 и подрежимов 4
    //! и 5. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #StringQuantity - количество строк, на которое необходимо продвинуть документ,
    //!  - #UseSlipDocument - продвинуть подкладной документ,
    //!  - #UseReceiptRibbon - продвинуть чековую ленту,
    //!  - #UseJournalRibbon - продвинуть ленту операционного журнала.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int FeedDocument();

    //!
    //! @brief Фискализация.
    //!
    //! Команда фискализации (перерегистрации) ККМ, при которой устанавливается стандартный номер
    //! РНМ (10 символов).
    //!
    //! @note Работает в режимах 4, 5, 7 и 9.Переводит ККМ в режим 5 в случае неправильного пароля
    //! налогового инспектора.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль налогового инспектора,
    //!  - #NewPasswordTI - новый пароль налогового инспектора;,
    //!  - #RNM - регистрационный номер ККМ,
    //!  - #INN - идентификационный номер налогоплательщика владельца ККМ.
    //!
    //! @par Модифицируемые свойства:
    //!  - #RegistrationNumber - номер фискализации (перерегистрации),
    //!  - #FreeRegistration - число оставшихся свободных перерегистраций в ФП
    //!  - #SessionNumber - номер последней перед фискализацией (перерегистрацией) смены,
    //!  - #Date - дата фискализации (перерегистрации).
    //!
    //! @return Код ошибки
    //!
    int Fiscalization();

    //!
    //! @brief Фискальный отчёт по диапазону дат.
    //!
    //! Команда печати фискального отчета типа #ReportType (короткий или полный), начиная с даты
    //! #FirstSessionDate по дату #LastSessionDate.
    //!
    //! @note Работает в режимах 4, 5, 7 и 9.
    //! Переводит ККМ в режим 5 в случае неправильного пароля налогового инспектора.
    //! В начале фазы печати полного отчета переводит ККМ в режим 11 ,
    //! после окончания печати ((нормального или инициированного командой прерывания полного отчета)
    //! восстанавливается прежний режим работы.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль налогового инспектора,
    //!  - #ReportType - тип фискального отчета (короткий или полный),
    //!  - #FirstSessionDate - дата стартовой смены фискального отчета,
    //!  - #LastSessionDate - дата последней смены фискального отчета.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FirstSessionDate - дата стартовой смены фискального отчета,
    //!  - #LastSessionDate - дата последней смены фискального отчета,
    //!  - #FirstSessionNumber - номер стартовой смены, имеющейся в ФП и попавшей в запрашиваемый
    //!     диапазон,
    //!  - #LastSessionNumber - номер завершающей смены, имеющейся в ФП и попавшей в запрашиваемый
    //!     диапазон.
    //!
    //! @return Код ошибки
    //!
    int FiscalReportForDatesRange();

    //!
    //! @brief Фискальный отчёт по диапазону смен.
    //!
    //! Команда печати фискального отчета типа #ReportType (короткий или полный), начиная с номера
    //! смены #FirstSessionNumber по номер смены #LastSessionNumber.
    //!
    //! @note Работает в режимах 4, 5, 7 и 9.
    //! Переводит ККМ в режим 5 в случае неправильного пароля налогового инспектора.
    //! В начале фазы печати полного отчета переводит ККМ в режим 11 ,
    //! после окончания печати ((нормального или инициированного командой прерывания полного отчета)
    //! восстанавливается прежний режим работы.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль налогового инспектора,
    //!  - #ReportType - тип фискального отчета (короткий или полный),
    //!  - #FirstSessionNumber - номер стартовой смены фискального отчета,
    //!  - #LastSessionNumber - номер последней смены фискального отчета.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FirstSessionDate - дата стартовой смены фискального отчета,
    //!  - #LastSessionDate - дата последней смены фискального отчета,
    //!  - #FirstSessionNumber -номер стартовой смены, имеющейся в ФП и попавшей в запрашиваемый
    //!     диапазон,
    //!  - #LastSessionNumber - номер завершающей смены, имеющейся в ФП и попавшей в запрашиваемый
    //!     диапазон.
    //!
    //! @return Код ошибки
    //!
    int FiscalReportForSessionRange();

    int GetActiveLD();
    int EnumLD();

    //!
    //! @brief Получить денежный регистр.
    //!
    //! Запрос содержимого денежного регистра (см. «Инструкцию по эксплуатации»/«Руководство
    //! оператора», раздел «О денежных и операционных регистрах»).
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #RegisterNumber - номер денежного регистра(0 - 255).
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #ContentsOfCashRegister - содержимое денежного регистра,
    //!  - #NameCashReg - наименование денежного регистра.
    //!
    //! @return Код ошибки
    //!
    int GetCashReg();

    int GetCountLD();

    //!
    //! @brief Получить данные.
    //!
    //! Команда запроса данных.
    //!
    //! @note Работает только в режиме 1. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!
    //! @par Модифицируемые свойства:
    //!  - #DeviceCode - код устройства, от которого поступают данные,
    //!  - #DeviceCodeDescription - описание кода устройства, от которого поступают данные,
    //!  - #DataBlockNumber - номер блока данных,
    //!  - #DataBlock - сами данные, поступившие от устройства.
    //!
    //! @return Код ошибки
    //!
    int GetData();

    //!
    //! @brief Получить параметры устройства.
    //!
    //! Запрашивает технические параметры устройства.
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Модифицируемые свойства:
    //!  - #UMajorProtocolVersion - версия протокола связи с ПК, используемая устройством,
    //!  - #UMinorProtocolVersion - подверсия протокола связи с ПК, используемая устройством,
    //!  - #UMajorType - тип запрашиваемого устройства,
    //!  - #UMinorType - подтип запрашиваемого устройства,
    //!  - #UModel - модель запрашиваемого устройства,
    //!  - #UCodePage - кодовая страница, используемая устройством,
    //!  - #UDescription - название устройства,
    //!  - #CapGetShortECRStatus - команда GetShortECRStatus поддерживается.
    //!
    //! @return Код ошибки
    //!
    int GetDeviceMetrics();

    //!
    //! @brief Получить состояние ККМ.
    //!
    //! Метод запрашивает состояние ККМ.
    //!
    //! @note Метод может вызываться в любом режиме, кроме режима 1. Не
    //! меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #ECRSoftVersion - версия внутреннего программного обеспечения ККМ,
    //!  - #ECRBuild - номер сборки ПО ККМ,
    //!  - #ECRSoftDate - дата внутреннего программного обеспечения ККМ,
    //!  - #LogicalNumber - логический номер ККМ в торговом зале,
    //!  - #OpenDocumentNumber - сквозной номер последнего документа ККМ,
    //!  - #ECRFlags - флаги ККМ,
    //!  - #ReceiptRibbonIsPresent - рулон чековой ленты есть,
    //!  - #JournalRibbonIsPresent - рулон операционного журнала есть,
    //!  - #SKNOStatus - последний статус СКНО (Для белорусских ККТ),
    //!  - #SlipDocumentIsPresent - подкладной документ есть,
    //!  - #SlipDocumentIsMoving - подкладной документ проходит под датчиком,
    //!  - #PointPosition - признак положения десятичной точки,
    //!  - #EKLZIsPresent - ЭКЛЗ есть,
    //!  - #JournalRibbonOpticalSensor - лента операционного журнала проходит под оптическим
    //!  датчиком,
    //!  - #ReceiptRibbonOpticalSensor – чековая лента проходит под оптическим датчиком,
    //!  - #JournalRibbonLever - рычаг термоголовки операционного журнала опущен,
    //!  - #ReceiptRibbonLever - рычаг термоголовки чековой ленты опущен,
    //!  - #LidPositionSensor – крышка корпуса не установлена,
    //!  - #IsPrinterLeftSensorFailure – отказ левого датчика печатающего механизма,
    //!  - #IsPrinterRightSensorFailure – отказ правого датчика печатающего механизма,
    //!  - #PresenterIn – на входе накопителя есть бумага,
    //!  - #PresenterOut – на выходе накопителя есть бумага,
    //!  - #IsDrawerOpen – денежный ящик открыт,
    //!  - #IsEKLZOverflow – ЭКЛЗ близка к переполнению,
    //!  - #QuantityPointPosition - 3 знака после запятой,
    //!  - #ECRMode - режим ККМ,
    //!  - #ECRModeDescription - описание режима ККМ,
    //!  - #ECRMode8Status - одно из состояний, когда ККМ находится в режиме 8,
    //!  - #ECRModeStatus - одно из состояний, когда ККМ находится в режимах 13 и 14,
    //!  - #ECRAdvancedMode подрежим ККМ,
    //!  - #ECRAdvancedModeDescription - описание подрежима ККМ,
    //!  - #PortNumber - порт ККМ, через который она подключена к ПК,
    //!  - #FMSoftVersion - версия внутреннего программного обеспечения ФП ККМ,
    //!  - #FMBuild - номер сборки ПО ФП ККМ,
    //!  - #FMSoftDate - дата внутреннего программного обеспечения ККМ,
    //!  - #Date - внутренняя дата ККМ,
    //!  - #Time - внутреннее время ККМ,
    //!  - #TimeStr - строковое представление свойства Time
    //!  - #FMFlags - флаги ФП ККМ,
    //!  - #FM1IsPresent – ФП1 есть,
    //!  - #FM2IsPresent – ФП2 есть,
    //!  - #LicenseIsPresent – лицензия введена,
    //!  - #FMOverflow – переполнение ФП,
    //!  - #IsBatteryLow – напряжение на батарее пониженное,
    //!  - #IsLastFMRecordCorrupted – последняя запись в ФП испорчена,
    //!  - #IsFMSessionOpen – смена в ФП открыта,
    //!  - #IsFM24HoursOver – 24 часа в ФП истекли,
    //!  - #SerialNumber - серийный номер ККМ,
    //!  - #SessionNumber - номер последней закрытой на ККМ смены,
    //!  - #FreeRecordInFM - количество свободных записей в ФП,
    //!  - #RegistrationNumber - количество перерегистраций(фискализаций), проведенных на ККМ,
    //!  - #FreeRegistration - количество оставшихся перерегистраций(фискализаций), которые можно
    //!  произвести на ККМ,
    //!  - #INN - идентификационный номер налогоплательщика.
    //!
    //! @return Код ошибки
    //!
    int GetECRStatus();

    //!
    //! @brief Получить короткий запрос состояния ККМ.
    //!
    //! Метод запрашивает состояние ККМ.
    //!
    //! @note Метод может вызываться в любом режиме, кроме режима 1. Не
    //! меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #ECRFlags флаги ККМ,
    //!  - #ReceiptRibbonIsPresent - рулон чековой ленты есть,
    //!  - #JournalRibbonIsPresent - рулон операционного журнала есть,
    //!  - #SKNOStatus - последний статус СКНО (Для белорусских ККТ),
    //!  - #SlipDocumentIsPresent - подкладной документ есть,
    //!  - #SlipDocumentIsMoving - подкладной документ проходит под датчиком,
    //!  - #PointPosition - признак положения десятичной точки,
    //!  - #EKLZIsPresent - ЭКЛЗ есть,
    //!  - #JournalRibbonOpticalSensor - лента операционного журнала проходит под оптическим
    //!  датчиком,
    //!  - #ReceiptRibbonOpticalSensor – чековая лента проходит под оптическим датчиком,
    //!  - #JournalRibbonLever - рычаг термоголовки операционного журнала опущен,
    //!  - #ReceiptRibbonLever - рычаг термоголовки чековой ленты опущен,
    //!  - #LidPositionSensor – крышка корпуса не установлена,
    //!  - #IsPrinterLeftSensorFailure – отказ левого датчика печатающего механизма,
    //!  - #IsPrinterRightSensorFailure – отказ правого датчика печатающего механизма,
    //!  - #PresenterIn – на входе накопителя есть бумага,
    //!  - #PresenterOut – на выходе накопителя есть бумага,
    //!  - #IsDrawerOpen – денежный ящик открыт,
    //!  - #IsEKLZOverflow – ЭКЛЗ близка к переполнению,
    //!  - #QuantityPointPosition - 3 знака после запятой,
    //!  - #ECRMode - режим ККМ,
    //!  - #ECRModeDescription - описание режима ККМ,
    //!  - #ECRMode8Status - одно из состояний, когда ККМ находится в режиме 8,
    //!  - #ECRModeStatus - одно из состояний, когда ККМ находится в режимах 13 и 14,
    //!  - #ECRAdvancedMode - подрежим ККМ,
    //!  - #ECRAdvancedModeDescription - описание подрежима ККМ,
    //!  - #QuantityOfOperations - количество выполненных операций регистрации в чеке,
    //!  - #BatteryVoltage - напряжение резервной батареи,
    //!  - #PowerSourceVoltage - напряжение источника питания,
    //!  - #FMResultCode - код ошибки ФП,
    //!  - #EKLZResultCode - код ошибки ЭКЛЗ.
    //!
    //! @return Код ошибки
    //!
    int GetShortECRStatus();

    //!
    //! @brief Получить параметры обмена.
    //!
    //! Метод запрашивает параметры порта ККМ (скорость обмена, таймаут приёма байта).
    //!
    //! @note Метод может вызываться в любом режиме.Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль для исполнения метода драйвера,
    //!  - #PortNumber - порт ККМ, через который она подключена к ПК.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!  - #BaudRate - cкорость обмена между ККМ и подключенным к ней устройством (соответствие
    //! между кодом скорости и её значением смотри в описании свойства),
    //!  - #Timeout - тайм-аут приема байта.
    //!
    //! @return Код ошибки
    //!
    int GetExchangeParam();

    //!
    //! @brief Получить структуру поля.
    //!
    //! Команда запроса структуры поля с номером #FieldNumber внутренней таблицы ККМ с номером
    //! TableNumber.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #TableNumber - номер таблицы,
    //!  - #FieldNumber - номер поля.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FieldName - наименование поля,
    //!  - #FieldType - тип поля,
    //!  - #FieldSize - размер поля в байтах,
    //!  - #MINValueOfField - минимальное значение поля,
    //!  - #MAXValueOfField - максимальное значение поля.
    //!
    //! @return Код ошибки
    //!
    int GetFieldStruct();

    //!
    //! @brief Получить параметры фискализации.
    //!
    //! Команда запроса параметров фискализации (перерегистрации) номер #RegistrationNumber.
    //!
    //! @note Работает в режимах 4 и 5. Переводит ККМ в режим 5 в случае неправильного пароля
    //! налогового инспектора.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль налогового инспектора,
    //!  - #RegistrationNumber - номер фискализации (перерегистрации).
    //!
    //! @par Модифицируемые свойства:
    //!  - #NewPasswordTI - пароль налогового инспектора фискализации (перерегистрации),
    //!  - #RNM - РНМ фискализации (перерегистрации),
    //!  - #INN – ИНН фискализации (перерегистрации),
    //!  - #SessionNumber – номер последней смены, закрытой перед фискализацией (перерегистрацией),
    //!  - #Date - дата фискализации (перерегистрации).
    //!
    //! @return Код ошибки
    //!
    int GetFiscalizationParameters();

    //!
    //! @brief Получить сумму записей ФП.
    //!
    //! Команда запроса суммы записей ФП.
    //!
    //! @note Работает в режиме 4. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора или системного администратора,
    //!  - #TypeOfSumOfEntriesFM - тип запроса (запрос суммы всех записей ФП или запрос суммы
    //! записей ФП после последней перерегистрации).
    //!
    //! @par Модифицируемые свойства:
    //!  - #Summ1 – сумму сменных итогов продаж,
    //!  - #Summ2 – сумму сменных итогов покупок (0 - если в ККМ не установлена ФП2),
    //!  - #Summ3 – сумму сменных итогов возвратов продаж (0 - если в ККМ не установлена ФП2),
    //!  - #Summ4 – сумму сменных итогов возвратов покупок (0 - если в ККМ не установлена ФП2).
    //!
    //! @return Код ошибки
    //!
    int GetFMRecordsSum();

    //!
    //! @brief Получить дату последней записи в ФП.
    //!
    //! Запрос даты последней записи в ФП.
    //!
    //! @note Работает в режимах 4, 5, 6, 7 и 9. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора или системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #TypeOfLastEntryFM - признак типа последней записи, сделанной в ФП,
    //!  - #Date - дата последней записи в ФП..
    //!
    //! @return Код ошибки
    //!
    int GetLastFMRecordDate();

    int GetLiterSumCounter();

    //!
    //! @brief Получить операционный регистр.
    //!
    //! Запрос содержимого операционного регистра.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #RegisterNumber - номер операционного регистра(0 - 65535).
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #ContentsOfOperationRegister - содержимое операционного регистра,
    //!  - #NameOperationReg - имя операционного регистра.
    //!
    //! @return Код ошибки
    //!
    int GetOperationReg();

    int GetParamLD();

    //!
    //! @brief Получить диапазон дат и смен.
    //!
    //! Запрос диапазонов дат и смен записей в ФП.
    //!
    //! @note Работает в режимах 5 и 4.
    //! Переводит ККМ в режим 5 в случае неправильного пароля налогового инспектора.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль налогового инспектора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FirstSessionDate - дата стартовой смены фискального отчета,
    //!  - #LastSessionDate - дата последней смены фискального отчета,
    //!  - #FirstSessionNumber - номер стартовой смены, имеющейся в ФП и попавшей в запрашиваемый
    //!     диапазон,
    //!  - #LastSessionNumber - номер завершающей смены, имеющейся в ФП и попавшей в запрашиваемый
    //!     диапазон.
    //!
    //! @return Код ошибки
    //!
    int GetRangeDatesAndSessions();

    int GetRKStatus();

    //!
    //! @brief Получить структуру таблицы.
    //!
    //! Команда запроса структуры внутренней таблицы ККМ номер TableNumber.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #TableNumber - номер таблицы.
    //!
    //! @par Модифицируемые свойства:
    //!  - #TableName - наименование таблицы,
    //!  - #RowNumber - количество рядов,
    //!  - #FieldNumber - количество полей.
    //!
    //! @return Код ошибки
    //!
    int GetTableStruct();

    //!
    //! @brief Инициализировать ФП.
    //!
    //! Команда инициализации фискальной памяти (ФП).
    //!
    //! @note Команда доступна только в случае установки в ФП процессора с программным обеспечением
    //! для инициализации и используется в технологических целях при производстве ККМ
    //! на заводе-изготовителе. Метод выполняется только при наличии технологического процессора.
    //!
    //! @return Код ошибки
    //!
    int InitFM();

    //!
    //! @brief Инициализировать таблицы.
    //!
    //! Команда инициализации таблиц ККМ значениями «по умолчанию».
    //!
    //! @note Работает в режиме 4 и 16.
    //! Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    int InitTable();

    //!
    //! @brief Прервать выдачу данных.
    //!
    //! Метод прерывает выдачу данных.
    //!
    //! @note 1. Переводит ККМ в режим, в котором она была до подачи команды DampRequest.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int InterruptDataStream();

    //!
    //! @brief Прервать полный отчёт.
    //!
    //! Метод прерывает печать полного фискального отчета.
    //!
    //! @note Работает в режиме 11. Метод восстанавливает режим работы ККМ, из которого был запущен
    //! полный отчет.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! \return Код ошибки
    //!
    int InterruptFullReport();

    //!
    //! @brief Прервать тестовый прогон.
    //!
    //! Прерывает тестовый прогон ККМ.
    //!
    //! @note 10. Переводит ККМ в режим, в котором она была до подачи команды Test.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int InterruptTest();
    int LaunchRK();
    int LoadLineData();
    int OilSale();

    //!
    //! @brief Открыть чек.
    //!
    //! Метод открывает документ (чек) определённого типа (продажа, покупка, возврат продажи,
    //! возврат покупки).
    //!
    //! @note 2, 4, 7 и 9. Переводит ККМ в режим 8 или 3.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #CheckType - Тип открываемого документа/чека
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @deprecated
    //!  - #SkipPrint - для отключения печати стоит использовать метод @see SetDeviceFunction с
    //!  #DFE_SkipAllPrinting
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int OpenCheck();

    //!
    //! @brief Открыть денежный ящик.
    //!
    //! Команда открывает обозначенный денежный ящик.
    //!
    //! @note Любой. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #DrawerNumber - номер денежного ящика.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int OpenDrawer();

    //!
    //! @brief Напечатать штрихкод.
    //!
    //! Печатает штрихкод EAN13 на чеке.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #BarCode - штрихкод EAN-13, печатаемый на чеке.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int PrintBarCode();
    //!
    //! @brief Напечатать отчет по отделам
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int PrintDepartmentReport();

    //!
    //! @brief Печать заголовка документа.
    //!
    //! ККМ предоставляет возможность оформлять любые отчетные документы, не входящие в список
    //! отчетов ККМ. Для этого используется метод PrintDocumentTitle. Команда инкрементирует
    //! сквозной номер документа. Остальные строки отчета можно формировать печатью строк.
    //!
    //! @note Работает в режимах 2, 3, 4, 7 и 9. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #DocumentName - наименование документа – строка символов в кодировке WIN1251,
    //!     печатаемых в заголовке документа,
    //!  - #DocumentNumber - номер документа.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #OpenDocumentNumber - cквозной номер последнего документа ККМ.
    //!
    //! \return Код ошибки
    //!
    int PrintDocumentTitle();

    //!
    //! @brief Печать операционных регистров.
    //!
    //! Метод печатает содержимое операционных регистров.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора или системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintOperationReg();

    //!
    //! @brief Снять отчёт с гашением.
    //!
    //! Метод печатает сменный отчет с гашением.
    //!
    //! Если при закрытии смены необходимо передать дополнительные теги, то можно
    //! предварительно вызвать #FNBeginCloseSession, передать дополнительные TLV-Теги при
    //! помощи методов #FNSendTLV или #FNSendTag и в заключение вызвать #PrintReportWithCleaning.
    //!
    //! @note Работает в режимах 2 и 3. Переводит ККМ в режим 4.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBeginCloseSession
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNCloseSession.
    //!
    int PrintReportWithCleaning();

    //!
    //! @brief Снять отчёт без гашения.
    //!
    //! Метод печатает сменный отчет без гашения.
    //!
    //! @note Работает в режимах 2, 3 и 4. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int PrintReportWithoutCleaning();

    //!
    //! @brief Печать cтроки.
    //!
    //! Метод служит для печати строки символов на чековой ленте и/или на контрольной ленте
    //!(в операционном журнале).
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #UseReceiptRibbon - признак операции с чековой лентой,
    //!  - #UseJournalRibbon - признак операции с лентой операционного журнала,
    //!  - #StringForPrinting - строка символов (длиной не более 249) кодовой таблицы WIN1251 для
    //! печати.
    //!  - #WrapStrings - если ширина строки превышает максимальную ширину для текущих настроек - печатать в несколько строк(все равно что вызвать метод @see PrintStringWithWrap)
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintString();

    //!
    //! @brief Печать жирной cтроки.
    //!
    //! Метод служит для печати строки символов на чековой ленте и/или на контрольной ленте
    //!(в операционном журнале) жирным шрифтом.
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #UseReceiptRibbon - признак операции с чековой лентой,
    //!  - #UseJournalRibbon - признак операции с лентой операционного журнала,
    //!  - #StringForPrinting - строка символов (длиной не более 249) кодовой таблицы WIN1251 для
    //! печати.
    //!  - #WrapStrings - если ширина строки превышает максимальную ширину для текущих настроек - печатать в несколько строк
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintWideString();
    int ReadEKLZDocumentOnKPK();
    int ReadEKLZSessionTotal();

    //!
    //! @brief Прочитать лицензию.
    //!
    //! Команда чтения лицензии из ККМ.
    //!
    //! @note Работает в любом режиме, кроме режима 1. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #License - текстовый параметр, содержащий лицензию.
    //!
    //! \return Код ошибки
    //!
    int ReadLicense();

    //!
    //! @brief Прочитать таблицу.
    //!
    //! Команда читает из внутренней таблицы ККМ с номером #TableNumber из строки с номером
    //! #RowNumber
    //! из поля с номером #FieldNumber.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #TableNumber - номер таблицы,
    //!  - #RowNumber - номер ряда,
    //!  - #FieldNumber - номер поля.
    //!
    //! @par Модифицируемые свойства:
    //!  - #ValueOfFieldString - значение строкового поля,
    //!  - #ValueOfFieldInteger - значение числового поля.
    //!
    //! @return Код ошибки
    //!
    int ReadTable();

    //!
    //! @brief Повторить документ.
    //!
    //! Метод выводит на печать копию последнего закрытого документа продажи, покупки, возврата
    //! продажи и возврата покупки. Фискальный логотип на таком документе не печатается. В конце
    //! документа выводится надпись «ПОВТОР ДОКУМЕНТА».
    //!
    //! @note Работает в режимах 2 и 3. Переводит ККМ в режим 3, если кончились 24 часа.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int RepeatDocument();

    int ResetAllTRK();
    int ResetRK();

    //!
    //! @brief Технологическое обнуление.
    //!
    //! Метод производит операцию технологического обнуления. Технологическое обнуление доступно
    //! только после вскрытия пломбы на кожухе ККМ и выполнения последовательности действий,
    //! описанных в ремонтной документации на ККМ.
    //!
    //! @note Работает в режиме 9.
    //!
    //! @return Код ошибки
    //!
    int ResetSettings();

    //!
    //! @brief Общее гашение.
    //!
    //! Метод производит общее гашение регистров ККМ.
    //!
    //! @note Работает в режиме 4. Переводит ККМ в режим 7.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    int ResetSummary();

    //!
    //! @brief Возврат покупки.
    //!
    //! Команда производит регистрацию возврата покупки.
    //!
    //! @note 2, 4, 7, 8 (если статус 8-го режима ККМ=1) и 9.Переводит ККМ в режим 8 подрежим 1
    //! или 3.
    //!
    //! @attention Количество округляется до 3 знаков после запятой.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Quantity - количество товара(3 знака после запятой),
    //!  - #Price - цена за единицу товара(в копейках),
    //!  - #Department - номер отдела (секции),
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNOperation.
    //!
    int ReturnBuy();
    int ReturnBuyEx();

    //!
    //! @brief Возврат продажи.
    //!
    //! Возврат продажи – торговая операция, при которой товар возвращается от клиента к оператору,
    //! а деньги – в обратном направлении: от оператора к клиенту. Команда производит регистрацию
    //! возврата продажи определенного количества товара в определенную секцию с вычислением налогов
    //! (см. «Инструкцию по эксплуатации»/«Руководство оператора») без закрытия чека.
    //!
    //! @note Работает в режимах 2 (проверка на окончание 24 часов производится запросом из ФП до
    //! выполнения операции), 4, 7, 8 (если статус 8-го режима ККМ=2) и 9. Переводит ККМ в режим 8
    //! подрежим 2, или из режима 2 в режим 3 при истечении 24 часов смены.
    //!
    //! @attention Количество округляется до 3 знаков после запятой.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Quantity - количество товара(3 знака после запятой),
    //!  - #Price - цена за единицу товара(в копейках),
    //!  - #Department - номер отдела(секции),
    //!  - #Tax1 - налог1,
    //!  - #Tax2 - налог2,
    //!  - #Tax3 - налог3,
    //!  - #Tax4 - налог4,
    //!  - #StringForPrinting - строка для печати.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNOperation.
    //!
    int ReturnSale();

    int ReturnSaleEx();

    //!
    //! @brief Продажа.
    //!
    //! Продажа – торговая операция, при которой товар перемещается от оператора к клиенту, а деньги
    //! – в обратном направлении: от клиента к оператору.
    //!
    //! @note Работает в режимах 2, 4, 7, 8 (если статус 8-го режима ККМ = 0) и 9. Переводит ККМ в
    //! режим 8 подрежим 0, или из режима 2 в режим 3 при истечении 24 часов смены.
    //!
    //! @attention Количество округляется до 3 знаков после запятой.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Quantity - количество товара(3 знака после запятой),
    //!  - #Price - цена за единицу товара(в копейках),
    //!  - #Department - номер отдела (секции),
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber
    //!
    //! @return Код ошибки
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNOperation.
    //!
    int Sale();

    int SaleEx();
    int SetActiveLD();

    //!
    //! @brief Установить дату.
    //!
    //! Устанавливает дату во внутренних часах ККМ.
    //!
    //! @note Работает только в режимах 4, 7 и 9. Переводит ККМ в режим 6.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #Date - устанавливаемая в ККМ дата.
    //!
    //! @return Код ошибки
    //!
    int SetDate();

    int SetDozeInMilliliters();
    int SetDozeInMoney();

    //!
    //! @brief Установить Параметры Обмена.
    //!
    //! Метод устанавливает новые параметры связи ККМ с ПК.
    //!
    //! @note Метод может вызываться в любом режиме.Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль для исполнения метода драйвера,
    //!  - #PortNumber - порт ККМ, через который она подключена к ПК,
    //!  - #BaudRate - cкорость обмена между ККМ и подключенным к ней устройством (соответствие
    //! между кодом скорости и её значением смотри в описании свойства),
    //!  - #Timeout - тайм-аут приема байта.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int SetExchangeParam();

    int SetParamLD();

    //!
    //! @brief Установить положение точки.
    //!
    //! Команда установки положения десятичной точки (опция предназначена только для ККМ без ЭКЛЗ
    //! и без ФН).
    //!
    //! @note Работает только в режиме 7. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #PointPosition - признак положения десятичной точки.
    //!
    //! @return Код ошибки
    //!
    int SetPointPosition();

    int SetRKParameters();

    //!
    //! @brief Установить заводской номер.
    //!
    //! Команда установки заводского номера ККМ стандартной для России длины в 8 символов.
    //!
    //! @note Работает только в режиме 4. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль налогового инспектора,
    //!  - #SerialNumber - текстовый параметр (строка), содержащий серийный номер ККМ.
    //!
    //! @return Код ошибки
    //!
    int SetSerialNumber();

    //!
    //! @brief Установить время.
    //!
    //! Устанавливает время во внутренних часах ККМ.
    //!
    //! @note Работает в режимах 4, 7 и 9. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #Time - устанавливаемое в ККМ время,
    //!  - #TimeStr - строковое представление свойства #Time.
    //!
    //! @return Код ошибки
    //!
    int SetTime();

    int ShowProperties();
    int StopEKLZDocumentPrinting();
    int StopRK();

    //!
    //! @brief Сторно.
    //!
    //! Регистрация сторно определенного количества товара в определенную секцию с вычислением
    //! налогов без закрытия чека.
    //!
    //! @note Работает в режиме 8. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Quantity - количество товара,
    //!  - #Price - цена за единицу товара.,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int Storno();

    int StornoEx();

    //!
    //! @brief Сторно надбавки.
    //!
    //! Метод регистрирует сторно надбавки на сумму, задаваемую в свойстве Summ1,
    //! с вычислением налогов.
    //!
    //! @note Работает в режиме 8, если до этого в смене была сделана операция «Надбавка».
    //! Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - денежная сумма, на которую регистрируется сторно скидки,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int StornoCharge();

    //!
    //! @brief Сторно скидки.
    //!
    //! Метод регистрирует сторно скидки на сумму, задаваемую в свойстве #Summ1,
    //! с вычислением налогов.
    //!
    //! @note Работает в режиме 8, если до этого в смене была сделана операция «Скидка».
    //! Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - денежная сумма, на которую регистрируется сторно скидки,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей цену(сумму) и/или количество.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int StornoDiscount();
    int SummOilCheck();
    //!
    //! @brief Отмена чека администратором.
    //!
    //! Команда позволяет системному администратору отменить (аннулировать) чек, открытый любым
    //! другим оператором, администратором или самим системным администратором. При этом на чеке
    //! печатается надпись «ЧЕК АННУЛИРОВАН».
    //!
    //!
    //! @note Работает в режиме 8. Переводит ККМ в режим, в котором ККМ была до открытия чека, или в
    //! режим 3
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора
    //!
    //! @return Код ошибки
    //!
    int SysAdminCancelCheck();

    //!
    //! @brief Тестовый прогон.
    //!
    //! Эта команда запускает тестовый прогон ККМ, т.е. печать тестового чека через определенные
    //! промежутки времени. Прерывается тестовый прогон ККМ только командой #InterruptTest.
    //!
    //! @note Работает в режимах 2, 3, 4, 7, 9 и 16. Переводит ККМ или принтер в режим 10 (возврат
    //! в прежний режим – вызов метода #InterruptTest).
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #RunningPeriod - период вывода тестового чека в минутах в режиме тестового прогона.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int Test();

    //!
    //! @brief Записать лицензию.
    //!
    //! Команда записи лицензии в ККМ.
    //!
    //! @note Работает в любом режиме, кроме режима 1. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!  - #License - текстовый параметр, содержащий лицензию.
    //!
    //! \return Код ошибки
    //!
    int WriteLicense();

    //!
    //! @brief Записать таблицу.
    //!
    //! Команда записывает во внутреннюю таблицу ККМ с номером #TableNumber в строку с номером
    //! RowNumber в поле с номером #FieldNumber значение #ValueOfFieldString(#ValueOfFieldInteger).
    //!
    //! @note Работает во всех режимах, кроме режимов 1 и 8. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #TableNumber - номер таблицы,
    //!  - #RowNumber - номер ряда,
    //!  - #FieldNumber - номер поля.
    //!  - #ValueOfFieldString - значение строкового поля,
    //!  - #ValueOfFieldInteger - значение числового поля.
    //!
    //! @return Код ошибки
    //!
    int WriteTable();

    //!
    //! @brief Печать cтроки данным шрифтом.
    //!
    //! Метод служит для печати строки символов на чековой ленте и/или на контрольной ленте
    //! (в операционном журнале) неким шрифтом из набора шрифтов.
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #UseReceiptRibbon - признак операции с чековой лентой,
    //!  - #UseJournalRibbon - признак операции с лентой операционного журнала,
    //!  - #StringForPrinting - строка символов (длиной не более 248) кодовой таблицы WIN1251 для
    //! печати,
    //!  - #FontType - тип шрифта при печати строки.
    //!  - #WrapStrings - если ширина строки превышает максимальную ширину для текущих настроек - печатать в несколько строк
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintStringWithFont();

    //!
    //! @brief Штрих-код, печатаемый на чеке
    //!
    //! @par Методы доступа:
    //!   #Get_BarCode, #Set_BarCode
    //!
    //! @par Используется методами:
    //!   #PrintBarCode, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(std::string BarCode)
    //!
    //! @brief Возвращает значение свойства #BarCode
    //! @return BarCode
    //! @relates BarCode
    //!
    std::string Get_BarCode() const;
    //!
    //! @brief Устанавливает значение свойства #BarCode
    //! @param value Новое значение BarCode
    //! @relates BarCode
    //!
    void Set_BarCode(const std::string& value);

    bool Get_BatteryCondition() const;

    //!
    //! @brief Напряжение на батарейке
    //!
    //! Напряжение резервной батареи.
    //!
    //! @par Методы доступа:
    //!   #Get_BatteryVoltage
    //!
    //! @par Модифицируется методом:
    //!   #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(double BatteryVoltage)
    //!
    //! @brief Возвращает значение свойства #BatteryVoltage
    //! @return BatteryVoltage
    //! @relates BatteryVoltage
    //!
    double Get_BatteryVoltage() const;

    //!
    //! @brief Скорость обмена.
    //!
    //! Скорость обмена между ККМ и подключенным к ней устройством.
    //! Соответствие значения параметра и скорости обмена приведены в таблице:
    //!
    //! | Значение параметра BaudRate | Скорость обмена, бод |
    //! |-----------------------------|------------------------------------------------------------|
    //! |         0                   |         2400         |
    //! |         1                   |         4800         |
    //! |         2                   |         9600         |
    //! |         3                   |         19200        |
    //! |         4                   |         38400        |
    //! |         5                   |         57600        |
    //! |         6                   |         115200       |
    //!
    //! @par Методы доступа:
    //!   #Get_BaudRate, #Set_BaudRate
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(int BaudRate)
    //!
    //! @brief Возвращает значение свойства #BaudRate
    //! @return BaudRate
    //! @relates BaudRate
    //!
    int Get_BaudRate() const;
    //!
    //! @brief Устанавливает значение свойства #BaudRate
    //! @param value Новое значение BaudRate
    //! @relates BaudRate
    //!
    void Set_BaudRate(int value);

    //!
    //! @brief Сдача
    //!
    //! @note Свойство доступно только для чтения
    //!
    //! Свойство, в котором хранится сумма сдачи.
    //! Задается в копейках.
    //!
    //! @par Методы доступа:
    //!   #Get_Change
    //!
    //! @par Модифицируется методом:
    //!   #CloseCheck
    //!
    DOXYGEN_PROPERTY(int64_t Change)
    //!
    //! @brief Возвращает значение свойства #Change
    //! @return Change
    //! @relates Change
    //!
    int64_t Get_Change() const;

    int64_t Get_CheckResult() const;
    void Set_CheckResult(int64_t value);
    // clang-format off
    //!
    //! @brief Тип чека
    //!
    //! Тип документа/чека.
    //!
    //! Допустимые значения:
    //!
    //! | Тип операции #OpenCheck/ФН методов | Значение #OpenCheck | Значение для ФН методов |
    //! |------------------------------------|:-------------------:|:-----------------------------------------------------------------------:|
    //! | продажа/приход                     |          0          |            1            |
    //! | покупка/расход                     |          1          |            3            |
    //! | возврат продажи/возврат прихода    |          2          |            2            |
    //! | возврат покупки/возврат расхода    |          3          |            4            |
    //!
    //! @par Методы доступа:
    //!   #Get_CheckType,#Set_CheckType
    //!
    //! @par Используется методами:
    //!   #OpenCheck, #FNBuildCorrectionReceipt, #FNOperation, #FNOpenCheckCorrection.
    //!
    DOXYGEN_PROPERTY(int CheckType)
    // clang-format on
    //!
    //! @brief Возвращает значение свойства #CheckType
    //! @return CheckType
    //! @relates CheckType
    //!
    int Get_CheckType() const;
    //!
    //! @brief Устанавливает значение свойства #CheckType
    //! @param value Новое значение CheckType
    //! @relates CheckType
    //!
    void Set_CheckType(int value);

    //!
    //! @brief Номер Com-порта
    //!
    //! Номер Com-порта ПК к которому подсоединена ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_ComNumber, #Set_ComNumber
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(int ComNumber)
    //!
    //! @brief Возвращает значение свойства #ComNumber
    //! @return ComNumber
    //! @relates ComNumber
    //!
    int Get_ComNumber() const;
    //!
    //! @brief Устанавливает значение свойства #ComNumber
    //! @param value Новое значение ComNumber
    //! @relates ComNumber
    //!
    void Set_ComNumber(int value);

    //!
    //! @brief Содержимое денежного регистра
    //!
    //! @par Методы доступа:
    //!   #Get_ContentsOfCashRegister
    //!
    //! @par Модифицируется методами:
    //!   #GetCashReg, #GetCashRegEx
    //!
    DOXYGEN_PROPERTY(int64_t ContentsOfCashRegister)
    //!
    //! @brief Возвращает значение свойства #ContentsOfCashRegister
    //! @return ContentsOfCashRegister
    //! @relates ContentsOfCashRegister
    //!
    int64_t Get_ContentsOfCashRegister() const;

    //!
    //! @brief Содержимое операционного регистра
    //!
    //! @par Методы доступа:
    //!   #Get_ContentsOfOperationRegister
    //!
    //! @par Модифицируется методами:
    //!   #GetOperationReg
    //!
    DOXYGEN_PROPERTY(int ContentsOfOperationRegister)
    //!
    //! @brief Возвращает значение свойства #ContentsOfOperationRegister
    //! @return ContentsOfOperationRegister
    //! @relates ContentsOfOperationRegister
    //!
    int Get_ContentsOfOperationRegister() const;

    int Get_CurrentDozeInMilliliters() const;
    void Set_CurrentDozeInMilliliters(int value);
    int64_t Get_CurrentDozeInMoney() const;
    void Set_CurrentDozeInMoney(int64_t value);

    //!
    //! @brief Тип отрезки
    //!
    //! Признак типа отрезки чека: TRUE – неполная отрезка, FALSE – полная отрезка.
    //!
    //! @par Используется методами:
    //!   #CutCheck
    //!
    //! @par Методы доступа:
    //!   #Get_CutType, #Set_CutType
    //!
    DOXYGEN_PROPERTY(bool CutType)
    //!
    //! @brief Возвращает значение свойства #CutType
    //! @return CutType
    //! @relates CutType
    //!
    bool Get_CutType() const;
    //!
    //! @brief Устанавливает значение свойства #CutType
    //! @param value Новое значение CutType
    //! @relates CutType
    //!
    void Set_CutType(bool value);

    //!
    //! @brief Блок данных
    //!
    //! Блок данных, передаваемый ККМ в результате вызова метода #GetData. \n
    //! Длина блока данных 32 байта (символа).
    //!
    //! @par Модифицируется методами:
    //!   #GetData
    //!
    //! @par Методы доступа:
    //!   #Get_DataBlock
    //!
    DOXYGEN_PROPERTY(std::string DataBlock)
    //!
    //! @brief Возвращает значение свойства #DataBlock
    //! @return DataBlock
    //! @relates DataBlock
    //!
    std::string Get_DataBlock() const;

    //!
    //! @brief @see DataBlock
    //!
    //! @par Методы доступа:
    //!   #Get_DataBlockHex
    //!
    DOXYGEN_PROPERTY(std::string DataBlockHex)
    //!
    //! @brief Возвращает значение свойства #DataBlockHex
    //! @return DataBlockHex
    //! @relates DataBlockHex
    //!
    std::string Get_DataBlockHex() const;

    //!
    //! @brief Номер блока данных
    //!
    //! Количество блоков данных в данном внутреннем устройстве ККМ или номер блока данных, который
    //! выдаётся по вызову метода #GetData.
    //!
    //! @par Модифицируется методами:
    //!   #GetData
    //!
    //! @par Методы доступа:
    //!   #Get_DataBlockNumber
    //!
    DOXYGEN_PROPERTY(int DataBlockNumber)
    //!
    //! @brief Возвращает значение свойства #DataBlockNumber
    //! @return DataBlockNumber
    //! @relates DataBlockNumber
    //!
    int Get_DataBlockNumber() const;

    //!
    //! @brief Внутренняя дата ККМ
    //!
    //! В зависимости от метода может быть датой внутреннего времени ККМ, датой фискализации
    //! (перерегистрации) и т.д. (см. описание методов).
    //!
    //! @par Используется методами:
    //!   #ConfirmDate, #SetDate
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetLastFMRecordDate, #Fiscalization, #GetFiscalizationParameters,
    //! #FNBuildCalculationStateReport, #FNFindDocument, #FNGetExpirationTime,
    //!  #FNGetFiscalizationResult, #FNGetInfoExchangeStatus, #FNGetOFDTicketByDocNumber,
    //! #FNGetStatus.
    //!
    //! @par Методы доступа:
    //!   #Get_Date, #Set_Date
    //!
    DOXYGEN_PROPERTY(std::time_t Date)
    //!
    //! @brief Возвращает значение свойства #Date
    //! @return Date
    //! @relates Date
    //!
    std::time_t Get_Date() const;
    //!
    //! @brief Устанавливает значение свойства #Date
    //! @param value Новое значение Date
    //! @relates Date
    //!
    void Set_Date(std::time_t value);

    //!
    //! @brief Номер отдела (секции)
    //!
    //! Диапазон значений: 0…16.
    //!
    //! @par Используется методами:
    //!   #Sale, #Buy, #ReturnSale, #ReturnBuy
    //!
    //! @par Методы доступа:
    //!   #Get_Department, #Set_Department
    //!
    DOXYGEN_PROPERTY(int Department)
    //!
    //! @brief Возвращает значение свойства #Department
    //! @return Department
    //! @relates Department
    //!
    int Get_Department() const;
    //!
    //! @brief Устанавливает значение свойства #Department
    //! @param value Новое значение Department
    //! @relates Department
    //!
    void Set_Department(int value);

    //!
    //! @brief Код устройства
    //!
    //! Свойство содержит код внутреннего устройства ККМ.
    //!
    //! | Код |     Устройство           |
    //! |-----|----------------------------|
    //! | 0   | Стационарная проверка ФП |
    //! | 1   | Накопитель ФП1           |
    //! | 2   | Накопитель ФП2           |
    //! | 3   | Часы                     |
    //! | 4   | Энергонезависимая память |
    //! | 5   | Процессор ФП             |
    //! | 6   | Память программ ККМ      |
    //! | 7   | Оперативная память ККМ   |
    //! | 8   | Образ файловой системы   |
    //! | 9   | Образ uLinux             |
    //! | 10  | Исполняемый файл ПО      |
    //! | 134 | Память программ КЯ       |
    //!
    //! @par Используется методами:
    //!   #DampRequest
    //!
    //! @par Модифицируется методами:
    //!   #GetData
    //!
    //! @par Методы доступа:
    //!   #Get_DeviceCode, #Set_DeviceCode
    //!
    DOXYGEN_PROPERTY(int DeviceCode)
    //!
    //! @brief Возвращает значение свойства #DeviceCode
    //! @return DeviceCode
    //! @relates DeviceCode
    //!
    int Get_DeviceCode() const;
    //!
    //! @brief Устанавливает значение свойства #DeviceCode
    //! @param value Новое значение DeviceCode
    //! @relates DeviceCode
    //!
    void Set_DeviceCode(int value);

    //!
    //! @brief Описание устройства
    //!
    //! Свойство содержит строку с описанием кода внутреннего устройства ККМ
    //! (см. описание свойства #DeviceCode).
    //!
    //! @par Модифицируется методами:
    //!   #GetData
    //!
    //! @par Методы доступа:
    //!   #Get_DeviceCodeDescription
    //!
    DOXYGEN_PROPERTY(std::string DeviceCodeDescription)
    //!
    //! @brief Возвращает значение свойства #DeviceCodeDescription
    //! @return DeviceCodeDescription
    //! @relates DeviceCodeDescription
    //!
    std::string Get_DeviceCodeDescription() const;

    //!
    //! @brief Скидка на чек
    //!
    //! Диапазон значений: 0…99,99.
    //!
    //! @par Методы доступа:
    //!   #Get_DiscountOnCheck, #Set_DiscountOnCheck
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #CloseCheckEx
    //!
    DOXYGEN_PROPERTY(double DiscountOnCheck)
    //!
    //! @brief Возвращает значение свойства #DiscountOnCheck
    //! @return DiscountOnCheck
    //! @relates DiscountOnCheck
    //!
    double Get_DiscountOnCheck() const;
    //!
    //! @brief Устанавливает значение свойства #DiscountOnCheck
    //! @param value Новое значение DiscountOnCheck
    //! @relates DiscountOnCheck
    //!
    void Set_DiscountOnCheck(double value);

    //!
    //! @brief Наименование документа
    //!
    //! Наименование документа – строка символов в кодировке WIN1251, печатаемых в заголовке
    //! документа при вызове метода #PrintDocumentTitle. \n
    //! Длина строки не более 30 символов.
    //!
    //! @par Методы доступа:
    //!   #Get_DocumentName, #Set_DocumentName
    //!
    //! @par Используется методами:
    //!   #PrintDocumentTitle
    //!
    DOXYGEN_PROPERTY(std::string DocumentName)
    //!
    //! @brief Возвращает значение свойства #DocumentName
    //! @return DocumentName
    //! @relates DocumentName
    //!
    std::string Get_DocumentName() const;
    //!
    //! @brief Устанавливает значение свойства #DocumentName
    //! @param value Новое значение DocumentName
    //! @relates DocumentName
    //!
    void Set_DocumentName(const std::string& value);

    //!
    //! @brief Номер документа
    //!
    //! Диапазон значений: 1…9999.
    //!
    //! @par Методы доступа:
    //!   #Get_DocumentNumber, #Set_DocumentNumber
    //!
    //! @par Используется методами:
    //!   #PrintDocumentTitle,#FNFindDocument,#FNGetOFDTicketByDocNumber,#FNRequestFiscalDocumentTLV
    //!
    //!  @par Модифицируется методами:
    //! #FNGetStatus,#FNFindDocument,#FNBuildCalculationStateReport,#FNBuildCorrectionReceipt,
    //! #FNBuildRegistrationReport,#FNGetInfoExchangeStatus,#FNGetOFDTicketByDocNumber,
    //! #FNGetUnconfirmedDocCount,#FNBuildReregistrationReport,#FNGetFiscalizationResult,
    //! #FNCloseCheckEx, #FNOpenSession
    //!
    DOXYGEN_PROPERTY(uint32_t DocumentNumber)
    //!
    //! @brief Возвращает значение свойства #DocumentNumber
    //! @return DocumentNumber
    //! @relates DocumentNumber
    //!
    uint32_t Get_DocumentNumber() const;
    //!
    //! @brief Устанавливает значение свойства #DocumentNumber
    //! @param value Новое значение DocumentNumber
    //! @relates DocumentNumber
    //!
    void Set_DocumentNumber(uint32_t value);

    int Get_DozeInMilliliters() const;
    void Set_DozeInMilliliters(int value);
    int64_t Get_DozeInMoney() const;
    void Set_DozeInMoney(int64_t value);

    //!
    //! @brief Номер денежного ящика
    //!
    //! Диапазон значений: 0 и 1.
    //!
    //! @par Методы доступа:
    //!   #Get_DrawerNumber, #Set_DrawerNumber
    //!
    //! @par Используется методами:
    //!   #OpenDrawer
    //!
    DOXYGEN_PROPERTY(int DrawerNumber)
    //!
    //! @brief Возвращает значение свойства #DrawerNumber
    //! @return DrawerNumber
    //! @relates DrawerNumber
    //!
    int Get_DrawerNumber() const;
    //!
    //! @brief Устанавливает значение свойства #DrawerNumber
    //! @param value Новое значение DrawerNumber
    //! @relates DrawerNumber
    //!
    void Set_DrawerNumber(int value);

    //!
    //! @brief Подрежим ККМ
    //!
    //! Одно из подсостояний ККМ, в котором она может находиться. Подрежимы предназначены для
    //! корректного завершения операций при печати документов в случае нештатных ситуаций, таких
    //! как обрыв чековой ленты или ленты операционного журнала, выключение питания во время печати
    //! документа. Переход от подрежима к подрежиму производится автоматически при вызове того
    //! или иного метода.Номера и назначение подрежимов:
    //!
    //! <table>
    //! <tr><th>Подрежим ККМ</th><th>Описание подрежима ККМ</th></tr>
    //! <tr><td>0</td><td>Бумага есть – ККТ не в фазе печати операции – может принимать от хоста
    //! команды,
    //!  связанные с печатью на той ленте, датчик которой сообщает о наличии бумаги.</td></tr>
    //! <tr><td>1<td>Пассивное отсутствие бумаги – ККМ не в фазе печати операции – не принимает от
    //! хоста
    //! команды, связанные с печатью на том ленте, датчик которой сообщает об отсутствии бумаги.
    //! <tr><td>2<td>Активное отсутствие бумаги – ККМ в фазе печати операции – принимает только
    //! команды, не
    //! связанные с печатью. Переход из этого подрежима только в подрежим 3.
    //! <tr><td>3<td>После активного отсутствия бумаги – ККМ ждет команду продолжения печати. Кроме
    //! этого
    //! принимает команды, не связанные с печатью.
    //! <tr><td>4<td>Фаза печати операции длинного отчета (полные фискальные отчеты, полные отчеты
    //! ЭКЛЗ,
    //! печать контрольных лент из ЭКЛЗ) – ККМ не принимает от хоста команды, связанные с печатью,
    //! кроме команды прерывания печати.
    //! <tr><td>5<td>Фаза печати операции – ККМ не принимает от хоста команды, связанные с печатью.
    //! </table>
    //!
    //! @par Методы доступа:
    //!   #Get_ECRAdvancedMode
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(int ECRAdvancedMode)
    //!
    //! @brief Возвращает значение свойства #ECRAdvancedMode
    //! @return ECRAdvancedMode
    //! @relates ECRAdvancedMode
    //!
    int Get_ECRAdvancedMode() const;

    //!
    //! @brief Описание подрежима ККМ
    //!
    //! Свойство содержит строку с описанием на русском языке подрежима ККМ
    //! (см. столбец «Описание подрежима ККМ» в описании свойства #ECRAdvancedMode)
    //!
    //! @par Методы доступа:
    //!   #Get_ECRAdvancedModeDescription
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(std::string ECRAdvancedModeDescription)
    //!
    //! @brief Возвращает значение свойства #ECRAdvancedModeDescription
    //! @return ECRAdvancedModeDescription
    //! @relatesECRAdvancedModeDescription
    //!
    std::string Get_ECRAdvancedModeDescription() const;

    //!
    //! @brief Номер сборки ПО ККМ
    //!
    //! Диапазон значений: 0..65535.
    //!
    //! @par Методы доступа:
    //!   #Get_ECRBuild
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    DOXYGEN_PROPERTY(int ECRBuild)
    //!
    //! @brief Возвращает значение свойства #ECRBuild
    //! @return ECRBuild
    //! @relates ECRBuild
    //!
    int Get_ECRBuild() const;

    //!
    //! @brief Флаги ККМ
    //!
    //! Признаки (флаги) ККМ.
    //! Раскладывается в следующее битовое поле:
    //! #JournalRibbonIsPresent, #ReceiptRibbonIsPresent , #SlipDocumentIsPresent,
    //! #SlipDocumentIsMoving, #PointPosition, #EKLZIsPresent, #JournalRibbonOpticalSensor,
    //! #ReceiptRibbonOpticalSensor, #JournalRibbonLever, #ReceiptRibbonLever, #LidPositionSensor,
    //! #IsDrawerOpen, #IsPrinterRightSensorFailure, #IsPrinterLeftSensorFailure, #IsEKLZOverflow,
    //! #QuantityPointPosition.
    //!
    //! @par Методы доступа:
    //!   #Get_ECRFlags
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(int ECRFlags)
    //!
    //! @brief Возвращает значение свойства #ECRFlags
    //! @return ECRFlags
    //! @relates ECRFlags
    //!
    int Get_ECRFlags() const;

    //!
    //! @brief Рулон чековой ленты есть
    //!
    //! Признак наличия в ККМ рулона чековой ленты. \n
    //! FALSE – рулона чековой ленты нет, TRUE – рулон чековой ленты есть.
    //!
    //! @par Методы доступа:
    //!   #Get_ReceiptRibbonIsPresent
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool ReceiptRibbonIsPresent)
    //!
    //! @brief Возвращает значение свойства #ReceiptRibbonIsPresent
    //! @return ReceiptRibbonIsPresent
    //! @relates ReceiptRibbonIsPresent
    //!
    bool Get_ReceiptRibbonIsPresent() const;
    //!
    //! @brief Рулон операционного журнала есть
    //!
    //! Признак наличия в ККМ рулона операционного журнала. \n
    //! FALSE – рулона операционного журнала нет, TRUE – рулон операционного журнала есть.
    //!
    //! @par Методы доступа:
    //!   #Get_JournalRibbonIsPresent
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool JournalRibbonIsPresent)
    //!
    //! @brief Возвращает значение свойства #JournalRibbonIsPresent
    //! @return JournalRibbonIsPresent
    //! @relates JournalRibbonIsPresent
    //!
    bool Get_JournalRibbonIsPresent() const;

    //!
    //! @brief  Подкладной документ есть
    //!
    //! Признак наличия в ККМ подкладного документа. \n
    //! FALSE – подкладного документа нет, TRUE – подкладной документ есть.
    //!
    //! @par Методы доступа:
    //!   #Get_SlipDocumentIsPresent
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool SlipDocumentIsPresent)
    //!
    //! @brief Возвращает значение свойства #SlipDocumentIsPresent
    //! @return SlipDocumentIsPresent
    //! @relates SlipDocumentIsPresent
    //!
    bool Get_SlipDocumentIsPresent() const;

    //!
    //! @brief Подкладной документ проходит
    //!
    //! Признак прохождения подкладного документа под датчиком контроля подкладного документа. \n
    //! FALSE – подкладной документ отсутствует под датчиком контроля подкладного документа, \n
    //! TRUE – подкладной документ проходит под датчиком контроля подкладного документа.
    //!
    //! @par Методы доступа:
    //!   #Get_SlipDocumentIsMoving
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool SlipDocumentIsMoving)
    //!
    //! @brief Возвращает значение свойства #SlipDocumentIsMoving
    //! @return SlipDocumentIsMoving
    //! @relates SlipDocumentIsMoving
    //!
    bool Get_SlipDocumentIsMoving() const;

    //!
    //! @brief Положение точки
    //!
    //! Признак положения десятичной точки. \n
    //! FALSE – десятичная точка отделяет 0 разрядов, TRUE – десятичная точка отделяет 2 разряда.
    //!
    //! @par Методы доступа:
    //!   #Get_PointPosition, #Set_PointPosition
    //!
    //! @par Используется методами:
    //! #SetPointPosition
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool PointPosition)
    //!
    //! @brief Возвращает значение свойства #PointPosition
    //! @return PointPosition
    //! @relates PointPosition
    //!
    bool Get_PointPosition() const;
    //!
    //! @brief Устанавливает значение свойства #PointPosition
    //! @param value Новое значение PointPosition
    //! @relates PointPosition
    void Set_PointPosition(bool value);

    //!
    //! @brief ЭКЛЗ есть
    //!
    //! @par Методы доступа:
    //!   #Get_EKLZIsPresent
    //!
    //! Признак наличия в ККМ ЭКЛЗ. \n
    //! FALSE – ЭКЛЗ нет, TRUE – ЭКЛЗ есть.
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool EKLZIsPresent)
    //!
    //! @brief Возвращает значение свойства #EKLZIsPresent
    //! @return EKLZIsPresent
    //! @relates EKLZIsPresent
    //!
    bool Get_EKLZIsPresent() const;

    //!
    //! @brief Оптический датчик операционного журнала
    //!
    //! Признак положения рычага термоголовки операционного журнала. \n
    //! TRUE – рычаг термоголовки операционного журнала поднят; \n
    //! FALSE – рычаг термоголовки операционного журнала опущен.
    //!
    //! @par Методы доступа:
    //!   #Get_JournalRibbonOpticalSensor
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool JournalRibbonOpticalSensor)
    //!
    //! @brief Возвращает значение свойства #JournalRibbonOpticalSensor
    //! @return JournalRibbonOpticalSensor
    //! @relates JournalRibbonOpticalSensor
    //!
    bool Get_JournalRibbonOpticalSensor() const;

    //!
    //! @brief Оптический датчик чековой ленты
    //!
    //! Признак прохождения чековой ленты под оптическим датчиком чековой ленты. \n
    //! FALSE – чековой ленты нет под оптическим датчиком; \n
    //! TRUE – чековая лента проходит под оптическим датчиком.
    //!
    //! @par Методы доступа:
    //!   #Get_ReceiptRibbonOpticalSensor
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool ReceiptRibbonOpticalSensor)
    //!
    //! @brief Возвращает значение свойства #ReceiptRibbonOpticalSensor
    //! @return ReceiptRibbonOpticalSensor
    //! @relates ReceiptRibbonOpticalSensor
    //!
    bool Get_ReceiptRibbonOpticalSensor() const;

    //!
    //! @brief Рычаг термоголовки операционного журнала
    //!
    //! Признак положения рычага термоголовки операционного журнала. \n
    //! TRUE – рычаг термоголовки операционного журнала поднят; \n
    //! FALSE – рычаг термоголовки операционного журнала опущен.
    //!
    //! @par Методы доступа:
    //!   #Get_JournalRibbonLever
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool JournalRibbonLever)
    //!
    //! @brief Возвращает значение свойства #JournalRibbonLever
    //! @return JournalRibbonLever
    //! @relates JournalRibbonLever
    //!
    bool Get_JournalRibbonLever() const;

    //!
    //! @brief Рычаг термоголовки чековой ленты
    //!
    //! Признак положения рычага термоголовки чековой ленты. \n
    //! TRUE – рычаг термоголовки чековой ленты поднят; \n
    //! FALSE – рычаг термоголовки чековой ленты опущен.
    //!
    //! @par Методы доступа:
    //!   #Get_ReceiptRibbonLever
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool ReceiptRibbonLever)
    //!
    //! @brief Возвращает значение свойства #ReceiptRibbonLever
    //! @return ReceiptRibbonLever
    //! @relates ReceiptRibbonLever
    //!
    bool Get_ReceiptRibbonLever() const;

    //!
    //! @brief Датчик крышки корпуса
    //!
    //! Признак положения крышки корпуса. \n
    //! TRUE – крышка корпуса не установлена;
    //! FALSE – крышка корпуса установлена.
    //!
    //! @par Методы доступа:
    //!   #Get_LidPositionSensor
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool LidPositionSensor)
    //!
    //! @brief Возвращает значение свойства #LidPositionSensor
    //! @return LidPositionSensor
    //! @relates LidPositionSensor
    //!
    bool Get_LidPositionSensor() const;

    //!
    //! @brief Денежный ящик открыт
    //!
    //! Признак состояния денежного ящика. \n
    //! TRUE – денежный ящик открыт; \n
    //! FALSE – денежный ящик закрыт.
    //!
    //! @par Методы доступа:
    //!   #Get_IsDrawerOpen
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsDrawerOpen)
    //!
    //! @brief Возвращает значение свойства #IsDrawerOpen
    //! @return IsDrawerOpen
    //! @relates IsDrawerOpen
    //!
    bool Get_IsDrawerOpen() const;

    //!
    //! @brief Отказ правого датчика печатающего механизма
    //!
    //! Признак отказа правого датчика печатающего механизма. \n
    //! FALSE – отказа датчика нет, TRUE – имеет место отказ датчика.
    //!
    //! @par Методы доступа:
    //!   #Get_IsPrinterRightSensorFailure
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsPrinterRightSensorFailure)
    //!
    //! @brief Возвращает значение свойства #IsPrinterRightSensorFailure
    //! @return IsPrinterRightSensorFailure
    //! @relates IsPrinterRightSensorFailure
    //!
    bool Get_IsPrinterRightSensorFailure() const;

    //!
    //! @brief Отказ левого датчика печатающего механизма
    //!
    //! Признак отказа левого датчика печатающего механизма. \n
    //! FALSE – отказа датчика нет, TRUE – имеет место отказ датчика.
    //!
    //! @par Методы доступа:
    //!   #Get_
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsPrinterLeftSensorFailure)
    //!
    //! @brief Возвращает значение свойства #IsPrinterLeftSensorFailure
    //! @return IsPrinterLeftSensorFailure
    //! @relates IsPrinterLeftSensorFailure
    //!
    bool Get_IsPrinterLeftSensorFailure() const;

    //!
    //! @brief Переполнение ЭКЛЗ
    //!
    //! Признак состояния ЭКЛЗ. \n
    //! TRUE – ЭКЛЗ близка к переполнению, FALSE – ЭКЛЗ ещё не близка к переполнению.
    //!
    //! @par Методы доступа:
    //!   #Get_IsEKLZOverflow
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsEKLZOverflow)
    //!
    //! @brief Возвращает значение свойства #IsEKLZOverflow
    //! @return IsEKLZOverflow
    //! @relates IsEKLZOverflow
    //!
    bool Get_IsEKLZOverflow() const;

    //!
    //! @brief Положение точки в количестве
    //!
    //! Признак положения десятичной точки в количестве товара. \n
    //! TRUE – три знака после запятой (ХХХХХХХ.ХХХ); \n
    //! FALSE – шесть знаков после запятой (ХХХХ.ХХХХХХ,
    //! так называемый режим увеличенной точности количества).
    //!
    //! @par Методы доступа:
    //!   #Get_QuantityPointPosition
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool QuantityPointPosition)
    //!
    //! @brief Возвращает значение свойства #QuantityPointPosition
    //! @return QuantityPointPosition
    //! @relates QuantityPointPosition
    //!
    bool Get_QuantityPointPosition() const;

    //!
    //! @brief Статус СКНО
    //!
    //! Последний статус СКНО (Для белорусских ККТ)
    //!
    //! Допустимые значения: 0000…0FFFh (FFFh – некорректный статус)
    //!
    //! | № бита | назначение бита                                                                      |
    //! |--------|--------------------------------------------------------------------------------------|
    //! |   0    | Занят «1»/свободен «0»;                                                              |
    //! |   1    | СКЗИ, есть «1»/нет «0»;                                                              |
    //! |   2    | Соединение с сервером, есть «1»/нет «0»;                                             |
    //! |   3    | Запрет обслуживания по окончанию сертификата СКЗИ, есть «1»/нет «0»;                 |
    //! |   4    | Запрет обслуживания по не переданным суточным отчетам (Z-отчетам), есть «1»/нет «0»; |
    //! |   5    | Запрет обслуживания по переполнению памяти СКНО, есть «1»/нет «0»;                   |
    //! |   6    | Идентификация прошла успешно, да «1»/нет «0»;                                        |
    //! |   7    | Смена открыта, да «1»/нет «0»;                                                       |
    //! |   8    | Не завершена процедура по переданному документу, да «1»/нет «0»;                     |
    //! |   9    | Наличие в памяти СКНО не переданных документов да «1»/нет «0»;                       |
    //! |   10   | Превышен максимальный размер электронного кассового документа да «1»/нет «0»;        |
    //! |   11   | СКНО исправно да «1»/нет «0»;                                                        |
    //! | 12…15  | Зарезервировано (Всегда «0»).                                                        |
    //!
    //! @par Методы доступа:
    //!   #Get_SKNOStatus, #Set_SKNOStatus
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    DOXYGEN_PROPERTY(int SKNOStatus)
    //!
    //! @brief Возвращает значение свойства #SKNOStatus
    //! @return SKNOStatus
    //! @relates SKNOStatus
    //!
    int Get_SKNOStatus() const;
    //!
    //! @brief Устанавливает значение свойства #SKNOStatus
    //! @param value Новое значение SKNOStatus
    //! @relates SKNOStatus
    void Set_SKNOStatus(int value);

    std::string Get_ECRInput() const;

    //!
    //! @brief Режим ККМ
    //!
    //! Режим ККМ – одно из состояний ККМ, в котором она может находиться.
    //! Переход от режима к режиму производится автоматически при вызове того или иного метода
    //!
    //! | Номер режима |                  Описание режима                         |
    //! |--------------|----------------------------------------------------------|
    //! |      0       | Принтер в рабочем режиме                                 |
    //! |      1       | Выдача данных                                            |
    //! |      2       | Открытая смена, 24 часа не кончились                     |
    //! |      3       | Открытая смена, 24 часа кончились                        |
    //! |      4       | Закрытая смена                                           |
    //! |      5       | Блокировка по неправильному паролю налогового инспектора |
    //! |      6       | Ожидание подтверждения ввода даты                        |
    //! |      7       | Разрешение изменения положения десятичной точки          |
    //! |      8       | Открытый документ                                        |
    //! |      9       | Режим разрешения технологического обнуления              |
    //! |      10      | Тестовый прогон                                          |
    //! |      11      | Печать полного фискального отчета                        |
    //! |      12      | Печать длинного отчета ЭКЛЗ                              |
    //! |      13      | Работа с фискальным подкладным документом                |
    //! |      14      | Печать подкладного документа                             |
    //! |      15      | Фискальный подкладной документ сформирован               |
    //!
    //! @par Методы доступа:
    //!   #Get_ECRMode
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(int ECRMode)
    //!
    //! @brief Возвращает значение свойства #ECRMode
    //! @return ECRMode
    //! @relates ECRMode
    //!
    int Get_ECRMode() const;

    //!
    //! @brief Статус 8 режима
    //!
    //! Находясь в режиме 8, ККМ может быть в одном из состояний:
    //! - 0 - Открыт чек продажи
    //! - 1 - Открыт чек покупки
    //! - 2 - Открыт чек возврата продажи
    //! - 3 - Открыт чек возврата покупки

    //! @par Методы доступа:
    //!   #Get_ECRMode8Status
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(int ECRMode8Status)
    //!
    //! @brief Возвращает значение свойства #ECRMode8Status
    //! @return ECRMode8Status
    //! @relates ECRMode8Status
    //!
    int Get_ECRMode8Status() const;

    //!
    //! @brief Описание режима ККМ
    //!
    //! Свойство содержит строку с описанием на русском языке режима ККМ
    //!
    //! @par Методы доступа:
    //!   #Get_ECRModeDescription
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(std::string ECRModeDescription)
    //!
    //! @brief Возвращает значение свойства #ECRModeDescription
    //! @return ECRModeDescription
    //! @relates ECRModeDescription
    //!
    std::string Get_ECRModeDescription() const;
    std::string Get_ECROutput() const;

    //!
    //! @brief Дата ПО ККМ
    //!
    //! Дата внутреннего программного обеспечения ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_ECRSoftDate
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    DOXYGEN_PROPERTY(std::time_t ECRSoftDate)
    //!
    //! @brief Возвращает значение свойства #ECRSoftDate
    //! @return ECRSoftDate
    //! @relates ECRSoftDate
    std::time_t Get_ECRSoftDate() const;

    //!
    //! @brief Версия ПО ККТ
    //!
    //! Версия внутреннего программного обеспечения ККМ.
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    //! @par Методы доступа:
    //!   #Get_ECRSoftVersion
    //!
    DOXYGEN_PROPERTY(std::string ECRSoftVersion)
    //!
    //! @brief Возвращает значение свойства #ECRSoftVersion
    //! @return ECRSoftVersion
    //! @relates ECRSoftVersion
    //!
    std::string Get_ECRSoftVersion() const;

    int Get_EmergencyStopCode() const;
    std::string Get_EmergencyStopCodeDescription() const;

    //!
    //! @brief Название поля
    //!
    //! Наименование поля внутренней таблицы настроек ККМ – строка символов в кодировке WIN1251.
    //!
    //! @par Модифицируется методами:
    //!   #GetFieldStruct
    //!
    //! @par Методы доступа:
    //!   #Get_FieldName
    //!
    DOXYGEN_PROPERTY(std::string FieldName)
    //!
    //! @brief Возвращает значение свойства #FieldName
    //! @return FieldName
    //! @relates FieldName
    //!
    std::string Get_FieldName() const;

    //!
    //! @brief Номер поля
    //!
    //! Номер поля (количество полей) внутренней таблицы настроек ККМ.
    //!
    //! Диапазон значений: 1…255.
    //!
    //! @par Модифицируется методами:
    //!   #GetTableStruct
    //!
    //! @par Используется методами:
    //! #GetFieldStruct, #ReadTable, #WriteTable
    //!
    //! @par Методы доступа:
    //!   #Get_FieldNumber, #Set_FieldNumber
    //!
    DOXYGEN_PROPERTY(int FieldNumber)
    //!
    //! @brief Возвращает значение свойства #FieldNumber
    //! @return FieldNumber
    //! @relates FieldNumber
    //!
    int Get_FieldNumber() const;
    //!
    //! @brief Устанавливает значение свойства #FieldNumber
    //! @param value Новое значение FieldNumber
    //! @relates FieldNumber
    //!
    void Set_FieldNumber(int value);

    //!
    //! @brief Размер поля
    //!
    //! Размер поля внутренней таблицы настроек ККМ в байтах.
    //!
    //! Диапазон значений: 1…255.
    //!
    //! @par Модифицируется методами:
    //!   #GetFieldStruct
    //!
    //! @par Методы доступа:
    //!   #Get_FieldSize
    //!
    DOXYGEN_PROPERTY(int FieldSize)
    //!
    //! @brief Возвращает значение свойства #FieldSize
    //! @return FieldSize
    //! @relates FieldSize
    //!
    int Get_FieldSize() const;

    //!
    //! @brief Тип поля
    //!
    //! Признак типа поля внутренней таблицы настроек ККМ. \n
    //! Если значение свойства TRUE, то тип
    //! поля – CHAR (строка), если FALSE, то тип поля – BIN (числовое).
    //!
    //! @par Модифицируется методами:
    //!   #GetFieldStruct
    //!
    //! @par Методы доступа:
    //!   #Get_FieldType
    //!
    DOXYGEN_PROPERTY(bool FieldType)
    //!
    //! @brief Возвращает значение свойства #FieldType
    //! @return FieldType
    //! @relates FieldType
    //!
    bool Get_FieldType() const;

    //!
    //! @brief Номер первой линии
    //!
    //! При печати на чеке изображения в свойстве указывается номер строки пикселей данного
    //! изображения, загружённого в ККТ. Эта строка будет первой в диапазоне печатаемых на чеке
    //! строк пикселей хранимого в принтере изображения.
    //!
    //! @par Методы доступа:
    //!   #Get_FirstLineNumber, #Set_FirstLineNumber
    //!
    //! @par Используется методами:
    //! Draw, DrawEx
    //!
    //!  @par Модифицируется методами:
    //! #LoadImage
    //!
    DOXYGEN_PROPERTY(int FirstLineNumber)
    //!
    //! @brief Возвращает значение свойства #FirstLineNumber
    //! @return FirstLineNumber
    //! @relates FirstLineNumber
    //!
    int Get_FirstLineNumber() const;
    //!
    //! @brief Устанавливает значение свойства #FirstLineNumber
    //! @param value Новое значение FirstLineNumber
    //! @relates FirstLineNumber
    //!
    void Set_FirstLineNumber(int value);

    //!
    //! @brief Дата первой смены
    //!
    //! Дата первой закрытой смены при запросе диапазона дат и смен или стартовая дата при вызове
    //! отчетов ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_FirstSessionDate, #Set_FirstSessionDate
    //!
    //! @par Используется методами:
    //! #FiscalReportForDatesRange, #FiscalReportForSessionRange.
    //!
    //!  @par Модифицируется методами:
    //! #GetRangeDatesAndSessions, #FiscalReportForDatesRange, #FiscalReportForSessionRange.
    //!
    DOXYGEN_PROPERTY(std::time_t FirstSessionDate)
    //!
    //! @brief Возвращает значение свойства #FirstSessionDate
    //! @return FirstSessionDate
    //! @relates FirstSessionDate
    //!
    std::time_t Get_FirstSessionDate() const;
    //!
    //! @brief Устанавливает значение свойства #FirstSessionDate
    //! @param value Новое значение FirstSessionDate
    //! @relates FirstSessionDate
    //!
    void Set_FirstSessionDate(std::time_t value);

    //!
    //! @brief Номер первой смены
    //!
    //! Номер первой закрытой смены при запросе диапазона дат и смен или стартовая смена при
    //! вызове отчетов ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_FirstSessionNumber, #Set_FirstSessionNumber
    //!
    //! @par Используется методами:
    //! #FiscalReportForSessionRange.
    //!
    //!  @par Модифицируется методами:
    //! #GetRangeDatesAndSessions, #FiscalReportForDatesRange, #FiscalReportForSessionRange.
    //!
    DOXYGEN_PROPERTY(int FirstSessionNumber)
    //!
    //! @brief Возвращает значение свойства #FirstSessionNumber
    //! @return FirstSessionNumber
    //! @relates FirstSessionNumber
    //!
    int Get_FirstSessionNumber() const;
    //!
    //! @brief Устанавливает значение свойства #FirstSessionNumber
    //! @param value Новое значение FirstSessionNumber
    //! @relates FirstSessionNumber
    //!
    void Set_FirstSessionNumber(int value);

    //!
    //! @brief Сборка ФП
    //!
    //! Диапазон значений: 0…65535.
    //!
    //! Номер сборки ПО ФП ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_FMBuild
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(int FMBuild)
    //!
    //! @brief Возвращает значение свойства #FMBuild
    //! @return FMBuild
    //! @relates FMBuild
    //!
    int Get_FMBuild() const;

    //!
    //! @brief Флаги ФП
    //!
    //! Признаки (флаги) ФП ККМ. Раскладывается в следующее битовое поле:
    //!
    //! № бита | значение | соответствующее свойство
    //! ------ | -------- | --------------------------------------------------------------
    //! 0 | признак наличия ФП 1 | #FM1IsPresent
    //! 1 | признак наличия ФП 2 | #FM2IsPresent
    //! 2 | признак введённой лицензии | #LicenseIsPresent
    //! 3 | признак переполнения ФП | #FMOverflow
    //! 4 | признак пониженного напряжения на батарейке ФП | #IsBatteryLow
    //! 5 | признак испорченности последней записи ФП | #IsLastFMRecordCorrupted
    //! 6 | признак того, что последняя запись в ФП испорчена | #IsFMSessionOpen
    //! 7 | признак того, что 24 часа в ФП истекли | #IsFM24HoursOver
    //!
    //! @par Методы доступа:
    //!   #Get_FMFlags
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    DOXYGEN_PROPERTY(int FMFlags)
    //!
    //! @brief Возвращает значение свойства #FMFlags
    //! @return FMFlags
    //! @relates FMFlags
    //!
    int Get_FMFlags() const;

    //!
    //! @brief ФП1 есть
    //!
    //! Признак наличия в ККМ ФП1. \n
    //! FALSE – ФП1 нет, TRUE – ФП1 есть.
    //!
    //! @par Методы доступа:
    //!   #Get_FM1IsPresent
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool FM1IsPresent)
    //!
    //! @brief Возвращает значение свойства #FM1IsPresent
    //! @return FM1IsPresent
    //! @relates FM1IsPresent
    //!
    bool Get_FM1IsPresent() const;

    //!
    //! @brief ФП2 есть
    //!
    //! Признак наличия в ККМ ФП2.\n
    //! FALSE – ФП2 нет, TRUE – ФП2 есть.
    //!
    //! @par Методы доступа:
    //!   #Get_FM2IsPresent
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool FM2IsPresent)
    //!
    //! @brief Возвращает значение свойства #FM2IsPresent
    //! @return FM2IsPresent
    //! @relates FM2IsPresent
    //!
    bool Get_FM2IsPresent() const;

    //!
    //! @brief Лицензия есть
    //!
    //! Признак наличия в ККМ лицензии.\n
    //! FALSE – лицензия не введена, TRUE – лицензия введена.
    //!
    //! @par Методы доступа:
    //!   #Get_LicenseIsPresent
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool LicenseIsPresent)
    //!
    //! @brief Возвращает значение свойства #LicenseIsPresent
    //! @return LicenseIsPresent
    //! @relates LicenseIsPresent
    //!
    bool Get_LicenseIsPresent() const;

    //!
    //! @brief Переполнение ФП
    //!
    //! Признак переполнения ФП.\n
    //! FALSE – переполнения ФП нет, TRUE – переполнение ФП.
    //!
    //! @par Методы доступа:
    //!   #Get_FMOverflow
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool FMOverflow)
    //!
    //! @brief Возвращает значение свойства #FMOverflow
    //! @return FMOverflow
    //! @relates FMOverflow
    //!
    bool Get_FMOverflow() const;

    //!
    //! @brief Низкое напряжение на батарее
    //!
    //! Признак напряжения на батарее. TRUE – напряжение пониженное; FALSE – напряжение нормальное.
    //!
    //! @par Методы доступа:
    //!   #Get_IsBatteryLow
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsBatteryLow)
    //!
    //! @brief Возвращает значение свойства #IsBatteryLow
    //! @return IsBatteryLow
    //! @relates IsBatteryLow
    //!
    bool Get_IsBatteryLow() const;

    //!
    //! @brief Последняя запись в ФП испорчена
    //!
    //! Признак того, что последняя запись в ФП испорчена.\n
    //! TRUE – последняя запись в ФП испорчена; FALSE – последняя запись в ФП не испорчена.
    //!
    //! @par Методы доступа:
    //!   #Get_IsLastFMRecordCorrupted
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsLastFMRecordCorrupted)
    //!
    //! @brief Возвращает значение свойства #IsLastFMRecordCorrupted
    //! @return IsLastFMRecordCorrupted
    //! @relates IsLastFMRecordCorrupted
    //!
    bool Get_IsLastFMRecordCorrupted() const;

    //!
    //! @brief Смена в ФП открыта
    //!
    //! Признак того, что смена в ФП открыта.\n
    //! TRUE – смена в ФП открыта; FALSE – смена в ФП закрыта.
    //!
    //! @par Методы доступа:
    //!   #Get_IsFMSessionOpen
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsFMSessionOpen)
    //!
    //! @brief Возвращает значение свойства #IsFMSessionOpen
    //! @return IsFMSessionOpen
    //! @relates IsFMSessionOpen
    //!
    bool Get_IsFMSessionOpen() const;

    //!
    //! @brief 24 часа в ФП кончились
    //!
    //! Признак того, что 24 часа в ФП истекли.\n
    //! TRUE – 24 часа в ФП истекли; FALSE – 24 часа в ФП не истекли.
    //!
    //! @par Методы доступа:
    //!   #Get_IsFM24HoursOver
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(bool IsFM24HoursOver)
    //!
    //! @brief Возвращает значение свойства #IsFM24HoursOver
    //! @return IsFM24HoursOver
    //! @relates IsFM24HoursOver
    //!
    bool Get_IsFM24HoursOver() const;

    //!
    //! @brief Дата ПО ФП
    //!
    //! Дата внутреннего программного обеспечения ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_FMSoftDate
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(std::time_t FMSoftDate)
    //!
    //! @brief Возвращает значение свойства #FMSoftDate
    //! @return FMSoftDate
    //! @relates FMSoftDate
    //!
    std::time_t Get_FMSoftDate() const;

    //!
    //! @brief Версия ПО ФП
    //!
    //! Версия внутреннего программного обеспечения ФП ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_FMSoftVersion
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(std::string FMSoftVersion)
    //!
    //! @brief Возвращает значение свойства #FMSoftVersion
    //! @return FMSoftVersion
    //! @relates FMSoftVersion
    //!
    std::string Get_FMSoftVersion() const;

    //!
    //! @brief Количество свободных записей в ФП
    //!
    //! Количество свободных записей в ФП.
    //!
    //! @par Методы доступа:
    //!   #Get_FreeRecordInFM
    //!
    //!  @par Модифицируется методами:
    //! #GetECRStatus
    //!
    DOXYGEN_PROPERTY(int FreeRecordInFM)
    //!
    //! @brief Возвращает значение свойства #FreeRecordInFM
    //! @return FreeRecordInFM
    //! @relates FreeRecordInFM
    //!
    int Get_FreeRecordInFM() const;

    //!
    //! @brief Количество оставшихся перерегистраций
    //!
    //! Количество оставшихся перерегистраций (фискализаций), которые можно произвести на ККМ.
    //!
    //! Диапазон значений: 0..16.
    //!
    //! @par Модифицируется методами:
    //!   #FNGetExpirationTime, #GetECRStatus, #Fiscalization.
    //!
    //! @par Методы доступа:
    //!   #Get_FreeRegistration
    //!
    DOXYGEN_PROPERTY(int FreeRegistration)
    //!
    //! @brief Возвращает значение свойства #FreeRegistration
    //! @return FreeRegistration
    //! @relates FreeRegistration
    //!
    int Get_FreeRegistration() const;

    //!
    //! @brief ИНН
    //!
    //! Текстовый параметр, содержащий идентификационный номер налогоплательщика.
    //!
    //! Допустимая длина строки: до 12 символов.
    //! Допустимы только символы «0», «1», «2», «3», «4», «5», «6», «7», «8» и «9».
    //! Если строка короче 12 символов, то она дополняется символами «0» слева до 12 символов.
    //!
    //! @par Методы доступа:
    //!   #Get_INN, #Set_INN
    //!
    //! @par Используется методами:
    //! #FNBuildRegistrationReport, #Fiscalization
    //!
    //! @par Модифицируется методами:
    //! #GetFiscalizationParameters, #GetECRStatus, #FNFindDocument, #FNGetFiscalizationResult.
    //!
    DOXYGEN_PROPERTY(std::string INN)
    //!
    //! @brief Возвращает значение свойства #INN
    //! @return INN
    //! @relates INN
    //!
    std::string Get_INN() const;
    //!
    //! @brief Устанавливает значение свойства #INN
    //! @param value Новое значение INN
    //! @relates INN
    //!
    void Set_INN(const std::string& value);

    bool Get_IsCheckClosed() const;
    bool Get_IsCheckMadeOut() const;
    int Get_KPKNumber() const;
    void Set_KPKNumber(int value);

    //!
    //! @brief Номер последней линии
    //!
    //! При печати на чеке изображения в свойстве указывается номер строки пикселей данного
    //! изображения, загруженного в ККТ. Эта строка будет последней в диапазоне печатаемых на чеке
    //! строк пикселей хранимого в принтере графического изображения.
    //!
    //! @par Методы доступа:
    //!   #Get_LastLineNumber, #Set_LastLineNumber
    //!
    //! @par Используется методами:
    //! Draw, DrawEx
    //!
    //!  @par Модифицируется методами:
    //! #LoadImage
    //!
    DOXYGEN_PROPERTY(int LastLineNumber)
    //!
    //! @brief Возвращает значение свойства #LastLineNumber
    //! @return LastLineNumber
    //! @relates LastLineNumber
    //!
    int Get_LastLineNumber() const;
    //!
    //! @brief Устанавливает значение свойства #LastLineNumber
    //! @param value Новое значение LastLineNumber
    //! @relates LastLineNumber
    //!
    void Set_LastLineNumber(int value);

    //!
    //! @brief Дата последней смены
    //!
    //! Дата последней закрытой смены при запросе диапазона дат и смен или завершающая дата при
    //! вызове отчетов ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_LastSessionDate, #Set_LastSessionDate
    //!
    //! @par Используется методами:
    //! #FiscalReportForDatesRange
    //!
    //!  @par Модифицируется методами:
    //! #GetRangeDatesAndSessions, #FiscalReportForDatesRange, #FiscalReportForSessionRange.
    //!
    DOXYGEN_PROPERTY(std::time_t LastSessionDate)
    //!
    //! @brief Возвращает значение свойства #LastSessionDate
    //! @return LastSessionDate
    //! @relates LastSessionDate
    //!
    std::time_t Get_LastSessionDate() const;
    //!
    //! @brief Устанавливает значение свойства #LastSessionDate
    //! @param value Новое значение LastSessionDate
    //! @relates LastSessionDate
    //!
    void Set_LastSessionDate(std::time_t value);

    //!
    //! @brief Номер последней смены
    //!
    //! Номер последней закрытой смены при запросе диапазона дат и смен или завершающая смена при
    //! вызове отчетов ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_LastSessionNumber, #Set_LastSessionNumber
    //!
    //! @par Используется методами:
    //! #FiscalReportForSessionRange.
    //!
    //!  @par Модифицируется методами:
    //! #GetRangeDatesAndSessions, #FiscalReportForDatesRange, #FiscalReportForSessionRange.
    //!
    DOXYGEN_PROPERTY(int LastSessionNumber)
    //!
    //! @brief Возвращает значение свойства #LastSessionNumber
    //! @return LastSessionNumber
    //! @relates LastSessionNumber
    //!
    int Get_LastSessionNumber() const;
    //!
    //! @brief Устанавливает значение свойства #LastSessionNumber
    //! @param value Новое значение LastSessionNumber
    //! @relates LastSessionNumber
    //!
    void Set_LastSessionNumber(int value);

    //!
    //! @brief Лицензия
    //!
    //! Текстовый параметр, содержащий лицензию.
    //!
    //! Допустимая длина строки: до 5 символов.
    //! Допустимы только символы «0», «1», «2», «3», «4», «5», «6», «7», «8» и «9».
    //!
    //! @par Методы доступа:
    //!   #Get_License, #Set_License
    //!
    //! @par Используется методами:
    //! #WriteLicense.
    //!
    //!  @par Модифицируется методами:
    //! #ReadLicense.
    //!
    DOXYGEN_PROPERTY(std::string License)
    //!
    //! @brief Возвращает значение свойства #License
    //! @return License
    //! @relates License
    //!
    std::string Get_License() const;
    //!
    //! @brief Устанавливает значение свойства #License
    //! @param value Новое значение License
    //! @relates License
    //!
    void Set_License(const std::string& value);
    //!
    //! @brief Графическая информация
    //!
    //! Строка символов, в которую были преобразованы точки некоторой строки графического
    //! изображения, записываемого в ККМ (когда используется методами #LoadLineData, #LoadLineDataEx
    //! и #PrintLine), и строка символов, в которую были преобразованы все точки графического
    //! изображения, записываемого в ККМ (в случае метода #WideLoadLineData). Длина строки: для
    //! методов #LoadLineData и #LoadLineDataEx – 40 символов (каждый символ описывает 8 пикселей);
    //! для метода #WideLoadLineData – размер зависит от размера изображения, но не превышает 48
    //! кбайт. Если соответствующий бит «0» – точки нет, если же бит «1» – точка есть.
    //!
    //! @par Методы доступа:
    //!   #Get_LineData, #Set_LineData
    //!
    //! @par Используется методами:
    //! # #LoadLineData, #LoadLineDataEx , #PrintLine и #WideLoadLineData.
    //!
    DOXYGEN_PROPERTY(std::string LineData)
    //!
    //! @brief Возвращает значение свойства #LineData
    //! @return LineData
    //! @relates LineData
    std::string Get_LineData() const;
    //!
    //! @brief Устанавливает значение свойства #LineData
    //! @param value Новое значение LineData
    //! @relates LineData
    //!
    void Set_LineData(const std::string& value);

    //!
    //! @brief Номер линии
    //!
    //! В случае, когда используется методами #LoadLineData и #LoadLineDataEx, свойство содержит
    //! номер линии при записи графического изображения в ККМ. В случае, если используется методом
    //! #WideLoadLineData, свойство содержит адрес строки памяти ККТ, с которой начнётся запись
    //! изображения. В том случае, если используется методами #PrintBarcodeGraph или
    //! #PrintBarcodeLine, свойство задает высоту штрих-кода в точках. Диапазон значений: для метода
    //! #LoadLineData 0..199, в остальных случаях 0..1199.
    //!
    //! @par Методы доступа:
    //!   #Get_LineNumber , #Set_LineNumber
    //!
    //! @par Используется методами:
    //! #LoadLineData, #LoadLineDataEx, #WideLoadLineData, #PrintBarcodeGraph, #PrintBarcodeLine
    //!
    //!
    DOXYGEN_PROPERTY(int LineNumber)
    //!
    //! @brief Возвращает значение свойства #LineNumber
    //! @return LineNumber
    //! @relates LineNumber
    //!
    int Get_LineNumber() const;
    //!
    //! @brief Устанавливает значение свойства #LineNumber
    //! @param value Новое значение LineNumber
    //! @relates LineNumber
    //!
    void Set_LineNumber(int value);

    //!
    //! @brief Номер в зале
    //!
    //! Диапазон значений: 1..99.
    //!
    //! Логический номер ККМ в торговом зале (внутренняя таблица ККМ номер 1, ряд 1, поле 1).
    //!
    //! @par Методы доступа:
    //!   #Get_LogicalNumber
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    DOXYGEN_PROPERTY(int LogicalNumber)
    //!
    //! @brief Возвращает значение свойства #LogicalNumber
    //! @return LogicalNumber
    //! @relates LogicalNumber
    int Get_LogicalNumber() const;

    //!
    //! @brief Максимальное значение поля
    //!
    //! Максимальное значение поля внутренней таблицы настроек ККМ, если данное поле типа BIN
    //! (числовое) (см. свойство #FieldType).
    //!
    //! @par Методы доступа:
    //!   #Get_MAXValueOfField
    //!
    //! @par Модифицируется методами:
    //!   #GetFieldStruct
    //!
    DOXYGEN_PROPERTY(int MAXValueOfField)
    //!
    //! @brief Возвращает значение свойства #MAXValueOfField
    //! @return MAXValueOfField
    //! @relates MAXValueOfField
    int Get_MAXValueOfField() const;

    //!
    //! @brief Минимальное значение поля
    //!
    //! Минимальное значение поля внутренней таблицы настроек ККМ, если данное поле типа BIN
    //! (числовое) (см. свойство #FieldType).
    //!
    //! @par Методы доступа:
    //!   #Get_MINValueOfField
    //!
    //! @par Модифицируется методами:
    //!   #GetFieldStruct
    //!
    DOXYGEN_PROPERTY(int MINValueOfField)
    //!
    //! @brief Возвращает значение свойства #MINValueOfField
    //! @return MINValueOfField
    //! @relates MINValueOfField
    int Get_MINValueOfField() const;

    bool Get_Motor() const;

    //!
    //! @brief Название денежного регистра
    //!
    //! Наименования денежных регистров перечислены в «Инструкции по эксплуатации»/«Руководство
    //! оператора».
    //!
    //! @par Методы доступа:
    //!   #Get_NameCashReg
    //!
    //! @par Модифицируется методами:
    //!   #GetCashReg, #GetCashRegEx
    //!
    DOXYGEN_PROPERTY(std::string NameCashReg)
    //!
    //! @brief Возвращает значение свойства #NameCashReg
    //! @return NameCashReg
    //! @relates NameCashReg
    //!
    std::string Get_NameCashReg() const;

    //!
    //! @brief Название операционного регистра
    //!
    //! @par Методы доступа:
    //!   #Get_NameOperationReg
    //!
    //! @par Модифицируется методами:
    //!   #GetOperationReg
    //!
    DOXYGEN_PROPERTY(std::string NameOperationReg)
    //!
    //! @brief Возвращает значение свойства #NameOperationReg
    //! @return NameOperationReg
    //! @relates NameOperationReg
    //!
    std::string Get_NameOperationReg() const;

    //!
    //! @brief Новый пароль НИ
    //!
    //! Числовой параметр, содержащий новый пароль налогового инспектора.
    //!
    //! Допустимая длина: до 8 разрядов.
    //!
    //! @par Методы доступа:
    //!   #Get_NewPasswordTI, #Set_NewPasswordTI
    //!
    //! @par Используется методами:
    //!   #Fiscalization
    //!
    //! @par Модифицируется методами:
    //!   #GetFiscalizationParameters
    //!
    DOXYGEN_PROPERTY(int NewPasswordTI)
    //!
    //! @brief Возвращает значение свойства #NewPasswordTI
    //! @return NewPasswordTI
    //! @relates NewPasswordTI
    //!
    uint32_t Get_NewPasswordTI() const;
    //!
    //! @brief Устанавливает значение свойства #NewPasswordTI
    //! @param value Новое значение NewPasswordTI
    //! @relates NewPasswordTI
    //!
    void Set_NewPasswordTI(uint32_t value);

    //!
    //! @brief Сквозной номер документа
    //!
    //! Диапазон значений: 0..9999.
    //!
    //! Сквозной номер последнего документа ККМ.
    //!
    //! @par Методы доступа:
    //!   #Get_OpenDocumentNumber
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #PrintDocumentTitle, #CashIncome,#CashOutcome
    //!
    DOXYGEN_PROPERTY(int OpenDocumentNumber)
    //!
    //! @brief Возвращает значение свойства #OpenDocumentNumber
    //! @return OpenDocumentNumber
    //! @relates OpenDocumentNumber
    int Get_OpenDocumentNumber() const;

    //!
    //! @brief Порядковый номер оператора, чей пароль был введен
    //!
    //! Диапазон значений: 1..30.
    //!
    //! @par Модифицируется:
    //!   всеми методами, в которых используется пароль оператора.
    //!
    //! @par Методы доступа:
    //!   #Get_OperatorNumber
    //!
    DOXYGEN_PROPERTY(int OperatorNumber)
    //!
    //! @brief Возвращает значение свойства #OperatorNumber
    //! @return OperatorNumber
    //! @relates OperatorNumber
    //!
    int Get_OperatorNumber() const;

    //!
    //! @brief Пароль для исполнения метода драйвера
    //!
    //! Допустимая длина: до 8 разрядов.
    //!
    //! @par Методы доступа:
    //!   #Get_Password, #Set_Password
    //!
    DOXYGEN_PROPERTY(uint32_t Password)
    //!
    //! @brief Возвращает значение свойства #Password
    //! @return Password
    //! @relates Password
    //!
    uint32_t Get_Password() const;
    //!
    //! @brief Устанавливает значение свойства #Password
    //! @param value Новое значение Password
    //! @relates Password
    //!
    void Set_Password(uint32_t value);

    bool Get_Pistol() const;

    //!
    //! @brief Номер порта
    //!
    //! Порт ККМ, через который она подключена к ПК или какому-либо другому устройству.
    //!
    //! Диапазон значений: 0..255 (0 – порт 1, 1 – порт 2, 2 – порт 3 и т.д.).
    //!
    //! @par Модифицируется:
    //! #GetECRStatus
    //!
    //! @par Используется методами:
    //! #SetExchangeParam,#GetExchangeParam
    //!
    //! @par Методы доступа:
    //!   #Get_PortNumber, #Set_PortNumber
    //!
    DOXYGEN_PROPERTY(int PortNumber)
    //!
    //! @brief Возвращает значение свойства #PortNumber
    //! @return PortNumber
    //! @relates PortNumber
    //!
    int Get_PortNumber() const;
    //!
    //! @brief Устанавливает значение свойства #PortNumber
    //! @param value Новое значение PortNumber
    //! @relates PortNumber
    //!
    void Set_PortNumber(int value);

    //!
    //! @brief Цена
    //!
    //! Цена за единицу товара.
    //!
    //! @par Используется методами:
    //! #Buy, #ReturnBuy, #ReturnSale, #Sale, #Storno, #FNOperation
    //!
    //! @par Методы доступа:
    //!   #Get_Price, #Set_Price
    //!
    DOXYGEN_PROPERTY(int64_t Price)
    //!
    //! @brief Возвращает значение свойства #Price
    //! @return Price
    //! @relates Price
    //!
    int64_t Get_Price() const;
    //!
    //! @brief Устанавливает значение свойства #Price
    //! @param value Новое значение Price
    //! @relates Price
    //!
    void Set_Price(int64_t value);

    //!
    //! @brief Количество
    //!
    //! Количество товара.
    //!
    //! Диапазон значений: от 0.001 до 9999999.999,то есть округляется до трёх знаков после запятой.
    //!
    //! @par Используется методами:
    //! #Buy, #ReturnBuy, #ReturnSale, #Sale, #Storno, #FNOperation, #FNCheckItemBarcode2
    //!
    //! @par Методы доступа:
    //!   #Get_Quantity, #Set_Quantity
    //!
    DOXYGEN_PROPERTY(double Quantity)
    //!
    //! @brief Возвращает значение свойства #Quantity
    //! @return Quantity
    //! @relates Quantity
    //!
    double Get_Quantity() const;
    //!
    //! @brief Устанавливает значение свойства #Quantity
    //! @param value Новое значение Quantity
    //! @relates Quantity
    //!
    void Set_Quantity(double value);

    //!
    //! @brief Количество операций
    //!
    //! Количество выполненных операций регистрации (продаж, покупок, возвратов продаж или
    //! возвратов покупок) в чеке.
    //!
    //! Диапазон значений: от 1 до максимально разрешённого количества операций регистраций в чеке
    //! для данной ККМ и версии ПО.
    //!
    //! @par Модифицируется методом:
    //! #GetShortECRStatus.
    //!
    //! @par Методы доступа:
    //!   #Get_QuantityOfOperations
    //!
    DOXYGEN_PROPERTY(int QuantityOfOperations)
    //!
    //! @brief Возвращает значение свойства #QuantityOfOperations
    //! @return QuantityOfOperations
    //! @relates QuantityOfOperations
    //!
    int Get_QuantityOfOperations() const;

    //!
    //! @brief Номер регистра
    //!
    //! Номер регистра в командах работы с денежными или операционными регистрами.
    //!
    //!  Диапазон значений: 0..255.
    //!
    //! @par Используется методами:
    //!   #GetCashReg, #GetCashRegEx
    //!
    //! @par Методы доступа:
    //!   #Get_RegisterNumber, #Set_RegisterNumber
    //!
    DOXYGEN_PROPERTY(int RegisterNumber)
    //!
    //! @brief Возвращает значение свойства #RegisterNumber
    //! @return RegisterNumber
    //! @relates RegisterNumber
    //!
    int Get_RegisterNumber() const;
    //!
    //! @brief Устанавливает значение свойства #RegisterNumber
    //! @param value Новое значение RegisterNumber
    //! @relates RegisterNumber
    //!
    void Set_RegisterNumber(int value);

    //!
    //! @brief Количество перерегистраций
    //!
    //! Количество перерегистраций (фискализаций), проведенных на ККМ.
    //!
    //!  Диапазон значений: 0..16.
    //!
    //! @par Используется методами:
    //!   #FNGetExpirationTime, #GetFiscalizationParameters, #FNGetFiscalizationResultByNumber.
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #Fiscalization, #FNGetExpirationTime.
    //!
    //! @par Методы доступа:
    //!   #Get_RegistrationNumber, #Set_RegistrationNumber
    //!
    DOXYGEN_PROPERTY(int RegistrationNumber)
    //!
    //! @brief Возвращает значение свойства #RegistrationNumber
    //! @return RegistrationNumber
    //! @relates RegistrationNumber
    //!
    int Get_RegistrationNumber() const;
    //!
    //! @brief Устанавливает значение свойства #RegistrationNumber
    //! @param value Новое значение RegistrationNumber
    //! @relates RegistrationNumber
    //!
    void Set_RegistrationNumber(int value);

    //!
    //! @brief Тип отчёта
    //!
    //! Признак типа отчета: TRUE – полный, FALSE – короткий..
    //!
    //! @par Используется методами:
    //!   #FiscalReportForDatesRange, #FiscalReportForSessionRange
    //!
    //! @par Методы доступа:
    //!   #Get_ReportType, #Set_ReportType
    //!
    DOXYGEN_PROPERTY(bool ReportType)
    //!
    //! @brief Возвращает значение свойства #ReportType
    //! @return ReportType
    //! @relates ReportType
    //!
    bool Get_ReportType() const;
    //!
    //! @brief Устанавливает значение свойства #ReportType
    //! @param value Новое значение ReportType
    //! @relates ReportType
    //!
    void Set_ReportType(bool value);

    //!
    //! @brief Код ошибки
    //!
    //! Свойство содержит код ошибки, возвращаемый ККМ в результате выполнения последней операции.
    //! Если ошибки не произошло, то значение данного свойства устанавливается в 0 (Ошибок нет).
    //!
    //! @par Модифицируется:
    //!   всеми методами.
    //!
    //! @par Методы доступа:
    //!   #Get_ResultCode
    //!
    DOXYGEN_PROPERTY(int ResultCode)
    //!
    //! @brief Возвращает значение свойства #ResultCode
    //! @return ResultCode
    //! @relates ResultCode
    //!
    int Get_ResultCode() const;

    //!
    //! @brief Описание кода ошибки
    //!
    //! Свойство содержит строку с описанием на русском языке кода ошибки, возникшей в результате
    //! последней операции (см. столбец «Описание ошибки» в разделе ResultCode).
    //!
    //! @par Модифицируется:
    //!   всеми методами.
    //!
    //! @par Методы доступа:
    //!   #Get_ResultCodeDescription
    //!
    DOXYGEN_PROPERTY(std::string ResultCodeDescription)
    //!
    //! @brief Возвращает значение свойства #ResultCodeDescription
    //! @return ResultCodeDescription
    //! @relates ResultCodeDescription
    //!
    std::string Get_ResultCodeDescription() const;

    int Get_RKNumber() const;
    void Set_RKNumber(int value);

    //!
    //! @brief РНМ
    //!
    //! Текстовый параметр (строка), содержащий регистрационный номер машины.\n
    //! Максимальная допустимая длина строки:
    //! - 10 символов (5 байт) при использовании методами
    //!  #Fiscalization и #GetFiscalizationParameters и
    //! - 14 (7 байт) при использовании методами
    //! #FiscalizationWithLongRNM и #GetLongSerialNumberAndLongRNM.\n
    //! Разрешены только символы «0», «1», «2», «3», «4», «5», «6», «7», «8» и «9»
    //! (WIN1251-коды цифр).\n
    //! Если строка короче 10/14 символов, то она дополняется символами «0» слева до 10/14 символов.
    //!
    //! Диапазон значений: 1..99.
    //!
    //! @par Методы доступа:
    //!   #Get_RNM, #Set_RNM
    //!
    //! @par Используется методами
    //!   #Fiscalization
    //!
    //! @par Модифицируется методами:
    //!   #GetFiscalizationParameters
    //!
    DOXYGEN_PROPERTY(std::string RNM)
    //!
    //! @brief Возвращает значение свойства #RNM
    //! @return RNM
    //! @relates RNM
    //!
    std::string Get_RNM() const;
    //!
    //! @brief Устанавливает значение свойства #RNM
    //! @param value Новое значение RNM
    //! @relates RNM
    //!
    void Set_RNM(const std::string& value);

    bool Get_RoughValve() const;

    //!
    //! @brief Номер ряда
    //!
    //! Номер ряда (количество рядов) внутренней таблицы настроек ККМ
    //!
    //! Диапазон значений: 1..255.
    //!
    //! @par Методы доступа:
    //!   #Get_RowNumber, #Set_RowNumber
    //!
    //! @par Используется методами
    //!   #WriteTable, #ReadTable
    //!
    //! @par Модифицируется методами:
    //!   #GetTableStruct
    //!
    DOXYGEN_PROPERTY(int RowNumber)
    //!
    //! @brief Возвращает значение свойства #RowNumber
    //! @return RowNumber
    //! @relates RowNumber
    //!
    int Get_RowNumber() const;
    //!
    //! @brief Устанавливает значение свойства #RowNumber
    //! @param value Новое значение RowNumber
    //! @relates RowNumber
    //!
    void Set_RowNumber(int value);

    //!
    //! @brief Период прогона
    //!
    //! Период вывода тестового чека в минутах в режиме тестового прогона.
    //!
    //! Диапазон значений: 1..99.
    //!
    //! @par Методы доступа:
    //!   #Get_RunningPeriod, #Set_RunningPeriod
    //!
    //! @par Используется методами
    //!   #Test
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #FNGetSerial, #FNGetStatus
    //!
    DOXYGEN_PROPERTY(int RunningPeriod)
    //!
    //! @brief Возвращает значение свойства #RunningPeriod
    //! @return RunningPeriod
    //! @relates RunningPeriod
    //!
    int Get_RunningPeriod() const;
    //!
    //! @brief Устанавливает значение свойства #RunningPeriod
    //! @param value Новое значение RunningPeriod
    //! @relates RunningPeriod
    //!
    void Set_RunningPeriod(int value);

    //!
    //! @brief Заводской номер
    //!
    //! Текстовый параметр (строка), содержащий серийный номер ККМ.
    //!
    //! Диапазон значений: количество символов в строке не должно превышать 8 (5 байт).\n
    //! Разрешены только символы «0», «1», «2», «3», «4», «5», «6», «7», «8» и «9» (WIN1251-коды
    //! цифр).\n
    //! Если номер на ККМ не введен, то свойство содержит строку «не введен».
    //!
    //! @par Методы доступа:
    //!   #Get_SerialNumber, #Set_SerialNumber
    //!
    //! @par Используется методами
    //!   #SetSerialNumber
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #FNGetSerial, #FNGetStatus, #ReadSerialNumber
    //!
    DOXYGEN_PROPERTY(std::string SerialNumber)
    //!
    //! @brief Возвращает значение свойства #SerialNumber
    //! @return SerialNumber
    //! @relates SerialNumber
    //!
    std::string Get_SerialNumber() const;
    //!
    //! @brief Устанавливает значение свойства #SerialNumber
    //! @param value Новое значение SerialNumber
    //! @relates SerialNumber
    //!
    void Set_SerialNumber(const std::string& value);

    //!
    //! @brief Номер смены
    //!
    //! Номер последней закрытой на ККМ смены.
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_SessionNumber, #Set_SessionNumber
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #FNGetCurrentSessionParams, #GetFiscalizationParameters,
    //! #FNFindDocument, #Fiscalization, #FNOpenSession
    //!
    DOXYGEN_PROPERTY(int SessionNumber)
    //!
    //! @brief Возвращает значение свойства #SessionNumber
    //! @return SessionNumber
    //! @relates SessionNumber
    //!
    int Get_SessionNumber() const;
    //!
    //! @brief Устанавливает значение свойства #SessionNumber
    //! @param value Новое значение SessionNumber
    //! @relates SessionNumber
    //!
    void Set_SessionNumber(int value);

    int Get_SlowingInMilliliters() const;
    void Set_SlowingInMilliliters(int value);
    bool Get_SlowingValve() const;
    int Get_StatusRK() const;
    std::string Get_StatusRKDescription() const;

    //!
    //! @brief Строка для печати
    //!
    //! Строка символов для печати.
    //!
    //! Количество символов, которые будут выведены на печать, зависит от модели ККМ, ширины
    //! строки на ленте, параметров настроек ККМ (например, перенос длинных строк), шрифта, которым
    //! печатается строка.
    //!
    //! @par Методы доступа:
    //!   #Get_StringForPrinting, #Set_StringForPrinting
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #CloseCheckEx, #FNCloseCheckEx, #FNOperation
    //!   #Sale, #ReturnSale, #Buy, #ReturnBuy
    //!   #Charge, #Discount, #Storno, #StornoCharge, #StornoDiscount
    //!   #PrintString, #PrintWideString, #PrintStringWithFont
    //!
    //! @par Модифицируется методами:
    //!   #FNGetDocumentAsString
    //!
    DOXYGEN_PROPERTY(std::string StringForPrinting)
    //!
    //! @brief Возвращает значение свойства #StringForPrinting
    //! @return StringForPrinting
    //! @relates StringForPrinting
    //!
    std::string Get_StringForPrinting() const;
    //!
    //! @brief Устанавливает значение свойства #StringForPrinting
    //! @param value Новое значение StringForPrinting
    //! @relates StringForPrinting
    //!
    void Set_StringForPrinting(const std::string& value);

    //!
    //! @brief Количество строк
    //!
    //! Количество строк, на которое необходимо продвинуть документ.
    //!
    //! Диапазон значений: 1..255 (максимальное количество строк определяется размером буфера
    //! печати, но не превышает 255).
    //!
    //! @par Методы доступа:
    //!   #Get_StringQuantity, #Set_StringQuantity
    //!
    //! @par Используется методами:
    //!   #FeedDocument
    //!
    DOXYGEN_PROPERTY(int StringQuantity)
    //!
    //! @brief Возвращает значение свойства #StringQuantity
    //! @return StringQuantity
    //! @relates StringQuantity
    //!
    int Get_StringQuantity() const;
    //!
    //! @brief Устанавливает значение свойства #StringQuantity
    //! @param value Новое значение StringQuantity
    //! @relates StringQuantity
    //!
    void Set_StringQuantity(int value);

    //!
    //! @brief Сумма1
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #CashIncome, #CashOutcome, #CloseCheckEx
    //!
    //! @par Модифицируется методами:
    //!   #FNGetNonClearableSumm
    //!
    //! @par Методы доступа:
    //!   #Get_Summ1, #Set_Summ1
    //!
    DOXYGEN_PROPERTY(int64_t Summ1)
    //!
    //! @brief Возвращает значение свойства #Summ1
    //! @return Summ1
    //! @relates Summ1
    //!
    int64_t Get_Summ1() const;
    //!
    //! @brief Устанавливает значение свойства #Summ1
    //! @param value Новое значение Summ1
    //! @relates Summ1
    //!
    void Set_Summ1(int64_t value);

    //!
    //! @brief Сумма2
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #CloseCheckEx
    //!
    //! @par Модифицируется методами:
    //!   #FNGetNonClearableSumm
    //!
    //! @par Методы доступа:
    //!   #Get_Summ2, #Set_Summ2
    //!
    DOXYGEN_PROPERTY(int64_t Summ2)
    //!
    //! @brief Возвращает значение свойства #Summ2
    //! @return Summ2
    //! @relates Summ2
    //!
    int64_t Get_Summ2() const;
    //!
    //! @brief Устанавливает значение свойства #Summ2
    //! @param value Новое значение Summ2
    //! @relates Summ2
    //!
    void Set_Summ2(int64_t value);

    //!
    //! @brief Сумма3
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #CloseCheckEx
    //!
    //! @par Модифицируется методами:
    //!   #FNGetNonClearableSumm
    //!
    //! @par Методы доступа:
    //!   #Get_Summ3, #Set_Summ3
    //!
    DOXYGEN_PROPERTY(int64_t Summ3)
    //!
    //! @brief Возвращает значение свойства #Summ3
    //! @return Summ3
    //! @relates Summ3
    //!
    int64_t Get_Summ3() const;
    //!
    //! @brief Устанавливает значение свойства #Summ3
    //! @param value Новое значение Summ3
    //! @relates Summ3
    //!
    void Set_Summ3(int64_t value);

    //!
    //! @brief Сумма4
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #CloseCheckEx
    //!
    //! @par Модифицируется методами:
    //!   #FNGetNonClearableSumm
    //!
    //! @par Методы доступа:
    //!   #Get_Summ4, #Set_Summ4
    //!
    DOXYGEN_PROPERTY(int64_t Summ4)
    //!
    //! @brief Возвращает значение свойства #Summ4
    //! @return Summ4
    //! @relates Summ4
    //!
    int64_t Get_Summ4() const;
    //!
    //! @brief Устанавливает значение свойства #Summ4
    //! @param value Новое значение Summ4
    //! @relates Summ4
    //!
    void Set_Summ4(int64_t value);

    //!
    //! @brief Название таблицы
    //!
    //! Наименование внутренней таблицы настроек ККМ – строка символов в кодировке WIN1251.
    //!
    //! Возможные значения см #TableNumber
    //!
    //! @par Используется методами:
    //!   #GetTableStruct
    //!
    //! @par Методы доступа:
    //!   #Get_TableName
    //!
    DOXYGEN_PROPERTY(std::string TableName)
    //!
    //! @brief Возвращает значение свойства #TableName
    //! @return TableName
    //! @relates TableName
    //!
    std::string Get_TableName() const;

    //!
    //! @brief Номер таблицы
    //!
    //! Номер внутренней таблицы настроек ККМ.
    //! В зависимости в ККМ может быть до 15 таблиц настроек:
    //!
    //! | Номер таблицы TableNumber | Название таблицы – TableName |
    //! | ------------------------- | -------------------------------------------------------- |
    //! |1 | Тип и режимы кассы
    //! |2 | Пароли кассиров и администраторов
    //! |3 | Таблица перевода времени
    //! |4 | Текст в чеке
    //! |5 | Наименования типов оплаты
    //! |6 | Налоговые ставки
    //! |7 | Наименования отделов
    //! |8 | Настройка шрифтов
    //! |9 | Таблица формата чека
    //! |10 | Конфигурация подкладного документа
    //! |11 | Межстрочные интервалы подкладного документа
    //! |12 | Настройки стандартного фискального подкладного документа
    //! |13 | Стандартная операция на подкладном документе
    //! |14 | Стандартное закрытие чека на подкладном документе
    //! |15 | Стандартная скидка/ надбавка на подкладном документе
    //!
    //! @par Используется методами:
    //!   #WriteTable, #ReadTable, #GetTableStruct, #GetFieldStruct.
    //!
    //! @par Методы доступа:
    //!   #Get_TableNumber, #Set_TableNumber
    //!
    DOXYGEN_PROPERTY(int TableNumber)
    //!
    //! @brief Возвращает значение свойства #TableNumber
    //! @return TableNumber
    //! @relates TableNumber
    //!
    int Get_TableNumber() const;
    //!
    //! @brief Устанавливает значение свойства #TableNumber
    //! @param value Новое значение TableNumber
    //! @relates TableNumber
    //!
    void Set_TableNumber(int value);

    //!
    //! @brief Налог1
    //!
    //! Первый номер налоговой группы.
    //!
    //! В ККТ с ФН может использоваться только одна налоговая ставка на позицию. Свойство может
    //! принимать следующие значения:
    //!
    //! | Значение | Налоговая ставка |
    //! |----------|----------------------------------------|
    //! |    0     | БЕЗ НДС          |
    //! |    1     | НДС 20%          |
    //! |    2     | НДС 10%          |
    //! |    3     | НДС 0%           |
    //! |    4     | БЕЗ НДС          |
    //! |    5     | НДС 20/120       |
    //! |    6     | НДС 10/110       |
    //! |    7     | НДС 5%           |
    //! |    8     | НДС 7%           |
    //! |    9     | НДС расч. 5/105  |
    //! |    10    | НДС расч. 7/107  |
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #Sale, #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Tax1, #Set_Tax1
    //!
    DOXYGEN_PROPERTY(int Tax1)
    //!
    //! @brief Возвращает значение свойства #Tax1
    //! @return Tax1
    //! @relates Tax1
    //!
    int Get_Tax1() const;
    //!
    //! @brief Устанавливает значение свойства #Tax1
    //! @param value Новое значение Tax1
    //! @relates Tax1
    //!
    void Set_Tax1(int value);

    //!
    //! @brief Налог2
    //!
    //! Второй номер налоговой группы.
    //!
    //! Диапазон значений: 0..4 (0 – нет налоговой группы).
    //!
    //! @note В онлайн-ККТ не используется
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #Sale, #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Tax2, #Set_Tax2
    //!
    DOXYGEN_PROPERTY(int Tax2)
    //!
    //! @brief Возвращает значение свойства #Tax2
    //! @return Tax2
    //! @relates Tax2
    //!
    int Get_Tax2() const;
    //!
    //! @brief Устанавливает значение свойства #Tax2
    //! @param value Новое значение Tax2
    //! @relates Tax2
    //!
    void Set_Tax2(int value);

    //!
    //! @brief Налог3
    //!
    //! Третий номер налоговой группы.
    //!
    //! Диапазон значений: 0..4 (0 – нет налоговой группы).
    //!
    //! @note В онлайн-ККТ не используется
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #Sale, #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Tax3, #Set_Tax3
    //!
    DOXYGEN_PROPERTY(int Tax3)
    //!
    //! @brief Возвращает значение свойства #Tax3
    //! @return Tax3
    //! @relates Tax3
    //!
    int Get_Tax3() const;
    //!
    //! @brief Устанавливает значение свойства #Tax3
    //! @param value Новое значение Tax3
    //! @relates Tax3
    //!
    void Set_Tax3(int value);

    //!
    //! @brief Налог4
    //!
    //! Четвертый номер налоговой группы.
    //!
    //! Диапазон значений: 0..4 (0 – нет налоговой группы).
    //!
    //! @note В онлайн-ККТ не используется
    //!
    //! @par Используется методами:
    //!   #CloseCheck, #Sale, #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Tax4, #Set_Tax4
    //!
    DOXYGEN_PROPERTY(int Tax4)
    //!
    //! @brief Возвращает значение свойства #Tax4
    //! @return Tax4
    //! @relates Tax4
    //!
    int Get_Tax4() const;
    //!
    //! @brief Устанавливает значение свойства #Tax4
    //! @param value Новое значение Tax4
    //! @relates Tax4
    //!
    void Set_Tax4(int value);

    //!
    //! @brief Время
    //!
    //! Внутреннее время ККМ.
    //!
    //! @par Используется методами:
    //!   #SetTime
    //!
    //! @par Модифицируется методами:
    //! #GetECRStatus, #FNGetStatus, #FNFindDocument, #FNGetInfoExchangeStatus,
    //! #FNGetOFDTicketByDocNumber,#FNGetFiscalizationResult, #FNGetFiscalizationResultByNumber
    //!
    //! @par Методы доступа:
    //!   #Get_Time, #Set_Time
    //!
    DOXYGEN_PROPERTY(std::time_t Time)
    //!
    //! @brief Возвращает значение свойства #Time
    //! @return Time
    //! @relates Time
    //!
    std::time_t Get_Time() const;
    //!
    //! @brief Устанавливает значение свойства #Time
    //! @param value Новое значение Time
    //! @relates Time
    //!
    void Set_Time(std::time_t value);

    //!
    //! @brief Тайм-аут приема байта
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    //! @par Методы доступа:
    //!   #Get_Timeout, #Set_Timeout
    //!
    DOXYGEN_PROPERTY(int Timeout)
    //!
    //! @brief Возвращает значение свойства #Timeout
    //! @return Timeout
    //! @relates Timeout
    //!
    int Get_Timeout() const;
    //!
    //! @brief Устанавливает значение свойства #Timeout
    //! @param value Новое значение Timeout
    //! @relates Timeout
    //!
    void Set_Timeout(int value);

    //!
    //! @brief Время cтрока
    //!
    //! Строковое представление свойства #Time
    //!
    //! @par Методы доступа:
    //!   #Get_TimeStr, #Set_TimeStr
    //!
    //! @par Используется методами:
    //!    #SetTime
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus
    //!
    DOXYGEN_PROPERTY(std::string TimeStr)
    //!
    //! @brief Возвращает значение свойства #TimeStr
    //! @return TimeStr
    //! @relates TimeStr
    //!
    std::string Get_TimeStr() const;
    //!
    //! @brief Устанавливает значение свойства #TimeStr
    //! @param value Новое значение TimeStr
    //! @relates TimeStr
    //!
    void Set_TimeStr(const std::string& value);

    //!
    //! @brief Посылаемые байты
    //!
    //! Последовательность байтов, посылаемая от хоста в ККТ и обратно. Должна соответствовать
    //! формату сообщения обмена ККТ с хостом:
    //! - Байт 0: код команды
    //! - Байты 1 – N: параметры, зависящие от команды (могут отсутствовать)
    //!
    //! @par Используется методами:
    //!   #ExchangeBytes
    //!
    //! @par Модифицируется методами:
    //!   #ExchangeBytes
    //!
    //! @par Методы доступа:
    //!   #Get_TransferBytes, #Set_TransferBytes
    //!
    DOXYGEN_PROPERTY(std::string TransferBytes)
    //!
    //! @brief Возвращает значение свойства #TransferBytes
    //! @return TransferBytes
    //! @relates TransferBytes
    //!
    std::string Get_TransferBytes() const;
    //!
    //! @brief Устанавливает значение свойства #TransferBytes
    //! @param value Новое значение TransferBytes
    //! @relates TransferBytes
    //!
    void Set_TransferBytes(const std::string& value);

    int Get_TRKNumber() const;
    void Set_TRKNumber(int value);

    //!
    //! @brief Тип последней записи ФП
    //!
    //! Признак типа последней записи, сделанной в ФП: TRUE – последняя запись в ФП – сменный итог,
    //! FALSE – последняя запись в ФП – фискализация (перерегистрация).
    //!
    //! @par Модифицируется методами:
    //!   #GetLastFMRecordDate
    //!
    //! @par Методы доступа:
    //!   #Get_TypeOfLastEntryFM
    //!
    DOXYGEN_PROPERTY(bool TypeOfLastEntryFM)
    //!
    //! @brief Возвращает значение свойства #TypeOfLastEntryFM
    //! @return TypeOfLastEntryFM
    //! @relates TypeOfLastEntryFM
    //!
    bool Get_TypeOfLastEntryFM() const;

    //!
    //! @brief Тип суммы записей ФП
    //!
    //! Признак суммы записей ФП:
    //! TRUE – сумма записей после последней перерегистрации, FALSE – сумма всех записей.
    //!
    //! @par Используется методами:
    //!   #GetFMRecordsSum
    //!
    //! @par Методы доступа:
    //!   #Get_TypeOfSumOfEntriesFM, #Set_TypeOfSumOfEntriesFM
    //!
    DOXYGEN_PROPERTY(bool TypeOfSumOfEntriesFM)
    //!
    //! @brief Возвращает значение свойства #TypeOfSumOfEntriesFM
    //! @return TypeOfSumOfEntriesFM
    //! @relates TypeOfSumOfEntriesFM
    //!
    bool Get_TypeOfSumOfEntriesFM() const;
    //!
    //! @brief Устанавливает значение свойства #TypeOfSumOfEntriesFM
    //! @param value Новое значение TypeOfSumOfEntriesFM
    //! @relates TypeOfSumOfEntriesFM
    //!
    void Set_TypeOfSumOfEntriesFM(bool value);

    //!
    //! @brief Кодовая страница
    //!
    //! Кодовая страница, используемая устройством. Может принимать значения:
    //!  - 0 – русский язык,
    //!  - 1 – английский язык,
    //!  - 2 – эстонский язык,
    //!  - 3 – грузинский язык.
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UCodePage
    //!
    DOXYGEN_PROPERTY(int UCodePage)
    //!
    //! @brief Возвращает значение свойства #UCodePage
    //! @return UCodePage
    //! @relates UCodePage
    //!
    int Get_UCodePage() const;

    //!
    //! @brief Название устройства
    //!
    //! См. «Таблица идентификации устройств».
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UDescription
    //!
    DOXYGEN_PROPERTY(std::string UDescription)
    //!
    //! @brief Возвращает значение свойства #UDescription
    //! @return UDescription
    //! @relates UDescription
    //!
    std::string Get_UDescription() const;

    //!
    //! @brief Версия протокола
    //!
    //! Версия протокола связи с ПК, используемая устройством (см. «Таблица идентификации
    //! устройств»).
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UMajorProtocolVersion
    //!
    DOXYGEN_PROPERTY(int UMajorProtocolVersion)
    //!
    //! @brief Возвращает значение свойства #UMajorProtocolVersion
    //! @return UMajorProtocolVersion
    //! @relates UMajorProtocolVersion
    //!
    int Get_UMajorProtocolVersion() const;

    //!
    //! @brief Тип устрйоства
    //!
    //! Тип устройства, подключенного к установленному в драйвере COM-порту (см. «Таблица
    //! идентификации устройств»).
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UMajorType
    //!
    DOXYGEN_PROPERTY(int UMajorType)
    //!
    //! @brief Возвращает значение свойства #UMajorType
    //! @return UMajorType
    //! @relates UMajorType
    //!
    int Get_UMajorType() const;

    //!
    //! @brief Подверсия протокола
    //!
    //! Подверсия протокола связи с ПК, используемая устройством (см. «Таблица идентификации
    //! устройств»).
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UMinorProtocolVersion
    //!
    DOXYGEN_PROPERTY(int UMinorProtocolVersion)
    //!
    //! @brief Возвращает значение свойства #UMinorProtocolVersion
    //! @return UMinorProtocolVersion
    //! @relates UMinorProtocolVersion
    //!
    int Get_UMinorProtocolVersion() const;

    //!
    //! @brief Подтип устройства
    //!
    //! Подтип устройства подключенного к установленному в драйвере COM-порту (см. «Таблица
    //! идентификации устройств»).
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UMinorType
    //!
    DOXYGEN_PROPERTY(int UMinorType)
    //!
    //! @brief Возвращает значение свойства #UMinorType
    //! @return UMinorType
    //! @relates UMinorType
    //!
    int Get_UMinorType() const;

    //!
    //! @brief Модель устройства
    //!
    //! Модель устройства подключенного к установленному в драйвере COM-порту (см. «Таблица
    //! идентификации устройств»).
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_UModel
    //!
    DOXYGEN_PROPERTY(int UModel)
    //!
    //! @brief Возвращает значение свойства #UModel
    //! @return UModel
    //! @relates UModel
    //!
    int Get_UModel() const;

    //!
    //! @brief Использовать ленту операционного журнала
    //!
    //! Признак операции с лентой операционного журнала.\n
    //! FALSE – не производить операцию над лентой
    //! операционного журнала, TRUE – производить операцию над лентой операционного журнала.
    //!
    //! @note Применяется в ККТ с двумя принтерами, в которых операционный журнал печается на одном
    //! из принтеров.
    //!
    //! @par Используется методами:
    //!   #FeedDocument, #PrintString, #PrintWideString
    //!
    //! @par Методы доступа:
    //!   #Get_UseJournalRibbon, #Set_UseJournalRibbon
    //!
    DOXYGEN_PROPERTY(bool UseJournalRibbon)
    //!
    //! @brief Возвращает значение свойства #UseJournalRibbon
    //! @return UseJournalRibbon
    //! @relates UseJournalRibbon
    //!
    bool Get_UseJournalRibbon() const;
    //!
    //! @brief Устанавливает значение свойства #UseJournalRibbon
    //! @param value Новое значение UseJournalRibbon
    //! @relates UseJournalRibbon
    //!
    void Set_UseJournalRibbon(bool value);

    //!
    //! @brief Использовать чековую ленту
    //!
    //! Признак операции с чековой лентой.\n
    //! FALSE – не производить операцию над чековой лентой, TRUE
    //! – производить операцию над чековой лентой.
    //!
    //! @par Используется методами:
    //!   #FeedDocument, #PrintString, #PrintWideString
    //!
    //! @par Методы доступа:
    //!   #Get_UseReceiptRibbon, #Set_UseReceiptRibbon
    //!
    DOXYGEN_PROPERTY(bool UseReceiptRibbon)
    //!
    //! @brief Возвращает значение свойства #UseReceiptRibbon
    //! @return UseReceiptRibbon
    //! @relates UseReceiptRibbon
    //!
    bool Get_UseReceiptRibbon() const;
    //!
    //! @brief Устанавливает значение свойства #UseReceiptRibbon
    //! @param value Новое значение UseReceiptRibbon
    //! @relates UseReceiptRibbon
    //!
    void Set_UseReceiptRibbon(bool value);

    //!
    //! @brief Использовать подкладной документ
    //!
    //! Признак операции с подкладным документом.\n
    //! FALSE – не производить операцию над подкладным
    //! документом, TRUE – производить операцию над подкладным документом.
    //!
    //! @note Применяется в ККТ с принтером подкладного документа.
    //!
    //! @par Используется методами:
    //!   #FeedDocument
    //!
    //! @par Методы доступа:
    //!   #Get_UseSlipDocument, #Set_UseSlipDocument
    //!
    DOXYGEN_PROPERTY(bool UseSlipDocument)
    //!
    //! @brief Возвращает значение свойства #UseSlipDocument
    //! @return UseSlipDocument
    //! @relates UseSlipDocument
    //!
    bool Get_UseSlipDocument() const;
    //!
    //! @brief Устанавливает значение свойства #UseSlipDocument
    //! @param value Новое значение UseSlipDocument
    //! @relates UseSlipDocument
    //!
    void Set_UseSlipDocument(bool value);

    //!
    //! @brief Значение поля целое
    //!
    //! Значение поля внутренней таблицы настроек ККМ, если данное поле типа BIN (числовое)(см.
    //! свойство #FieldType).
    //!
    //! Диапазон значений: минимальное – см. свойство #MINValueOfField, максимальное – см. свойство
    //! #MAXValueOfField.
    //!
    //! @par Используется методами:
    //!   #WriteTable
    //!
    //! @par Модифицируется методом:
    //!   #ReadTable
    //!
    //! @par Методы доступа:
    //!   #Get_ValueOfFieldInteger, #Set_ValueOfFieldInteger
    //!
    DOXYGEN_PROPERTY(int ValueOfFieldInteger)
    //!
    //! @brief Возвращает значение свойства #ValueOfFieldInteger
    //! @return ValueOfFieldInteger
    //! @relates ValueOfFieldInteger
    //!
    int Get_ValueOfFieldInteger() const;
    //!
    //! @brief Устанавливает значение свойства #ValueOfFieldInteger
    //! @param value Новое значение ValueOfFieldInteger
    //! @relates ValueOfFieldInteger
    //!
    void Set_ValueOfFieldInteger(int value);

    //!
    //! @brief Значение поля строка
    //!
    //! Значение поля внутренней таблицы настроек ККМ, если данное поле типа CHAR (строка) (см.
    //! свойство #FieldType).
    //!
    //! @par Используется методами:
    //!   #WriteTable
    //!
    //! @par Модифицируется методом:
    //!   #ReadTable
    //!
    //! @par Методы доступа:
    //!   #Get_ValueOfFieldString, #Set_ValueOfFieldString
    //!
    DOXYGEN_PROPERTY(std::string ValueOfFieldString)
    //!
    //! @brief Возвращает значение свойства #ValueOfFieldString
    //! @return ValueOfFieldString
    //! @relates ValueOfFieldString
    //!
    std::string Get_ValueOfFieldString() const;
    //!
    //! @brief Устанавливает значение свойства #ValueOfFieldString
    //! @param value Новое значение ValueOfFieldString
    //! @relates ValueOfFieldString
    //!
    void Set_ValueOfFieldString(const std::string& value);

    //!
    //! @brief Тип шрифта
    //!
    //! Тип шрифта (номер шрифта) при печати строки.
    //!
    //! Диапазон значений: 0..255.
    //!
    //! @par Используется методами:
    //!   #PrintStringWithFont, #GetFontMetrics, #PrintBarcodeLine
    //!
    //! @par Методы доступа:
    //!   #Get_FontType, #Set_FontType
    //!
    DOXYGEN_PROPERTY(int FontType)
    //!
    //! @brief Возвращает значение свойства #FontType
    //! @return FontType
    //! @relates FontType
    //!
    int Get_FontType() const;
    //!
    //! @brief Устанавливает значение свойства #FontType
    //! @param value Новое значение FontType
    //! @relates FontType
    //!
    void Set_FontType(int value);

    int Get_LDBaudrate() const;
    void Set_LDBaudrate(int value);
    int Get_LDComNumber() const;
    void Set_LDComNumber(int value);
    int Get_LDCount() const;
    int Get_LDIndex() const;
    void Set_LDIndex(int value);
    std::string Get_LDName() const;
    void Set_LDName(const std::string& value);
    int Get_LDNumber() const;
    void Set_LDNumber(int value);
    int Get_WaitPrintingTime() const;
    int EKLZActivizationResult();
    int EKLZActivization();
    int CloseEKLZArchive();
    int GetEKLZSerialNumber();
    std::string Get_EKLZNumber() const;
    int EKLZInterrupt();
    int GetEKLZCode1Report();
    int64_t Get_LastKPKDocumentResult() const;
    std::time_t Get_LastKPKDate() const;
    std::time_t Get_LastKPKTime() const;
    int Get_LastKPKNumber() const;
    int Get_EKLZFlags() const;
    int GetEKLZCode2Report();
    int TestEKLZArchiveIntegrity();
    int Get_TestNumber() const;
    void Set_TestNumber(int value);
    std::string Get_EKLZVersion() const;
    std::string Get_EKLZData() const;
    int GetEKLZVersion();
    int InitEKLZArchive();
    int GetEKLZData();
    int GetEKLZJournal();
    int GetEKLZDocument();
    int GetEKLZDepartmentReportInDatesRange();
    int GetEKLZDepartmentReportInSessionsRange();
    int GetEKLZSessionReportInDatesRange();
    int GetEKLZSessionReportInSessionsRange();
    int GetEKLZSessionTotal();
    int GetEKLZActivizationResult();
    int SetEKLZResultCode();

    //!
    //! @brief Код ошибки ЭКЛЗ
    //!
    //! Свойство  содержит  код  ошибки,  возвращаемый  ЭКЛЗ  в  результате  выполнения  последней
    //! операции. Если ошибки не произошло, то значение данного свойства устанавливается в 0 (Ошибок
    //! нет).
    //!
    //! @par Модифицируется методами:
    //!   #GetShortECRStatus
    //!
    //! @par Методы доступа:
    //!   #Get_EKLZResultCode, #Set_EKLZResultCode
    //!
    DOXYGEN_PROPERTY(int EKLZResultCode)
    //!
    //! @brief Возвращает значение свойства #EKLZResultCode
    //! @return EKLZResultCode
    //! @relates EKLZResultCode
    //!
    int Get_EKLZResultCode() const;
    //!
    //! @brief Устанавливает значение свойства #EKLZResultCode
    //! @param value Новое значение EKLZResultCode
    //! @relates EKLZResultCode
    //!
    void Set_EKLZResultCode(int value);

    //!
    //! @brief Код ошибки ФП
    //!
    //! Свойство содержит код ошибки, возвращаемый ФП в результате выполнения последней операции.
    //! Если ошибки не произошло, то значение данного свойства устанавливается в 0 (Ошибок нет).
    //!
    //! @par Методы доступа:
    //!   #Get_FMResultCode
    //!
    //! @par Модифицируется методом:
    //!   #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(int FMResultCode)
    //!
    //! @brief Возвращает значение свойства #FMResultCode
    //! @return FMResultCode
    //! @relates FMResultCode
    //!
    int Get_FMResultCode() const;

    //!
    //! @brief Напряжение источника питания
    //!
    //! @par Методы доступа:
    //!   #Get_PowerSourceVoltage
    //!
    //! @par Модифицируется методом:
    //!   #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(double PowerSourceVoltage)
    //!
    //! @brief Возвращает значение свойства #PowerSourceVoltage
    //! @return PowerSourceVoltage
    //! @relates PowerSourceVoltage
    //!
    double Get_PowerSourceVoltage() const;

    int OpenFiscalSlipDocument();
    int OpenStandardFiscalSlipDocument();
    int RegistrationOnSlipDocument();
    int StandardRegistrationOnSlipDocument();
    int ChargeOnSlipDocument();
    int StandardChargeOnSlipDocument();
    int CloseCheckOnSlipDocument();
    int StandardCloseCheckOnSlipDocument();
    int ConfigureSlipDocument();
    int ConfigureStandardSlipDocument();
    int FillSlipDocumentWithUnfiscalInfo();
    int ClearSlipDocumentBufferString();
    int ClearSlipDocumentBuffer();
    int PrintSlipDocument();
    int Get_CopyType() const;
    void Set_CopyType(int value);
    int Get_NumberOfCopies() const;
    void Set_NumberOfCopies(int value);
    int Get_CopyOffset1() const;
    void Set_CopyOffset1(int value);
    int Get_CopyOffset2() const;
    void Set_CopyOffset2(int value);
    int Get_CopyOffset3() const;
    void Set_CopyOffset3(int value);
    int Get_CopyOffset4() const;
    void Set_CopyOffset4(int value);
    int Get_CopyOffset5() const;
    void Set_CopyOffset5(int value);
    int Get_ClicheFont() const;
    void Set_ClicheFont(int value);
    int Get_HeaderFont() const;
    void Set_HeaderFont(int value);
    int Get_EKLZFont() const;
    void Set_EKLZFont(int value);
    int Get_ClicheStringNumber() const;
    void Set_ClicheStringNumber(int value);
    int Get_HeaderStringNumber() const;
    void Set_HeaderStringNumber(int value);
    int Get_EKLZStringNumber() const;
    void Set_EKLZStringNumber(int value);
    int Get_FMStringNumber() const;
    void Set_FMStringNumber(int value);
    int Get_ClicheOffset() const;
    void Set_ClicheOffset(int value);
    int Get_HeaderOffset() const;
    void Set_HeaderOffset(int value);
    int Get_EKLZOffset() const;
    void Set_EKLZOffset(int value);
    int Get_KPKOffset() const;
    void Set_KPKOffset(int value);
    int Get_FMOffset() const;
    void Set_FMOffset(int value);
    int Get_OperationBlockFirstString() const;
    void Set_OperationBlockFirstString(int value);
    int Get_QuantityFormat() const;
    void Set_QuantityFormat(int value);
    int Get_StringQuantityInOperation() const;
    void Set_StringQuantityInOperation(int value);
    int Get_TextStringNumber() const;
    void Set_TextStringNumber(int value);
    int Get_QuantityStringNumber() const;
    void Set_QuantityStringNumber(int value);
    int Get_SummStringNumber() const;
    void Set_SummStringNumber(int value);
    int Get_DepartmentStringNumber() const;
    void Set_DepartmentStringNumber(int value);
    int Get_TextFont() const;
    void Set_TextFont(int value);
    int Get_QuantityFont() const;
    void Set_QuantityFont(int value);
    int Get_MultiplicationFont() const;
    void Set_MultiplicationFont(int value);
    int Get_PriceFont() const;
    void Set_PriceFont(int value);
    int Get_SummFont() const;
    void Set_SummFont(int value);
    int Get_DepartmentFont() const;
    void Set_DepartmentFont(int value);
    int Get_TextSymbolNumber() const;
    void Set_TextSymbolNumber(int value);
    int Get_QuantitySymbolNumber() const;
    void Set_QuantitySymbolNumber(int value);
    int Get_PriceSymbolNumber() const;
    void Set_PriceSymbolNumber(int value);
    int Get_SummSymbolNumber() const;
    void Set_SummSymbolNumber(int value);
    int Get_DepartmentSymbolNumber() const;
    void Set_DepartmentSymbolNumber(int value);
    int Get_TextOffset() const;
    void Set_TextOffset(int value);
    int Get_QuantityOffset() const;
    void Set_QuantityOffset(int value);
    int Get_SummOffset() const;
    void Set_SummOffset(int value);
    int Get_DepartmentOffset() const;
    void Set_DepartmentOffset(int value);
    int DiscountOnSlipDocument();
    int StandardDiscountOnSlipDocument();
    bool Get_IsClearUnfiscalInfo() const;
    void Set_IsClearUnfiscalInfo(bool value);
    int Get_InfoType() const;
    void Set_InfoType(int value);
    int Get_StringNumber() const;
    void Set_StringNumber(int value);
    int EjectSlipDocument();
    int Get_EjectDirection() const;
    void Set_EjectDirection(int value);
    int LoadLineDataEx();
    //! @see Draw
    int DrawEx();
    int ConfigureGeneralSlipDocument();
    int Get_OperationNameStringNumber() const;
    void Set_OperationNameStringNumber(int value);
    int Get_OperationNameFont() const;
    void Set_OperationNameFont(int value);
    int Get_OperationNameOffset() const;
    void Set_OperationNameOffset(int value);
    int Get_TotalStringNumber() const;
    void Set_TotalStringNumber(int value);
    int Get_Summ1StringNumber() const;
    void Set_Summ1StringNumber(int value);
    int Get_Summ2StringNumber() const;
    void Set_Summ2StringNumber(int value);
    int Get_Summ3StringNumber() const;
    void Set_Summ3StringNumber(int value);
    int Get_Summ4StringNumber() const;
    void Set_Summ4StringNumber(int value);
    int Get_ChangeStringNumber() const;
    void Set_ChangeStringNumber(int value);
    int Get_Tax1TurnOverStringNumber() const;
    void Set_Tax1TurnOverStringNumber(int value);
    int Get_Tax2TurnOverStringNumber() const;
    void Set_Tax2TurnOverStringNumber(int value);
    int Get_Tax3TurnOverStringNumber() const;
    void Set_Tax3TurnOverStringNumber(int value);
    int Get_Tax4TurnOverStringNumber() const;
    void Set_Tax4TurnOverStringNumber(int value);
    int Get_Tax1SumStringNumber() const;
    void Set_Tax1SumStringNumber(int value);
    int Get_Tax2SumStringNumber() const;
    void Set_Tax2SumStringNumber(int value);
    int Get_Tax3SumStringNumber() const;
    void Set_Tax3SumStringNumber(int value);
    int Get_Tax4SumStringNumber() const;
    void Set_Tax4SumStringNumber(int value);
    int Get_SubTotalStringNumber() const;
    void Set_SubTotalStringNumber(int value);
    int Get_DiscountOnCheckStringNumber() const;
    void Set_DiscountOnCheckStringNumber(int value);
    int Get_TotalFont() const;
    void Set_TotalFont(int value);
    int Get_TotalSumFont() const;
    void Set_TotalSumFont(int value);
    int Get_Summ1Font() const;
    void Set_Summ1Font(int value);
    int Get_Summ1NameFont() const;
    void Set_Summ1NameFont(int value);
    int Get_Summ2NameFont() const;
    void Set_Summ2NameFont(int value);
    int Get_Summ3NameFont() const;
    void Set_Summ3NameFont(int value);
    int Get_Summ4NameFont() const;
    void Set_Summ4NameFont(int value);
    int Get_Summ2Font() const;
    void Set_Summ2Font(int value);
    int Get_Summ3Font() const;
    void Set_Summ3Font(int value);
    int Get_Summ4Font() const;
    void Set_Summ4Font(int value);
    int Get_ChangeFont() const;
    void Set_ChangeFont(int value);
    int Get_ChangeSumFont() const;
    void Set_ChangeSumFont(int value);
    int Get_Tax1NameFont() const;
    void Set_Tax1NameFont(int value);
    int Get_Tax2NameFont() const;
    void Set_Tax2NameFont(int value);
    int Get_Tax3NameFont() const;
    void Set_Tax3NameFont(int value);
    int Get_Tax4NameFont() const;
    void Set_Tax4NameFont(int value);
    int Get_Tax1TurnOverFont() const;
    void Set_Tax1TurnOverFont(int value);
    int Get_Tax2TurnOverFont() const;
    void Set_Tax2TurnOverFont(int value);
    int Get_Tax3TurnOverFont() const;
    void Set_Tax3TurnOverFont(int value);
    int Get_Tax4TurnOverFont() const;
    void Set_Tax4TurnOverFont(int value);
    int Get_Tax1RateFont() const;
    void Set_Tax1RateFont(int value);
    int Get_Tax2RateFont() const;
    void Set_Tax2RateFont(int value);
    int Get_Tax3RateFont() const;
    void Set_Tax3RateFont(int value);
    int Get_Tax4RateFont() const;
    void Set_Tax4RateFont(int value);
    int Get_Tax1SumFont() const;
    void Set_Tax1SumFont(int value);
    int Get_Tax2SumFont() const;
    void Set_Tax2SumFont(int value);
    int Get_Tax3SumFont() const;
    void Set_Tax3SumFont(int value);
    int Get_Tax4SumFont() const;
    void Set_Tax4SumFont(int value);
    int Get_SubTotalFont() const;
    void Set_SubTotalFont(int value);
    int Get_SubTotalSumFont() const;
    void Set_SubTotalSumFont(int value);
    int Get_DiscountOnCheckFont() const;
    void Set_DiscountOnCheckFont(int value);
    int Get_DiscountOnCheckSumFont() const;
    void Set_DiscountOnCheckSumFont(int value);
    int Get_TotalSymbolNumber() const;
    void Set_TotalSymbolNumber(int value);
    int Get_Summ1SymbolNumber() const;
    void Set_Summ1SymbolNumber(int value);
    int Get_Summ2SymbolNumber() const;
    void Set_Summ2SymbolNumber(int value);
    int Get_Summ3SymbolNumber() const;
    void Set_Summ3SymbolNumber(int value);
    int Get_Summ4SymbolNumber() const;
    void Set_Summ4SymbolNumber(int value);
    int Get_ChangeSymbolNumber() const;
    void Set_ChangeSymbolNumber(int value);
    int Get_Tax1NameSymbolNumber() const;
    void Set_Tax1NameSymbolNumber(int value);
    int Get_Tax1TurnOverSymbolNumber() const;
    void Set_Tax1TurnOverSymbolNumber(int value);
    int Get_Tax1RateSymbolNumber() const;
    void Set_Tax1RateSymbolNumber(int value);
    int Get_Tax1SumSymbolNumber() const;
    void Set_Tax1SumSymbolNumber(int value);
    int Get_Tax2NameSymbolNumber() const;
    void Set_Tax2NameSymbolNumber(int value);
    int Get_Tax2TurnOverSymbolNumber() const;
    void Set_Tax2TurnOverSymbolNumber(int value);
    int Get_Tax2RateSymbolNumber() const;
    void Set_Tax2RateSymbolNumber(int value);
    int Get_Tax2SumSymbolNumber() const;
    void Set_Tax2SumSymbolNumber(int value);
    int Get_Tax3NameSymbolNumber() const;
    void Set_Tax3NameSymbolNumber(int value);
    int Get_Tax3TurnOverSymbolNumber() const;
    void Set_Tax3TurnOverSymbolNumber(int value);
    int Get_Tax3RateSymbolNumber() const;
    void Set_Tax3RateSymbolNumber(int value);
    int Get_Tax3SumSymbolNumber() const;
    void Set_Tax3SumSymbolNumber(int value);
    int Get_Tax4NameSymbolNumber() const;
    void Set_Tax4NameSymbolNumber(int value);
    int Get_Tax4TurnOverSymbolNumber() const;
    void Set_Tax4TurnOverSymbolNumber(int value);
    int Get_Tax4RateSymbolNumber() const;
    void Set_Tax4RateSymbolNumber(int value);
    int Get_Tax4SumSymbolNumber() const;
    void Set_Tax4SumSymbolNumber(int value);
    int Get_SubTotalSymbolNumber() const;
    void Set_SubTotalSymbolNumber(int value);
    int Get_DiscountOnCheckSymbolNumber() const;
    void Set_DiscountOnCheckSymbolNumber(int value);
    int Get_DiscountOnCheckSumSymbolNumber() const;
    void Set_DiscountOnCheckSumSymbolNumber(int value);
    int Get_TotalOffset() const;
    void Set_TotalOffset(int value);
    int Get_Summ1Offset() const;
    void Set_Summ1Offset(int value);
    int Get_TotalSumOffset() const;
    void Set_TotalSumOffset(int value);
    int Get_Summ1NameOffset() const;
    void Set_Summ1NameOffset(int value);
    int Get_Summ2Offset() const;
    void Set_Summ2Offset(int value);
    int Get_Summ2NameOffset() const;
    void Set_Summ2NameOffset(int value);
    int Get_Summ3Offset() const;
    void Set_Summ3Offset(int value);
    int Get_Summ3NameOffset() const;
    void Set_Summ3NameOffset(int value);
    int Get_Summ4Offset() const;
    void Set_Summ4Offset(int value);
    int Get_Summ4NameOffset() const;
    void Set_Summ4NameOffset(int value);
    int Get_ChangeOffset() const;
    void Set_ChangeOffset(int value);
    int Get_ChangeSumOffset() const;
    void Set_ChangeSumOffset(int value);
    int Get_Tax1NameOffset() const;
    void Set_Tax1NameOffset(int value);
    int Get_Tax1TurnOverOffset() const;
    void Set_Tax1TurnOverOffset(int value);
    int Get_Tax1RateOffset() const;
    void Set_Tax1RateOffset(int value);
    int Get_Tax1SumOffset() const;
    void Set_Tax1SumOffset(int value);
    int Get_Tax2NameOffset() const;
    void Set_Tax2NameOffset(int value);
    int Get_Tax2TurnOverOffset() const;
    void Set_Tax2TurnOverOffset(int value);
    int Get_Tax2RateOffset() const;
    void Set_Tax2RateOffset(int value);
    int Get_Tax2SumOffset() const;
    void Set_Tax2SumOffset(int value);
    int Get_Tax3NameOffset() const;
    void Set_Tax3NameOffset(int value);
    int Get_Tax3TurnOverOffset() const;
    void Set_Tax3TurnOverOffset(int value);
    int Get_Tax3RateOffset() const;
    void Set_Tax3RateOffset(int value);
    int Get_Tax3SumOffset() const;
    void Set_Tax3SumOffset(int value);
    int Get_Tax4NameOffset() const;
    void Set_Tax4NameOffset(int value);
    int Get_Tax4TurnOverOffset() const;
    void Set_Tax4TurnOverOffset(int value);
    int Get_Tax4RateOffset() const;
    void Set_Tax4RateOffset(int value);
    int Get_Tax4SumOffset() const;
    void Set_Tax4SumOffset(int value);
    int Get_SubTotalOffset() const;
    void Set_SubTotalOffset(int value);
    int Get_SubTotalSumOffset() const;
    void Set_SubTotalSumOffset(int value);
    int Get_SlipDocumentWidth() const;
    void Set_SlipDocumentWidth(int value);
    int Get_SlipDocumentLength() const;
    void Set_SlipDocumentLength(int value);
    int Get_PrintingAlignment() const;
    void Set_PrintingAlignment(int value);
    std::string Get_SlipStringIntervals() const;
    void Set_SlipStringIntervals(const std::string& value);
    int Get_SlipEqualStringIntervals() const;
    void Set_SlipEqualStringIntervals(int value);
    int Get_KPKFont() const;
    void Set_KPKFont(int value);
    int Get_DiscountOnCheckOffset() const;
    void Set_DiscountOnCheckOffset(int value);
    int Get_DiscountOnCheckSumOffset() const;
    void Set_DiscountOnCheckSumOffset(int value);
    int WideLoadLineData();
    //!
    //! @brief Напечатать отчет по налогам
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int PrintTaxReport();
    uint32_t Get_FileVersionMS() const;
    uint32_t Get_FileVersionLS() const;
    int GetLongSerialNumberAndLongRNM();
    int SetLongSerialNumber();
    int FiscalizationWithLongRNM();

    int Connect2();

    //!
    //! @brief Статус режима
    //!
    //! Свойство содержит номер статуса текущего режима ККМ.
    //! Может использоваться вместо свойства #ECRMode8Status, так как является его «расширенной»
    //! версией для описания статуса не только 8-го режима, но и всех остальных
    //! Находясь в режимах 8, 13 и 14, ККМ может быть в одном из состояний:
    //! <table>
    //! <tr><th>Статус режима<th>Режим 8<th>Режим 13<th>Режим 14
    //! <tr><td>0<td>Открыт документ продажи<td>Открыт фискальный подкладной документ
    //! продажи<td>Ожидание загрузки
    //! ПД
    //! <tr><td>1<td>Открыт документ покупки<td>Открыт фискальный подкладной документ
    //! покупки<td>Загрузка и
    //! позиционирование ПД
    //! <tr><td>2<td>Открыт документ возврата продажи<td>Открыт фискальный подкладной документ
    //! возврата
    //! продажи<td>Позиционирование ПД
    //! <tr><td>3<td>Открыт документ возврата покупки<td>Открыт фискальный подкладной документ
    //! возврата
    //! покупки<td>Печать ПД
    //! <tr><td>4<td>–<td>–<td>Печать ПД закончена
    //! <tr><td>5<td>–<td>–<td>Выброс ПД
    //! <tr><td>6<td>–<td>–<td>Ожидание извлечения ПД
    //! </table>
    //!
    //! @par Методы доступа:
    //!   #Get_ECRModeStatus
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(int ECRModeStatus)
    //!
    //! @brief Возвращает значение свойства #ECRModeStatus
    //! @return ECRModeStatus
    //! @relates ECRModeStatus
    //!
    int Get_ECRModeStatus() const;
    int GetECRPrinterStatus();
    int Get_PrinterStatus() const;
    // IDrvFR2
    std::string Get_ServerVersion() const;
    std::string Get_LDComputerName() const;
    void Set_LDComputerName(const std::string& value);
    int Get_LDTimeout() const;
    void Set_LDTimeout(int value);

    //!
    //! @brief Имя компьютера
    //!
    //! Имя компьютера, к которому подключен ККТ.
    //!
    //! @par Методы доступа:
    //!   #Get_ComputerName, #Set_ComputerName
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(std::string ComputerName)
    //!
    //! @brief Возвращает значение свойства #ComputerName
    //! @return ComputerName
    //! @relates ComputerName
    //!
    std::string Get_ComputerName() const;
    //!
    //! @brief Устанавливает значение свойства #ComputerName
    //! @param value Новое значение ComputerName
    //! @relates ComputerName
    //!
    void Set_ComputerName(const std::string& value);

    int ServerConnect();
    int ServerDisconnect();
    bool Get_ServerConnected() const;
    int LockPort();
    int UnlockPort();
    bool Get_PortLocked() const;
    int AdminUnlockPort();
    int AdminUnlockPorts();
    int ServerCheckKey();

    //!
    //! @brief Получить параметры шрифта.
    //!
    //! Метод запрашивает параметры шрифта FontType.
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #FontType - тип шрифта.
    //!
    //! @par Модифицируемые свойства:
    //!  - #PrintWidth - ширина области печати,
    //!  - #CharWidth  - ширина символа,
    //!  - #CharHeight - высота символа,
    //!  - #FontCount - количество встроенных шрифтов.
    //!
    //! @return Код ошибки
    //!
    int GetFontMetrics();

    //!
    //! @brief Ширина печати
    //!
    //! Ширина области печати в точках.
    //!
    //! Диапазон значений: 0..65536.
    //!
    //! @par Методы доступа:
    //!   #Get_PrintWidth
    //!
    //! @par Модифицируется методами:
    //!   #GetFontMetrics
    //!
    DOXYGEN_PROPERTY(int PrintWidth)
    //!
    //! @brief Возвращает значение свойства #PrintWidth
    //! @return PrintWidth
    //! @relates PrintWidth
    //!
    int Get_PrintWidth() const;

    //!
    //! @brief Ширина символа
    //!
    //! Ширина символа шрифта в точках.
    //!
    //! Диапазон значений: 0..255.
    //!
    //! @par Методы доступа:
    //!   #Get_CharWidth
    //!
    //! @par Модифицируется методами:
    //!   #GetFontMetrics
    //!
    DOXYGEN_PROPERTY(int CharWidth)
    //!
    //! @brief Возвращает значение свойства #CharWidth
    //! @return CharWidth
    //! @relates CharWidth
    //!
    int Get_CharWidth() const;

    //!
    //! @brief Высота символа
    //!
    //! Высота символа шрифта в точках.
    //!
    //! Диапазон значений: 0..255.
    //!
    //! @par Методы доступа:
    //!   #Get_CharHeight
    //!
    //! @par Модифицируется методами:
    //!   #GetFontMetrics
    //!
    DOXYGEN_PROPERTY(int CharHeight)
    //!
    //! @brief Возвращает значение свойства #CharHeight
    //! @return CharHeight
    //! @relates CharHeight
    //!
    int Get_CharHeight() const;

    //!
    //! @brief Количество шрифтов
    //!
    //! Количество встроенных шрифтов в данной ККМ.
    //!
    //! Диапазон значений: 0..255.
    //!
    //! @par Методы доступа:
    //!   #Get_FontCount
    //!
    //! @par Модифицируется методами:
    //!   #GetFontMetrics
    //!
    DOXYGEN_PROPERTY(int FontCount)
    //!
    //! @brief Возвращает значение свойства #FontCount
    //! @return FontCount
    //! @relates FontCount
    //!
    int Get_FontCount() const;

    int GetFreeLDNumber();
    // IDrvFR3
    //!
    //! @brief @see Set_LogOn
    //!
    bool Get_LogOn() const;
    //!
    //! @brief Логгирование в драйвере глобальное и включено всегда.
    //!
    //! Управление происходит через следующие переменные окружения <br>
    //! * FR_DRV_DEBUG_CONSOLE - если определено весь вывод лога будет на stderr <br>
    //! * FR_DRV_LOG_PATH - путь файла лога(по умолчанию fr_drv.log в рабочей директории)<br>
    //! * FR_DRV_LOG_FILE_COUNT - кол-во ротаций(по умолчанию 2)<br>
    //! * FR_DRV_LOG_PART_SIZE - размер части в байтах (по умолчанию 1024 * 1024 * 10)<br>
    //! * FR_DRV_LOG_FLAGS - флаги логгирования, битовая маска со следующими ключами(по умолчанию
    //! всё включено)
    //!
    //!     * 1 << 0 - логгировать обмен
    //!     * 1 << 1 - логгировать каждый read/write в IoLayer, иначе аккумулировать
    //!     * 1 << 2 - логгировать отладку протокола
    //!     * 1 << 3 - логгировать статистику протокола
    //!     * 1 << 4 - логгировать отладку функций-утилит
    //!     * 1 << 5 - логгировать отладку вызовов интерфейсов верхнего уровня (classic,upos, итд)
    //!
    //!
    //!
    //! Если требуется своя обработка логгирования - можно воспользоваться функцией обратного
    //! вызова.
    //! @see setLogCallback
    //!
    void Set_LogOn(bool value);
    int ReadTable2();
    int WriteTable2();
    void SetFieldMinValue(int value);
    void SetFieldMaxValue(int value);
    // IDrvFR4
    bool Get_CPLog() const;
    void Set_CPLog(bool value);
    // IDrvFR6
    std::string Get_CashControlHost() const;
    void Set_CashControlHost(const std::string& value);
    std::string Get_CashControlPort() const;
    void Set_CashControlPort(const std::string& value);
    bool Get_CashControlEnabled() const;
    void Set_CashControlEnabled(bool value);
    bool Get_CashControlUseTCP() const;
    void Set_CashControlUseTCP(bool value);
    uint32_t Get_CashControlPassword() const;
    void Set_CashControlPassword(uint32_t value);
    int CashControlOpen();
    int CashControlClose();
    // IDrvFR7

    //!
    //! @brief Тип подключения к устройству
    //!
    //! Значение по умолчанию – 0 (Локальное подключение)
    //!
    //! @par Методы доступа:
    //!   #Get_ConnectionType, #Set_ConnectionType
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(TConnectionType ConnectionType)
    //!
    //! @brief Возвращает значение свойства #ConnectionType
    //! @return ConnectionType
    //! @relates ConnectionType
    //!
    TConnectionType Get_ConnectionType() const;
    //!
    //! @brief Устанавливает значение свойства #ConnectionType
    //! @param value Новое значение ConnectionType
    //! @relates ConnectionType
    //!
    void Set_ConnectionType(TConnectionType value);

    TConnectionType Get_LDConnectionType() const;
    void Set_LDConnectionType(TConnectionType value);

    //!
    //! @brief Порт TCP
    //!
    //! Номер порта TCP при подключении к ККТ по TCP.
    //!
    //! Допустимые значения: 1…65535.
    //!
    //! @par Методы доступа:
    //!   #Get_TCPPort, #Set_TCPPort
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(int TCPPort)
    //!
    //! @brief Возвращает значение свойства #TCPPort
    //! @return TCPPort
    //! @relates TCPPort
    //!
    int Get_TCPPort() const;
    //!
    //! @brief Устанавливает значение свойства #TCPPort
    //! @param value Новое значение TCPPort
    //! @relates TCPPort
    //!
    void Set_TCPPort(int value);

    int Get_LDTCPPort() const;
    void Set_LDTCPPort(int value);

    //!
    //! @brief IP адрес
    //!
    //! IP адрес ККТ.
    //!
    //! @par Методы доступа:
    //!   #Get_IPAddress, #Set_IPAddress
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(std::string IPAddress)
    //!
    //! @brief Возвращает значение свойства #IPAddress
    //! @return IPAddress
    //! @relates IPAddress
    //!
    std::string Get_IPAddress() const;
    //!
    //! @brief Устанавливает значение свойства #IPAddress
    //! @param value Новое значение IPAddress
    //! @relates IPAddress
    //!
    void Set_IPAddress(const std::string& value);

    std::string Get_LDIPAddress() const;
    void Set_LDIPAddress(const std::string& value);

    //!
    //! @brief Использовать IP адрес
    //!
    //! При подключении использовать IP адрес ККТ.\n
    //! Если True, при подключении будет использоваться свойство IPAddress, в противном случае будет
    //! использоваться свойство ComputerName.
    //!
    //! @par Методы доступа:
    //!   #Get_UseIPAddress, #Set_UseIPAddress
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(bool UseIPAddress)
    //!
    //! @brief Возвращает значение свойства #UseIPAddress
    //! @return UseIPAddress
    //! @relates UseIPAddress
    //!
    bool Get_UseIPAddress() const;
    //!
    //! @brief Устанавливает значение свойства #UseIPAddress
    //! @param value Новое значение UseIPAddress
    //! @relates UseIPAddress
    //!
    void Set_UseIPAddress(bool value);

    bool Get_LDUseIPAddress() const;
    void Set_LDUseIPAddress(bool value);
    int SaveParams();
    // IDrvFR8
    std::string Get_CPLogFile() const;
    void Set_CPLogFile(const std::string& value);
    std::string Get_ComLogFile() const;
    void Set_ComLogFile(const std::string& value);
    // IDrvFR9
    std::string Get_LineData2() const;
    void Set_LineData2(const std::string& value);
    // IDrvFR10
    //!
    //! @brief Пароль системного администратора.
    //!
    //! Используется для отмены чека администратором и используется инициализации полей, таблиц,
    //! закрытых паролем сист. администратора
    //!
    //! @par Методы доступа:
    //!   #Get_SysAdminPassword, #Set_SysAdminPassword
    //!
    //! @par Используется методами:
    //!   #SysAdminCancelCheck, службой EoD @see AutoEoD
    //!
    DOXYGEN_PROPERTY(uint32_t SysAdminPassword)
    //!
    //! @brief Возвращает значение свойства #SysAdminPassword
    //! @return SysAdminPassword
    //! @relates SysAdminPassword
    //!
    uint32_t Get_SysAdminPassword() const;
    //!
    //! @brief Устанавливает значение свойства #SysAdminPassword
    //! @param value Новое значение SysAdminPassword
    //! @relates SysAdminPassword
    //!
    void Set_SysAdminPassword(uint32_t value);
    bool Get_RecoverError165() const;
    void Set_RecoverError165(bool value);
    int Get_MaxRecoverCount() const;
    void Set_MaxRecoverCount(int value);
    // IDrvFR11
    int GetEKLZCode1Status();
    int GetEKLZCode2Status();
    int ReadWriteFM();
    int PrintHeader();
    int CloseCheckWithResult();
    int Get_OperationCode() const;
    int Get_AccType() const;
    void Set_AccType(int value);
    int Get_Address() const;
    void Set_Address(int value);
    int Get_WrittenByte() const;
    void Set_WrittenByte(int value);
    int Get_ReadByte() const;
    std::string Get_TransferByte() const;
    void Set_TransferByte(const std::string& value);

    //!
    //! @brief Тип операции
    //!
    //! @par Методы доступа:
    //!   #Get_OperationType, #Set_OperationType
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument
    //!
    DOXYGEN_PROPERTY(int OperationType)
    //!
    //! @brief Возвращает значение свойства #OperationType
    //! @return OperationType
    //! @relates OperationType
    //!
    int Get_OperationType() const;
    //!
    //! @brief Устанавливает значение свойства #OperationType
    //! @param value Новое значение OperationType
    //! @relates OperationType
    //!
    void Set_OperationType(int value);

    int AboutBox();
    // IDrvFR12
    //!
    //! @brief Вход накопителя
    //!
    //! Установленный параметр «1» означает, что на входе накопителя есть бумага. \n
    //! В поле флагов соответствует биту номер 12.  \n
    //! Бит 12 – Бумага на входе в презентер (0 – отсутствует, 1 – есть).
    //!
    //! @par Методы доступа:
    //!   #Get_PresenterIn
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool PresenterIn)
    //!
    //! @brief Возвращает значение свойства #PresenterIn
    //! @return PresenterIn
    //! @relates PresenterIn
    //!
    bool Get_PresenterIn() const;

    //!
    //! @brief Выход накопителя
    //!
    //! Установленный параметр «1» означает, что на входе накопителя есть бумага. \n
    //! В поле флагов соответствует биту номер 13. \n
    //! Бит 13 – Бумага на выходе из презентера (0 – нет, 1 – есть).
    //!
    //! @par Методы доступа:
    //!   #Get_PresenterOut
    //!
    //! @par Модифицируется методами:
    //!   #GetECRStatus, #GetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool PresenterOut)
    //!
    //! @brief Возвращает значение свойства #PresenterOut
    //! @return PresenterOut
    //! @relates PresenterOut
    //!
    bool Get_PresenterOut() const;
    int PresenterKeep();
    int PresenterPush();
    int OpenScreen();
    int CloseScreen();
    // IDrvFR13
    bool Get_ComLogOnlyErrors() const;
    void Set_ComLogOnlyErrors(bool value);
    // IDrvFR14
    //!
    //! @brief Установить пароль ЦТО.
    //!
    //! Метод устанавливает пароль ЦТО. Перед вызовом метода в свойстве SCPassword следует указать
    //! текущий пароль ЦТО и заполнить свойство NewSCPassword, в котором указать новый пароль ЦТО.
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #SCPassword - текущий пароль ЦТО
    //!  - #NewSCPassword - новый пароль ЦТО
    //!
    //! @return Код ошибки
    //!
    int SetSCPassword();
    //!
    //! @brief Пароль ЦТО.
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_SCPassword, #Set_SCPassword
    //!
    //! @par Используется методами:
    //!   SetSCPassword
    //!
    DOXYGEN_PROPERTY(uint32_t SCPassword)
    //!
    //! @brief Возвращает значение свойства #SCPassword
    //! @return SCPassword
    //! @relates SCPassword
    //!
    uint32_t Get_SCPassword() const;
    //!
    //! @brief Устанавливает значение свойства #SCPassword
    //! @param value Новое значение SCPassword
    //! @relates SCPassword
    //!
    void Set_SCPassword(uint32_t value);
    //!
    //! @brief Новый пароль ЦТО
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_NewSCPassword, #Set_NewSCPassword
    //!
    //! @par Используется методами:
    //!   SetNewSCPassword
    //!
    DOXYGEN_PROPERTY(uint32_t NewSCPassword)
    //!
    //! @brief Возвращает значение свойства #NewSCPassword
    //! @return NewSCPassword
    //! @relates NewSCPassword
    //!
    uint32_t Get_NewSCPassword() const;
    //!
    //! @brief Устанавливает значение свойства #NewSCPassword
    //! @param value Новое значение NewSCPassword
    //! @relates NewSCPassword
    //!
    void Set_NewSCPassword(uint32_t value);
    // IDrvFR44
    std::string Get_LastKPKDateStr() const;
    std::string Get_LastKPKTimeStr() const;
    bool MethodSupported();
    std::string Get_MethodName() const;
    void Set_MethodName(const std::string& value);
    std::string Get_PropertyName() const;
    void Set_PropertyName(const std::string& value);
    bool PropertySupported();
    int Get_LockTimeout() const;
    void Set_LockTimeout(int value);
    int LockPortTimeout();
    int Get_SlipStringInterval() const;
    void Set_SlipStringInterval(int value);
    int GetIBMStatus();
    int GetShortIBMStatus();
    int Get_IBMStatusByte1() const;
    int Get_IBMStatusByte2() const;
    int Get_IBMStatusByte3() const;
    int Get_IBMStatusByte4() const;
    int Get_IBMStatusByte5() const;
    int Get_IBMStatusByte6() const;
    int Get_IBMStatusByte7() const;
    int Get_IBMStatusByte8() const;
    int Get_IBMFlags() const;
    int Get_IBMDocumentNumber() const;
    int Get_IBMLastSaleReceiptNumber() const;
    int Get_IBMLastBuyReceiptNumber() const;
    int Get_IBMLastReturnSaleReceiptNumber() const;
    int Get_IBMLastReturnBuyReceiptNumber() const;
    int Get_IBMSessionDay() const;
    int Get_IBMSessionMonth() const;
    int Get_IBMSessionYear() const;
    int Get_IBMSessionHour() const;
    int Get_IBMSessionMin() const;
    int Get_IBMSessionSec() const;
    std::time_t Get_IBMSessionDateTime() const;
    std::string Get_EscapeIP() const;
    void Set_EscapeIP(const std::string& value);
    int Get_EscapePort() const;
    void Set_EscapePort(int value);
    std::string Get_LDEscapeIP() const;
    void Set_LDEscapeIP(const std::string& value);
    int Get_LDEscapePort() const;
    void Set_LDEscapePort(int value);
    int Get_EscapeTimeout() const;
    void Set_EscapeTimeout(int value);
    int Get_LDEscapeTimeout() const;
    void Set_LDEscapeTimeout(int value);
    int Get_CommandTimeout() const;
    void Set_CommandTimeout(int value);
    bool Get_UseCommandTimeout() const;
    void Set_UseCommandTimeout(bool value);
    int Get_CommandCount() const;
    int Get_CommandIndex() const;
    void Set_CommandIndex(int value);
    int GetCommandParams();
    int SetCommandParams();
    int SaveCommandParams();
    std::string Get_CommandName() const;
    int Get_CommandDefTimeout() const;
    int Get_CommandCode() const;
    int SetAllCommandsParams();
    int Get_TimeoutsUsing() const;
    void Set_TimeoutsUsing(int value);
    int SetDefCommandsParams();
    // IDrvFR45

    //!
    //! @brief Открыть смену.
    //!
    //! Если при открытии смены необходимо передать дополнительные теги, то можно
    //! предварительно вызвать #FNBeginOpenSession, передать теги с помощью #FNSendTLV или
    //! #FNSendTag и в заключение вызвать #OpenSession.
    //!
    //! @note Работает в режиме 4. Переводит ККМ в режим 2.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @return Код ошибки
    //!
    //! @sa FNBeginOpenSession
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNOpenSession.
    //!
    int OpenSession();

    // clang-format off
    //!
    //! @brief Ожидать завершения печати.
    //!
    //! Метод запрашивает состояние ККТ и анализирует подрежим ККТ. В случае отсутствия связи запрос
    //! состояния повторяется до истечения времени, заданного в свойстве #ConnectionTimeout.
    //! Далее приведены значения подрежимов и действия программы:
    //!
    //! |                    Подрежим                         |                                             Действие                                         |
    //! |-----------------------------------------------------|----------------------------------------------------------------------------------------------|
    //! | 0 - Бумага есть.                                    | Выход из метода.                                                                             |
    //! | 1 - Пассивное отсутствие бумаги.                    | Выдает ошибку -34: "Нет бумаги"                                                              |
    //! | 2 - Активное отсутствие бумаги.                     | Выдает ошибку -34: "Нет бумаги"                                                              |
    //! | 3 - После активного отсутствия бумаги.              | ККТ ждет команду продолжения печати.Подает команду продолжения печати и возвращается в цикл. |
    //! | 4 - Фаза печати операции полных фискальных отчетов. | Выполняет задержку, указанную в свойстве #WaitForPrintingDelay и возвращается в цикл.        |
    //! | 5 - Фаза печати операции.                           | Выполняет задержку, указанную в свойстве #WaitForPrintingDelay и возвращается в цикл.        |
    //! | Другие значения подрежима ФР                        | Выход из метода.                                                                             |
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #WaitForPrintingDelay - задержка ожидания печати,
    //!  - #ConnectionTimeout - таймаут подключения.
    //!  - #WaitForPrintingTimeout - общий таймаут ожидания окончания печати
    //!
    //! @return Код ошибки
    //!
    // clang-format on
    int WaitForPrinting();

    int Get_IntervalNumber() const;
    void Set_IntervalNumber(int value);
    int Get_IntervalValue() const;
    void Set_IntervalValue(int value);
    int GetInterval();
    int SetInterval();
    int Get_ParentWnd() const;
    void Set_ParentWnd(int value);
    int ShowTablesDlg();
    bool Get_MobilePayEnabled() const;
    void Set_MobilePayEnabled(bool value);
    int Get_PayDepartment() const;
    void Set_PayDepartment(int value);
    int Get_ParamsPageIndex() const;
    void Set_ParamsPageIndex(int value);
    int ShowPayParams();
    bool Get_SaleError() const;
    void Set_SaleError(bool value);
    int ReprintSlipDocument();
    int Get_RealPayDepartment() const;
    void Set_RealPayDepartment(int value);
    // IDrvFR47
    int CardPayProperties();
    bool Get_CardPayEnabled() const;
    void Set_CardPayEnabled(bool value);
    int Get_CardPayType() const;
    void Set_CardPayType(int value);
    bool Get_ccUseTextAsWareName() const;
    int Get_ccWareNameLineNumber() const;
    void Set_ccUseTextAsWareName(bool value);
    void Set_ccWareNameLineNumber(int value);
    int Get_ccHeaderLineCount() const;
    void Set_ccHeaderLineCount(int value);
    bool Get_LogCommands() const;
    void Set_LogCommands(bool value);
    bool Get_LogMethods() const;
    void Set_LogMethods(bool value);
    //!
    //! @brief Печать линии методом печати графической линии.
    //!
    //! Каждый бит во входных данных соответствует пикселю в точке.
    //!
    //!
    //! @par Используемые свойства:
    //!  - #LineData - Строка символов, в которую были преобразованы точки линии.
    //!  - #LineNumber - Задает высоту (количество повторов линии по вертикали)
    //!  - #SwapBytesMode - Режим переворачивания байт
    //!  - #LineSwapBytes - Переворачивать байты(если SwapBytesMode - 2)
    //!  - #DelayedPrint - Отложенная печать
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintLine();
    //!
    //! @brief Выравнивание штрих-кода
    //!
    //! Задает выравнивание штрих-кода
    //!
    //!
    //! @par Используется методами:
    //!   #PrintBarcodeGraph, #PrintBarcodeLine.
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeAlignment, #Set_BarcodeAlignment
    //!
    DOXYGEN_PROPERTY(TBarcodeAlignment BarcodeAlignment)
    //!
    //! @brief Возвращает значение свойства #BarcodeAlignment
    //! @return BarcodeAlignment
    //! @relates BarcodeAlignment
    //!
    TBarcodeAlignment Get_BarcodeAlignment() const;
    //!
    //! @brief Устанавливает значение свойства #BarcodeAlignment
    //! @return BarcodeAlignment
    //! @relates BarcodeAlignment
    //!
    void Set_BarcodeAlignment(TBarcodeAlignment value);
    // IDrvFR48
    int JournalClear();
    int JournalGetRow();
    bool Get_JournalEnabled() const;
    void Set_JournalEnabled(bool value);
    std::string Get_JournalRow() const;
    int Get_JournalRowCount() const;
    int Get_JournalRowNumber() const;
    void Set_JournalRowNumber(int value);
    std::string Get_JournalText() const;
    int JournalInit();
    //!
    //! @brief Поиск устройства
    //!
    //! Ищет устройство в зависимости от свойства #ConnectionType
    //! если #TConnectionType::Tcp - слушает широковещательную рассылку от ККТ  в сети.
    //! Иначе пытается установить соединение по протоколу ФР со всеми COM/tty портами в системе
    //!
    //! @par Используемые свойства:
    //!  - #ConnectionType
    //!
    //! @par Модифицируемые свойства:
    //!  - #ConnectionURI - URI обнаруженного устройства
    //!  - #IPAddress - IP адрес обнаруженного устройства
    //!  - #ComputerName - IP адрес обнаруженного устройства
    //!  - #TCPPort - TCP порт обнаруженного устройства
    //!  - #ComNumber - индекс COM порта в системе
    //!  - #BaudRate - скорость соединения по COM
    //!
    int FindDevice();
    int LoadParams();

    //!
    //! @brief Конец документа.
    //!
    //! Этот метод печатает клише с рекламным текстом или без в соответствии с настройками свойства
    //! FinishDocumentMode и отрезает чек.
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #FinishDocumentMode - режим завершения документа.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int FinishDocument();

    //!
    //! @brief Печать рекламного текста.
    //!
    //! Этот метод печатает рекламный текст исходя из собственных настроек ККМ.
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintTrailer();

    //!
    //! @brief Режим завершения документа
    //!
    //! @par Методы доступа:
    //!   #Get_FinishDocumentMode, #Set_FinishDocumentMode
    //!
    //! @par Используется методом:
    //!   #FinishDocument
    //!
    DOXYGEN_PROPERTY(TFinishDocumentMode FinishDocumentMode)
    //!
    //! @brief Возвращает значение свойства #FinishDocumentMode
    //! @return FinishDocumentMode
    //! @relates FinishDocumentMode
    //!
    TFinishDocumentMode Get_FinishDocumentMode() const;
    //!
    //! @brief Устанавливает значение свойства #FinishDocumentMode
    //! @param value Новое значение FinishDocumentMode
    //! @relates FinishDocumentMode
    //!
    void Set_FinishDocumentMode(TFinishDocumentMode value);

    // IDrvFR48
    int Get_SerialNumberAsInteger() const;
    int Get_INNAsInteger() const;
    std::time_t Get_ECRDate() const;
    void Set_ECRDate(std::time_t value);
    std::time_t Get_ECRTime() const;
    void Set_ECRTime(std::time_t value);
    //!
    //! @brief Печать текста штрих-кода
    //!
    //! Задает способ печати текста штрихкода. Допустимые значения свойства:
    //!
    //! 0 - не печатать
    //! 1 - печатать снизу
    //! 2 - печатать сверху
    //! 3 - печатать сверху и снизу
    //!
    //! @par Используется методами:
    //!   #PrintBarcodeGraph, #PrintBarcodeLine.
    //!
    //! @par Методы доступа:
    //!   #Get_PrintBarcodeText, #Set_PrintBarcodeText
    //!
    DOXYGEN_PROPERTY(int PrintBarcodeText)
    //!
    //! @brief Возвращает значение свойства #PrintBarcodeText
    //! @return PrintBarcodeText
    //! @relates PrintBarcodeText
    //!
    int Get_PrintBarcodeText() const;
    //!
    //! @brief Устанавливает значение свойства #PrintBarcodeText
    //! @return PrintBarcodeText
    //! @relates PrintBarcodeText
    //!
    void Set_PrintBarcodeText(int value);
    int WaitForCheckClose();
    int GetSummFactor();
    int GetQuantityFactor();
    int ReadDeviceMetrics();
    int ReadEcrStatus();
    int SaveState();
    int RestoreState();
    bool Get_HasCashControlLicense() const;
    int Get_BufferingType() const;
    void Set_BufferingType(int value);

    //!
    //! @brief Имя файла
    //!
    //! Имя/путь файла с в зависимости от контекста (изображением/шрифт и др.)
    //!
    //! @par Используется методом:
    //!   #LoadImage, #FNSaveArchive, #LoadFont, #ImportTables, #ExportTables
    //!
    //! @par Методы доступа:
    //!   #Get_FileName, #Set_FileName
    //!
    DOXYGEN_PROPERTY(std::string FileName)
    //!
    //! @brief Возвращает значение свойства #FileName
    //! @return FileName
    //! @relates FileName
    //!
    std::string Get_FileName() const;
    //!
    //! @brief Устанавливает значение свойства #FileName
    //! @param value Новое значение FileName
    //! @relates FileName
    //!
    void Set_FileName(const std::string& value);

    //!
    //! @brief Загрузить картинку
    //!
    //! Загружает картинку из файла.
    //!
    //! @note Работает в любом режиме, не меняет режим
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #FileName - Путь к файлу с изображением,
    //!  - #CenterImage - центрировать изображение,
    //!  - #ShowProgress - показывать прогресс.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #FirstLineNumber - Номер линии пикселей исходной картинки, которая будет первой в
    //!  диапазоне выводимых на печать.
    //!  - #LastLineNumber - Номер линии пикселей исходной картинки, которая будет последней в
    //!  диапазоне выводимых на печать.
    //!
    //! @return Код ошибки
    //!
    int LoadImage();
    int GetCashAcceptorStatus();
    int GetCashAcceptorRegisters();
    int CashAcceptorReport();
    bool Get_FeedAfterCut() const;
    void Set_FeedAfterCut(bool value);
    int Get_FeedLineCount() const;
    void Set_FeedLineCount(int value);
    //! @brief Номер версии драйвера
    //!
    //! @par Методы доступа:
    //!   #Get_DriverMajorVersion
    //!
    DOXYGEN_PROPERTY(uint32_t DriverMajorVersion)
    //!
    //! @brief Возвращает значение свойства #DriverMajorVersion
    //! @return DriverMajorVersion
    //! @relates DriverMajorVersion
    //!
    uint32_t Get_DriverMajorVersion() const;
    //!
    //! @brief Номер подверсии драйвера
    //!
    //! @par Методы доступа:
    //!   #Get_DriverMinorVersion
    //!
    DOXYGEN_PROPERTY(uint32_t DriverMinorVersion)
    //!
    //! @brief Возвращает значение свойства #DriverMinorVersion
    //! @return DriverMinorVersion
    //! @relates DriverMinorVersion
    //!
    uint32_t Get_DriverMinorVersion() const;
    //!
    //! @brief Номер релиза драйвера
    //!
    //! @par Методы доступа:
    //!   #Get_DriverRelease
    //!
    DOXYGEN_PROPERTY(uint32_t DriverRelease)
    //!
    //! @brief Возвращает значение свойства #DriverRelease
    //! @return DriverRelease
    //! @relates DriverRelease
    //!
    uint32_t Get_DriverRelease() const;
    //! @brief Номер сборки драйвера
    //!
    //! @par Методы доступа:
    //!   #Get_DriverBuild
    //!
    DOXYGEN_PROPERTY(uint32_t DriverBuild)
    //!
    //! @brief Возвращает значение свойства #DriverBuild
    //! @return DriverBuild
    //! @relates DriverBuild
    //!
    uint32_t Get_DriverBuild() const;
    //!
    //! @brief Очистить код ошибки
    //!
    //! Устанавливает значения свойств #ResultCode и #ResultCodeDescription в 0 и "Ошибок нет"
    //!
    //! @return Код ошибки
    //!
    int ClearResult();
    int MasterPayClearBuffer();
    int MasterPayAddTextBlock();
    int MasterPayCreateMac();
    std::string Get_CashControlProtocols() const;
    //!
    //! @brief Загрузить блок данных.
    //!
    //! Загружает блок данных двухмерного штрихкода для дальнейшей печати методом #Print2DBarcode
    //!
    //!
    //! @par Используемые свойства:
    //!  - #Password - Пароль для исполнения метода драйвера
    //!  - #BlockType - Тип блока (0 - данные двухмерного штрих-кода)
    //!  - #BlockNumber - Порядковый номер блока (0-127)
    //!  - #BlockData - данные, допустимый размер 1-64 байта
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int LoadBlockData();
    //!
    //! @brief Тип блока
    //!
    //! Тип блока данных
    //!   0 - данные двухмерного штрих-кода
    //!   1 - данные TLV для последующей отправки командой FF64
    //!
    //! @par Используется методом:
    //!   #LoadBlockData
    //!
    //! @par Методы доступа:
    //!   #Get_BlockType, #Set_BlockType
    //!
    DOXYGEN_PROPERTY(int BlockType)
    //!
    //! @brief Возвращает значение свойства #BlockType
    //! @return BlockType
    //! @relates BlockType
    //!
    int Get_BlockType() const;
    //!
    //! @brief Устанавливает значение свойства #BlockType
    //! @param value Новое значение BlockType
    //! @relates BlockType
    //!
    void Set_BlockType(int value);
    //!
    //! @brief Номер блока
    //!
    //! Порядковый номер блока данных
    //!
    //! @par Используется методом:
    //!   #LoadBlockData
    //!
    //! @par Методы доступа:
    //!   #Get_BlockNumber, #Set_BlockNumber
    //!
    DOXYGEN_PROPERTY(int BlockNumber)
    //!
    //! @brief Возвращает значение свойства #BlockNumber
    //! @return BlockNumber
    //! @relates BlockNumber
    //!
    int Get_BlockNumber() const;
    //!
    //! @brief Устанавливает значение свойства #BlockNumber
    //! @param value Новое значение BlockNumber
    //! @relates BlockNumber
    //!
    void Set_BlockNumber(int value);
    //!
    //! @brief Блок данных для загрузки, в виде HEX строки
    //!
    //! HEX строка, при передаче преобразуется в двоичные данные и помещается в #BlockData
    //!
    //! @par Методы доступа:
    //!   #Get_BlockDataHex, #Set_BlockDataHex
    //!
    DOXYGEN_PROPERTY(std::string BlockDataHex)
    //!
    //! @brief Возвращает значение свойства #BlockDataHex
    //! @return BlockDataHex
    //! @relates BlockDataHex
    //!
    std::string Get_BlockDataHex() const;
    //!
    //! @brief Устанавливает значение свойства #BlockDataHex
    //! @param value Новое значение BlockDataHex
    //! @relates BlockDataHex
    //!
    void Set_BlockDataHex(const std::string& value);
    //!
    //! @brief @see Set_LogOn
    //!
    int Get_LogMaxFileSize() const;
    //!
    //! @brief @see Set_LogOn
    //!
    void Set_LogMaxFileSize(int value);
    //!
    //! @brief @see Set_LogOn
    //!
    int Get_LogMaxFileCount() const;
    //!
    //! @brief @see Set_LogOn
    //!
    void Set_LogMaxFileCount(int value);
    TBinaryConversion Get_BinaryConversion() const;
    void Set_BinaryConversion(TBinaryConversion value);
    TCodePage Get_CodePage() const;
    void Set_CodePage(TCodePage value);
    bool Get_PrintJournalBeforeZReport() const;
    void Set_PrintJournalBeforeZReport(bool value);
    int GetEKLZCode3Report();
    int Get_TransmitStatus() const;
    int Get_TransmitQueueSize() const;
    int Get_TransmitSessionNumber() const;
    int Get_TransmitDocumentNumber() const;
    int ReadModemParameter();
    int WriteModemParameter();
    int Get_ParameterNumber() const;
    void Set_ParameterNumber(int value);
    std::string Get_ParameterValue() const;
    void Set_ParameterValue(const std::string& value);
    bool Get_TranslationEnabled() const;
    void Set_TranslationEnabled(bool value);
    int Get_ModelIndex() const;
    void Set_ModelIndex(int value);
    int Get_ModelParamIndex() const;
    void Set_ModelParamIndex(int value);

    //!
    //! @brief Количество параметров модели
    //!
    //! Количество параметров модели. Доступно только для чтения
    //!
    //! @par Методы доступа:
    //!   #Get_ModelParamCount
    //!
    DOXYGEN_PROPERTY(int ModelParamCount)
    //!
    //! @brief Возвращает значение свойства #ModelParamCount
    //! @return ModelParamCount
    //!
    int Get_ModelParamCount() const;
    int GetPortNames();
    int Get_ReceiptOutputType() const;
    int OutputReceipt();
    void Set_ReceiptOutputType(int value);
    int Sale2();

    //!
    //! @brief Печать клише.
    //!
    //! Метод служит для печати клише.
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintCliche();
    //!
    //! @brief Печать штрих-кода линией
    //!
    //! Метод печатает штрих-код при помощи команды печати линии.
    //!
    //!
    //! @par Используемые свойства:
    //!  - #BarCode - Данные штрих-кода. Ширина данных зависит от принтера.
    //!  - #LineNumber - Задает высоту штрих-кода в точках.
    //!  - #BarcodeType- Задает тип штрих-кода.
    //!  - #BarWidth - Задает высоту штрих-кода в точках.
    //!  - #BarcodeAlignment - Задает выравнивание штрих-кода.
    //!  - #PrintBarcodeText - Свойство задает способ печати текста штрих-кода
    //!  - #FontType - Шрифт для печати текста штрих-кода
    //!  - #SwapBytesMode - Режим переворачивания байт
    //!  - #LineSwapBytes - Переворачивать байты(если SwapBytesMode - 2)
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintBarcodeLine();
    int PrintBarcodeGraph();

    //!
    //! @brief Тип штрих-кода
    //!
    //! Задает тип штрих-кода. Допустимые значения:
    //!
    //! Для методов #PrintBarcodeGraph, #PrintBarcodeLine:
    //!
    //! | Значение свойства | Тип штрих-кода |
    //! |-------------------|------------------------------------------------|
    //! | 0                 | Code128A       |
    //! | 1                 | Code128B       |
    //! | 2                 | Code128C       |
    //! | 3                 | QR code        |
    //! | 4                 | Code39         |
    //! | 5                 | EAN13/8        |
    //!
    //! Значения свойства для метода #Print2DBarcode:
    //!
    //! | Значение свойства | Тип штрих-кода |
    //! |-------------------|------------------------------------------------|
    //! | 0                 | PDF 417        |
    //! | 1                 | DATAMATRIX     |
    //! | 2                 | AZTEC          |
    //! | 3                 | QR code        |
    //!
    //! @par Используется методами:
    //!   #PrintBarcodeGraph, #PrintBarcodeLine, #Print2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeType, #Set_BarcodeType
    //!
    DOXYGEN_PROPERTY(int BarcodeType)
    //!
    //! @brief Возвращает значение свойства #BarcodeType
    //! @return BarcodeType
    //! @relates BarcodeType
    //!
    int Get_BarcodeType() const;
    //!
    //! @brief Устанавливает значение свойства #BarcodeType
    //! @return BarcodeType
    //! @relates BarcodeType
    //!
    void Set_BarcodeType(int value);
    std::string Get_BarcodeTypes() const;
    std::string Get_BarcodeAlignments() const;
    //!
    //! @brief Ширина вертикальной линии в штрих-коде
    //!
    //! Задает ширину штриха в точках. Рекомендуемое значение – 2.
    //!
    //!
    //! @par Используется методами:
    //!   #PrintBarcodeGraph, #PrintBarcodeLine.
    //!
    //! @par Методы доступа:
    //!   #Get_BarWidth, #Set_BarWidth
    //!
    DOXYGEN_PROPERTY(int BarWidth)
    //!
    //! @brief Возвращает значение свойства #BarWidth
    //! @return BarWidth
    //! @relates BarWidth
    //!
    int Get_BarWidth() const;
    //!
    //! @brief Устанавливает значение свойства #BarWidth
    //! @return BarWidth
    //! @relates BarWidth
    //!
    void Set_BarWidth(int value);

    //!
    //! @brief Поддерживается короткий запрос состояния.
    //!
    //! Возвращает True, если устройством поддерживается команда GetShortECRStatus, в противном
    //! случае возвращает False.
    //!
    //! @par Модифицируется методами:
    //!   #GetDeviceMetrics
    //!
    //! @par Методы доступа:
    //!   #Get_CapGetShortECRStatus
    //!
    DOXYGEN_PROPERTY(bool CapGetShortECRStatus)
    //!
    //! @brief Возвращает значение свойства #CapGetShortECRStatus
    //! @return CapGetShortECRStatus
    //! @relates CapGetShortECRStatus
    //!
    bool Get_CapGetShortECRStatus() const;

    //!
    //! @brief Задержка ожидания печати.
    //!
    //! Задержка в мс.
    //! Значение по умолчанию: 1000.
    //!
    //! @par Используется методом:
    //!   #WaitForPrinting
    //!
    //! @par Методы доступа:
    //!   #Get_WaitForPrintingDelay, #Set_WaitForPrintingDelay
    //!
    DOXYGEN_PROPERTY(int WaitForPrintingDelay)
    //!
    //! @brief Возвращает значение свойства #WaitForPrintingDelay
    //! @return WaitForPrintingDelay
    //! @relates WaitForPrintingDelay
    //!
    int Get_WaitForPrintingDelay() const;
    //!
    //! @brief Устанавливает значение свойства #WaitForPrintingDelay
    //! @param value Новое значение WaitForPrintingDelay
    //! @relates WaitForPrintingDelay
    //!
    void Set_WaitForPrintingDelay(int value);

    //!
    //! @brief Сброс ККМ.
    //!
    //! Метод выполняет следующую последовательность действий
    //! - Выполняет команду ожидания печати (#WaitForPrinting).
    //! - Запрашивает состояние ККТ и анализирует режим ККТ.
    //!   Далее приведены значения режимов и действия программы:
    //!
    //!   |             Режим                     |          Действие         | Название команды     |
    //!   |---------------------------------------|---------------------------|---------------------------------------------|
    //!   | 1 (Выдача данных)                     | Прерывает выдачу данных   | #InterruptDataStream |
    //!   | 6 (Ожидание подтверждения вводе даты) | Подтверждает дату         | #ConfirmDate         |
    //!   | 8 (Открытый документ)                 | Отменяет чек              | #CancelCheck         |
    //!   | 10 (Тестовый прогон)                  | Прерывает тестовый прогон | #InterruptTest       |
    //!   | 11, 12, 14                            | Ничего не делает          |                      |
    //!   | Другие значения режима ККТ            | Выход из метода           |                      |
    //!
    //! - В случае возникновения ошибки возвращает значение -35. Устанавливает значения свойств:
    //!         #ResultCode = -35, #ResultCodeDescription = «Не удалось сбросить ККМ».
    //! - Если цикл повторился менее или равно 10 раз, возвращается к пункту 1)
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @return Код ошибки
    //!
    int ResetECR();
    //!
    //! @brief Распечатать отчёт с гашением из буфера.
    //!
    //! Метод печатает предварительно сохраненный в буфер методом #PrintZReportInBuffer отчет с гашением.
    //! Если в буфере нет сохраненного отчета, выдается ошибка(209) "Нет данных в буфере".
    //!
    //! @note Не меняет режима ККМ. При печати ККТ переходит в режим 0.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int PrintZReportFromBuffer();
    //!
    //! @brief Снять отчёт с гашением в буфер.
    //!
    //! Метод выполняет отчет с гашением и сохраняет его в буфер.
    //! Если внутренний буфер ККТ заполнен, выдается ошибка 75 (4Bh), “Буфер чека переполнен”
    //! Распечатать отчет из буфера можно методом @see PrintZReportFromBuffer
    //!
    //! @note Работает в режимах 2 и 3. Переводит ККМ в режим 4.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    int PrintZReportInBuffer();
    //!
    //! @brief Переворачивать байты при печати линии
    //!
    //! 0x80 <-> 0x01, 0x40 <-> 0x02 и.т.д.
    //!
    //! @par Используется методами:
    //!   #PrintBarcodeLine, #PrintLine
    //!
    //! @par Методы доступа:
    //!   #Get_LineSwapBytes, #Set_LineSwapBytes
    //!
    DOXYGEN_PROPERTY(bool LineSwapBytes)
    //!
    //! @brief Возвращает значение свойства #LineSwapBytes
    //! @return LineSwapBytes
    //! @relates LineSwapBytes
    //!
    bool Get_LineSwapBytes() const;
    //!
    //! @brief Устанавливает значение свойства #LineSwapBytes
    //! @return LineSwapBytes
    //! @relates LineSwapBytes
    //!
    void Set_LineSwapBytes(bool value);
    //!
    //! @brief @see Set_LogOn
    //!
    int Get_LogFileMaxSize() const;
    //!
    //! @brief @see Set_LogOn
    //!
    void Set_LogFileMaxSize(int value);
    int ClearPrintBuffer();
    int ReadPrintBufferLine();
    int ReadPrintBufferLineNumber();
    int Get_PrintBufferFormat() const;
    void Set_PrintBufferFormat(int value);
    int Get_PrintBufferLineNumber() const;
    int Get_NakCount() const;
    void Set_NakCount(int value);
    int Get_MaxAnswerReadCount() const;
    int Get_MaxCommandSendCount() const;
    int Get_MaxENQSendCount() const;
    void Set_MaxAnswerReadCount(int value);
    void Set_MaxCommandSendCount(int value);
    void Set_MaxENQSendCount(int value);
    //!
    //! @brief Графическая информация HEX
    //!
    //! Преобразуем преобразует строку вида "AA BB CC" в двоичные данные и помещает в #LineData
    //!
    //! @par Методы доступа:
    //!   #Get_LineDataHex, #Set_LineDataHex
    //!
    DOXYGEN_PROPERTY(std::string LineDataHex)
    //!
    //! @brief Возвращает значение свойства #LineDataHex
    //! @return LineDataHex
    //! @relates LineDataHex
    //!
    std::string Get_LineDataHex() const;
    //! @brief Устанавливает значение свойства #LineDataHex
    //! @param value Новое значение LineDataHex
    //! @relates LineDataHex
    //!
    void Set_LineDataHex(const std::string& value);
    int Get_CommandRetryCount() const;
    void Set_CommandRetryCount(int value);

    //!
    //! @brief Центрировать картинку
    //!
    //! Задает способ центрирования картинки. TRUE – с центрированием, FALSE – без центрирования.
    //!
    //! @par Используется методом:
    //!   #LoadImage
    //!
    //! @par Методы доступа:
    //!   #Get_CenterImage, #Set_CenterImage
    //!
    DOXYGEN_PROPERTY(bool CenterImage)
    //!
    //! @brief Возвращает значение свойства #CenterImage
    //! @return CenterImage
    //! @relates CenterImage
    //!
    bool Get_CenterImage() const;
    //!
    //! @brief Устанавливает значение свойства #CenterImage
    //! @param value Новое значение CenterImage
    //! @relates CenterImage
    //!
    void Set_CenterImage(bool value);

    //!
    //! @brief Показывать прогресс
    //!
    //! Показывать  окно  прогресса во  время  загрузки  изображения  (TRUE – показывать, FALSE – не
    //! показывать).
    //!
    //! @par Используется методом:
    //!   #LoadImage
    //!
    //! @par Методы доступа:
    //!   #Get_ShowProgress, #Set_ShowProgress
    //!
    DOXYGEN_PROPERTY(bool ShowProgress)
    //!
    //! @brief Возвращает значение свойства #ShowProgress
    //! @return ShowProgress
    //! @relates ShowProgress
    //!
    bool Get_ShowProgress() const;
    //!
    //! @brief Устанавливает значение свойства #ShowProgress
    //! @param value Новое значение ShowProgress
    //! @relates ShowProgress
    //!
    void Set_ShowProgress(bool value);

    int OpenNonfiscalDocument();
    int CloseNonFiscalDocument();
    int Get_AttributeNumber() const;
    std::string Get_AttributeValue() const;
    int PrintAttribute();
    void Set_AttributeNumber(int value);
    void Set_AttributeValue(const std::string& value);
    int Get_ModelID() const;

    //! @brief Значение параметра модели.
    //!
    //! @par Методы доступа:
    //!   #Get_ModelParamValue
    //!
    //! @par Moдифицируется методом:
    //!   #ReadModelParamValue
    //!
    DOXYGEN_PROPERTY(int ModelParamValue)
    //! @brief Возвращает значение свойства #ModelParamValue
    //! @return ModelParamValue
    //! @relates ModelParamValue
    //!
    int Get_ModelParamValue() const;
    //!
    //! @brief Прочитать параметр модели
    //!
    //! Метод записывает значение параметра #ModelParamNumber модели ККТ в свойство
    //! #ModelParamValue.
    //!
    //! @par Используемые свойства:
    //!  - #ModelParamNumber - Номер параметра модели.
    //!
    //! @par Модифицируемые свойства:
    //!  - #ModelParamValue - Значение параметра модели.
    //!
    //! @return Код ошибки
    //!
    int ReadModelParamValue();
    void Set_ModelID(int value);
    //! @brief Номер параметра модели
    //!
    //! @par Методы доступа:
    //!   #Get_ModelParamNumber, #Set_ModelParamNumber
    //!
    //! @par Используется методом:
    //!   #ReadModelParamValue
    DOXYGEN_PROPERTY(int ModelParamNumber)
    //! @brief Возвращает значение свойства #ModelParamNumber
    //!
    //! @return ModelParamNumber
    //! @relates ReadModelParamValue
    //!
    int Get_ModelParamNumber() const;
    //! @brief Устанавливает значение свойства #ModelParamNumber
    //!
    //! @relates ReadModelParamValue
    //!
    //! @param value Новое значение #ModelParamNumber
    //!
    void Set_ModelParamNumber(int value);
    int LoadCashControlParams();
    //!
    //! @brief Прочитать/Установить состояние соединения
    //!
    //! @par Методы доступа:
    //!   #Get_Connected
    //!
    DOXYGEN_PROPERTY(bool Connected)
    //!
    //! @brief Возвращает значение свойства #Connected
    //! (true - подключен к устройству, false- не подключен)
    //! @return Connected
    //! @relates Connected
    //!
    bool Get_Connected() const;
    //!
    //! @brief Устанавливает значение свойства #Connected
    //! При установке этого свойства в true Вызывается метод @see Connect
    //! При установке false вызывается @see Disconnect
    //! @param value Новое значение Connected
    //!
    void Set_Connected(bool value);
    uint32_t Get_EnteredTaxPassword() const;
    int Get_BanknoteCount() const;
    int Get_BanknoteType() const;
    int Get_CashAcceptorPollingMode() const;
    int Get_Poll1() const;
    int Get_Poll2() const;
    void Set_BanknoteType(int value);
    int ReadBanknoteCount();
    uint32_t Get_LDSysAdminPassword() const;
    void Set_LDSysAdminPassword(uint32_t value);
    int PrintOperationalTaxReport();
    bool Get_CapOpenCheck() const;
    std::string Get_PollDescription() const;

    //!
    //! @brief Таймаут подключения.
    //!
    //! @par Используется методом:
    //!   #WaitForPrinting
    //!
    //! @par Методы доступа:
    //!   #Get_ConnectionTimeout, #Set_ConnectionTimeout
    //!
    DOXYGEN_PROPERTY(int ConnectionTimeout)
    //!
    //! @brief Возвращает значение свойства #ConnectionTimeout
    //! @return ConnectionTimeout
    //! @relates ConnectionTimeout
    //!
    int Get_ConnectionTimeout() const;
    //!
    //! @brief Устанавливает значение свойства #ConnectionTimeout
    //! @param value Новое значение ConnectionTimeout
    //! @relates ConnectionTimeout
    //!
    void Set_ConnectionTimeout(int value);

    int WaitConnection();
    //! @brief Описание параметра модели
    //!
    //! Содержит описание параметра модели.
    //!
    //! @par Методы доступа:
    //!   #Get_ModelParamDescription
    //!
    //! @par Используется методом:
    //!   #ReadModelParamDescription
    //!
    //! @relates ModelParamValue
    DOXYGEN_PROPERTY(std::string ModelParamDescription)
    //! @brief Возвращает значение свойства #ModelParamDescription
    //! @relates #ModelParamDescription
    //! @return #ModelParamDescription
    //!
    std::string Get_ModelParamDescription() const;
    //!
    //! @brief Прочитать описание параметра модели
    //!
    //! @par Используемые свойства:
    //!  - #ModelParamNumber - Номер параметра модели.
    //!
    //! @par Модифицируемые свойства:
    //!  - #ModelParamDescription - Описание параметра модели.
    //!
    //! @return Код ошибки
    //!
    int ReadModelParamDescription();
    //! @brief Версия драйвера
    //!
    //! Cтрока с версией драйвера.
    //!
    //! @par Методы доступа:
    //!   #Get_DriverVersion
    //!
    DOXYGEN_PROPERTY(std::string DriverVersion)
    //!
    //! @brief Возвращает значение свойства #DriverVersion
    //! @return DriverVersion
    //! @relates DriverVersion
    //!
    std::string Get_DriverVersion() const;
    int Get_HRIPosition() const;
    int PrintBarcodeUsingPrinter();
    void Set_HRIPosition(int value);
    std::string Get_KPKStr() const;
    int CloseCheckWithKPK();
    int ReadEKLZActivizationParams();
    int GetShortReportInDatesRange();
    int GetShortReportInSessionRange();
    int ReadLastReceipt();
    int ReadLastReceiptLine();
    int ReadLastReceiptMac();
    std::string Get_TextBlock() const;
    int Get_TextBlockNumber() const;
    void Set_TextBlock(const std::string& value);
    void Set_TextBlockNumber(int value);
    // TStatusCommand Get_StatusCommand() const;
    // void Set_StatusCommand(const TStatusCommand& value);
    int BeginDocument();
    int EndDocument();
    std::string Get_PosControlReceiptSeparator() const;
    void Set_PosControlReceiptSeparator(const std::string& value);
    //!
    //! @brief Длина данных штрих-кода
    //!
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeDataLength, #Set_BarcodeDataLength
    //!
    DOXYGEN_PROPERTY(int BarcodeDataLength)
    //!
    //! @brief Возвращает значение свойства #BarcodeDataLength
    //! @return BarcodeDataLength
    //! @relates BarcodeDataLength
    //!
    int Get_BarcodeDataLength() const;
    //!
    //! @brief Параметр штрих-кода 1
    //!
    //! Параметр штрих-кода @see Print2DBarcode
    //!
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode, #LoadAndPrint2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeParameter1, #Set_BarcodeParameter1
    //!
    DOXYGEN_PROPERTY(int BarcodeParameter1)
    //!
    //! @brief Возвращает значение свойства #BarcodeParameter1
    //! @return BarcodeParameter1
    //! @relates BarcodeParameter1
    //!
    int Get_BarcodeParameter1() const;
    //!
    //! @brief Параметр штрих-кода 2
    //!
    //! Параметр штрих-кода @see Print2DBarcode
    //!
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode, #LoadAndPrint2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeParameter2, #Set_BarcodeParameter2
    //!
    DOXYGEN_PROPERTY(int BarcodeParameter2)
    //!
    //! @brief Возвращает значение свойства #BarcodeParameter2
    //! @return BarcodeParameter2
    //! @relates BarcodeParameter2
    //!
    int Get_BarcodeParameter2() const;
    //!
    //! @brief Параметр штрих-кода 3
    //!
    //! Параметр штрих-кода @see Print2DBarcode
    //!
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode, #LoadAndPrint2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeParameter3, #Set_BarcodeParameter3
    //!
    DOXYGEN_PROPERTY(int BarcodeParameter3)
    //!
    //! @brief Возвращает значение свойства #BarcodeParameter2
    //! @return BarcodeParameter2
    //! @relates BarcodeParameter2
    //!
    int Get_BarcodeParameter3() const;
    //!
    //! @brief Параметр штрих-кода 4
    //!
    //! Параметр штрих-кода @see Print2DBarcode
    //!
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode, #LoadAndPrint2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeParameter4, #Set_BarcodeParameter4
    //!
    DOXYGEN_PROPERTY(int BarcodeParameter4)
    //!
    //! @brief Возвращает значение свойства #BarcodeParameter4
    //! @return BarcodeParameter4
    //! @relates BarcodeParameter4
    //!
    int Get_BarcodeParameter4() const;
    //!
    //! @brief Параметр штрих-кода 5
    //!
    //! Параметр штрих-кода @see Print2DBarcode
    //!
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode, #LoadAndPrint2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeParameter5, #Set_BarcodeParameter5
    //!
    DOXYGEN_PROPERTY(int BarcodeParameter5)
    //!
    //! @brief Возвращает значение свойства #BarcodeParameter5
    //! @return BarcodeParameter5
    //! @relates BarcodeParameter5
    //!
    int Get_BarcodeParameter5() const;
    // clang-format off
    //!
    //! @brief Печать двухмерного штрих-кода
    //!
    //! Метод печатает двухмерный штрихкод, загруженный ранее c помощью метода #LoadBlockData.
    //!
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль для метода
    //!  - #BarcodeType- Задает тип штрих-кода
    //!  - #BarcodeDataLength - Длина данных штрих-кода
    //!  - #BarcodeStartBlockNumber - Номер начального блока
    //!  - #BarcodeParameter1 - Параметр штрих-кода1
    //!  - #BarcodeParameter2 - Параметр штрих-кода2
    //!  - #BarcodeParameter3 - Параметр штрих-кода3
    //!  - #BarcodeParameter4 - Параметр штрих-кода4
    //!  - #BarcodeParameter5 - Параметр штрих-кода5
    //!  - #BarcodeAlignment - Задает выравнивание штрих-кода
    //!
    //! | Номер параметра | PDF417                 | DATAMATRIX      | AZTEC                  | QR Code                               |
    //! |-----------------|------------------------|-----------------|------------------------|---------------------------------------|
    //! | 1               | Number of  columns     | Encoding scheme | Encoding scheme        | Version,0=auto; 40 (max)              |
    //! | 2               | Number of  rows        | Rotate          | -                      | Mask; 8 (max)                         |
    //! | 3               | Width of  module       | Dot size        | Dot size               | Dot size; 3...8                       |
    //! | 4               | Module height          | Symbol size     | Symbol size            |  -                                    |
    //! | 5               | Error correction level |  -              | Error correction level | Error correction level; 0...3=L,M,Q,H |
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован
    //!
    //! \return Код ошибки
    //!
    // clang-format on
    int Print2DBarcode();
    void Set_BarcodeDataLength(int value);
    //!
    //! @brief Устанавливает значение свойства #BarcodeParameter1
    //! @return BarcodeParameter1
    //! @relates BarcodeParameter1,Print2DBarcode,LoadAndPrint2DBarcode
    //!
    void Set_BarcodeParameter1(int value);
    //!
    //! @brief Устанавливает значение свойства #BarcodeParameter2
    //! @return BarcodeParameter2
    //! @relates BarcodeParameter2,Print2DBarcode,LoadAndPrint2DBarcode
    //!
    void Set_BarcodeParameter2(int value);
    //!
    //! @brief Устанавливает значение свойства #BarcodeParameter3
    //! @return BarcodeParameter3
    //! @relates BarcodeParameter3,Print2DBarcode,LoadAndPrint2DBarcode
    //!
    void Set_BarcodeParameter3(int value);
    //!
    //! @brief Устанавливает значение свойства #BarcodeParameter4
    //! @return BarcodeParameter4
    //! @relates BarcodeParameter4,Print2DBarcode,LoadAndPrint2DBarcode
    //!
    void Set_BarcodeParameter4(int value);
    //!
    //! @brief Устанавливает значение свойства #BarcodeParameter5
    //! @return BarcodeParameter5
    //! @relates BarcodeParameter5,Print2DBarcode,LoadAndPrint2DBarcode
    //!
    void Set_BarcodeParameter5(int value);
    //!
    //! @brief Номер начального блока данных
    //!
    //! Данные двухмерного штрих-кода предварительно загружаются в блоки по 64байта данных.
    //! Всего в ККТ 127 блоков по 64 байта.
    //!
    //! @par Используется методами:
    //!   #Print2DBarcode, #LoadAndPrint2DBarcode
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeStartBlockNumber, #Set_BarcodeStartBlockNumber
    //!
    DOXYGEN_PROPERTY(int BarcodeStartBlockNumber)
    //!
    //! @brief Возвращает значение свойства #BarcodeStartBlockNumber
    //! @return BarcodeStartBlockNumber
    //! @relates BarcodeStartBlockNumber
    //!
    int Get_BarcodeStartBlockNumber() const;
    //!
    //! @brief Устанавливает значение свойства #BarcodeStartBlockNumber
    //! @return BarcodeStartBlockNumber
    //! @relates BarcodeStartBlockNumber
    //!
    void Set_BarcodeStartBlockNumber(int value);
    // clang-format off
    //!
    //! @brief Загрузка и печать двухмерного штрих-кода.
    //!
    //! Метод загружает и печатает двухмерный штрихкод
    //!
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль для метода
    //!  - #BarCode - Данные штрихкода
    //!  - #BarcodeType- Задает тип штрих-кода
    //!  - #BarcodeStartBlockNumber - Номер начального блока для печати
    //!  - #BlockNumber - Номер начального блока для загрузки
    //!  - #BarcodeParameter1 - Параметр штрих-кода1
    //!  - #BarcodeParameter2 - Параметр штрих-кода2
    //!  - #BarcodeParameter3 - Параметр штрих-кода3
    //!  - #BarcodeParameter4 - Параметр штрих-кода4
    //!  - #BarcodeParameter5 - Параметр штрих-кода5
    //!  - #BarcodeAlignment - Задает выравнивание штрих-кода
    //!
    //! | Номер параметра | PDF417                 | DATAMATRIX      | AZTEC                  | QR Code                               |
    //! |-----------------|------------------------|-----------------|------------------------|---------------------------------------|
    //! | 1               | Number of  columns     | Encoding scheme | Encoding scheme        | Version,0=auto; 40 (max)              |
    //! | 2               | Number of  rows        | Rotate          | -                      | Mask; 8 (max)                         |
    //! | 3               | Width of  module       | Dot size        | Dot size               | Dot size; 3...8                       |
    //! | 4               | Module height          | Symbol size     | Symbol size            |  -                                    |
    //! | 5               | Error correction level |  -              | Error correction level | Error correction level; 0...3=L,M,Q,H |
    //!
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован
    //!
    //! \return Код ошибки
    //!
    // clang-format on
    int LoadAndPrint2DBarcode();
    int Get_ExciseCode() const;
    void Set_ExciseCode(int value);
    int ExcisableOperation();
    int ReadReportBufferLine();
    int Get_SaveSettingsType() const;
    void Set_SaveSettingsType(int value);
    int ReadParams();
    std::string Get_ModelNames() const;
    int Get_ModelsCount() const;
    int Get_FMFlagsEx() const;
    int Get_FMMode() const;
    bool Get_IsASPDMode() const;
    bool Get_IsCorruptedFiscalizationInfo() const;
    bool Get_IsCorruptedFMRecords() const;
    //!
    //! @brief Переносить строки при печати
    //!
    //! @note для моделей, поддерживаемых перенос
    //!
    //! @par Используется методами:
    //!   #PrintString, #PrintStringWithFont, #PrintWideString
    //!
    //! @par Методы доступа:
    //!   #Get_CarryStrings, #Set_CarryStrings
    //!
    DOXYGEN_PROPERTY(bool CarryStrings)
    //!
    //! @brief Возвращает значение свойства #CarryStrings
    //! @return CarryStrings
    //! @relates CarryStrings
    //!
    bool Get_CarryStrings() const;
    //!
    //! @brief Отложенная печать
    //!
    //! Если данный флаг установлен при печати строки, линии или графики внутри чека, то печать
    //! соответствующего элемента будет производиться после окончания печати чека. Вне чека при
    //! установленном флаге DelayedPrint печать производиться не будет.
    //!
    //! @note для моделей, поддерживаемых отложенную печать
    //!
    //! @par Используется методами:
    //!   #PrintString, #PrintStringWithFont, #PrintWideS
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DelayedPrint, #Set_DelayedPrint
    //!
    DOXYGEN_PROPERTY(bool DelayedPrint)
    //!
    //! @brief Возвращает значение свойства #DelayedPrint
    //! @return DelayedPrint
    //! @relates DelayedPrint
    //!
    bool Get_DelayedPrint() const;
    //!
    //! @brief Устанавливает значение свойства #CarryStrings
    //! @return CarryStrings
    //! @relates CarryStrings
    //!
    void Set_CarryStrings(bool value);
    //!
    //! @brief Устанавливает значение свойства #DelayedPrint
    //! @return DelayedPrint
    //! @relates DelayedPrint
    //!
    void Set_DelayedPrint(bool value);

    //!
    //! @brief Получить денежный регистр доп.
    //!
    //! Запрос содержимого денежного регистра (см. «Инструкцию по эксплуатации»/«Руководство
    //! оператора», раздел «О денежных и операционных регистрах»).
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #RegisterNumber - номер денежного регистра(0 - 65535).
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #ContentsOfCashRegister - содержимое денежного регистра,
    //!  - #NameCashRegEx - наименование денежного регистра.
    //!
    //! @return Код ошибки
    //!
    int GetCashRegEx();

    int64_t Get_RegBuyRec() const;
    int64_t Get_RegBuyReturnRec() const;
    int64_t Get_RegBuyReturnSession() const;
    int64_t Get_RegBuySession() const;
    int64_t Get_RegSaleRec() const;
    int64_t Get_RegSaleReturnRec() const;
    int64_t Get_RegSaleReturnSession() const;
    int64_t Get_RegSaleSession() const;
    int GetWareBaseCashRegs();
    int Get_WareCode() const;
    void Set_WareCode(int value);

    //!
    //! @brief Снять отчет по кассирам.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!
    //! @return Код ошибки
    //!
    int PrintCashierReport();

    int PrintHourlyReport();
    int PrintWareReport();
    int UpdateWare();
    int CheckFM();
    int RemoveWare();
    int Get_RecordCount() const;
    int Get_CheckingType() const;
    void Set_CheckingType(int value);
    //!
    //! @brief Код ошибки
    //!
    //! @par Используется методами:
    //!  - #ReadErrorDescription
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_ErrorCode, #Set_ErrorCode
    //!
    DOXYGEN_PROPERTY(int ErrorCode)
    //!
    //! @brief Возвращает значение свойства #ErrorCode
    //! @return ErrorCode
    //! @relates ErrorCode
    //!
    int Get_ErrorCode() const;
    //! @brief Устанавливает значение свойства #ErrorCode
    //! @return ErrorCode
    //! @relates ErrorCode
    //!
    void Set_ErrorCode(int value);
    //!
    //! @brief Получить описание ошибки.
    //!
    //! @par Используемые свойства:
    //!  - #ErrorCode - код ошибки
    //!
    //! @par Модифицируемые свойства:
    //!  - #ErrorDescription - текстовое описание ошибки
    //!
    //! @return Код ошибки
    //!
    int ReadErrorDescription();
    //!
    //! @brief Получить описание последней ошибки
    //!
    //! @par Модифицируемые свойства:
    //!  - #ErrorDescription - текстовое описание ошибки
    //!
    //! @note Поддерживается не всеми моделями
    //!
    //! @return Код ошибки
    //!
    int ReadLastErrorDescription();
    int ReadWare();
    bool Get_UseWareCode() const;
    void Set_UseWareCode(bool value);
    bool Get_RequestErrorDescription() const;
    void Set_RequestErrorDescription(bool value);
    //!
    //! @brief Описание ошибки
    //!
    //! @par Используется методами:
    //!  - #ReadErrorDescription
    //!
    //! @par Методы доступа:
    //!   #Get_ErrorDescription
    //!
    DOXYGEN_PROPERTY(std::string ErrorDescription)
    //!
    //! @brief Возвращает значение свойства #ErrorDescription
    //! @return ErrorDescription
    //! @relates ErrorDescription
    //!
    std::string Get_ErrorDescription() const;
    bool Get_AdjustRITimeout() const;
    void Set_AdjustRITimeout(bool value);
    std::string Get_UCodePageText() const;

    //!
    //! @brief Переподключать соединение в случае отсутствия связи.
    //!
    //! @par Методы доступа:
    //!   #Get_ReconnectPort
    //!
    DOXYGEN_PROPERTY(bool ReconnectPort)
    //!
    //! @brief Возвращает значение свойства #ReconnectPort
    //! @return ReconnectPort
    //! @relates ReconnectPort
    //!
    bool Get_ReconnectPort() const;
    //!
    //! @brief Устанавливает значение свойства #ReconnectPort
    //! @param value Новое значение ReconnectPort
    //!
    void Set_ReconnectPort(bool value);
    bool Get_DoNotSendENQ() const;
    void Set_DoNotSendENQ(bool value);
    //!
    //! @brief Режим переворачивания байта
    //!
    //! Режим переворачивания байт при печати графики линией.
    //!     0: Переворачивать
    //!     1: Не переворачивать
    //!     2: Использовать свойство драйвера LineSwapBytes
    //!     3: Использовать настройки модели
    //! @par Используется методами:
    //!   #PrintBarcodeLine, #PrintLine
    //!
    //! @par Методы доступа:
    //!   #Get_SwapBytesMode, #Set_SwapBytesMode
    //!
    DOXYGEN_PROPERTY(int SwapBytesMode)
    //!
    //! @brief Возвращает значение свойства #SwapBytesMode
    //! @return SwapBytesMode
    //! @relates SwapBytesMode
    //!
    int Get_SwapBytesMode() const;
    //!
    //! @brief Устанавливает значение свойства #SwapBytesMode
    //! @return SwapBytesMode
    //! @relates SwapBytesMode
    //!
    void Set_SwapBytesMode(int value);
    int ReadModelParam();
    int InitEEPROM();
    bool Get_CheckEJConnection() const;
    bool Get_CheckFMConnection() const;
    void Set_CheckEJConnection(bool value);
    void Set_CheckFMConnection(bool value);
    int CheckConnection();
    //!
    //! @brief Строка с двоичными данными штрих-кода
    //!
    //! Задает двоичные данные для методов печати штрих-кодов, преобразует строку вида "AA BB CC" в
    //! двоичные данные и помещает в #BarCode в таком случае данные #BarCode будут интерпретированы
    //! как двоичные
    //!
    //! @par Используется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    //! @par Методы доступа:
    //!   #Get_BarcodeHex, #Set_BarcodeHex
    //!
    DOXYGEN_PROPERTY(std::string BarcodeHex)
    //!
    //! @brief Возвращает значение свойства #BarcodeHex
    //! @return BarcodeHex
    //! @relates BarcodeHex
    //!
    std::string Get_BarcodeHex() const;
    //!
    //! @brief Устанавливает значение свойства #BarcodeHex
    //! @return BarcodeHex
    //! @relates BarcodeHex
    //!
    void Set_BarcodeHex(const std::string& value);
    int ChangeProtocol();

    //!
    //! @brief Тип протокола.
    //!
    //! | Значение | Протокол         |
    //! |----------|--------------------------|
    //! |    0     | Cтандартный      |
    //! |    1     | Протокол ККТ 2.0 |
    //!
    //! @par Методы доступа:
    //!   #Get_ProtocolType, #Set_ProtocolType
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(int ProtocolType)
    //!
    //! @brief Возвращает значение свойства #ProtocolType
    //! @return ProtocolType
    //! @relates ProtocolType
    //!
    int Get_ProtocolType() const;
    //!
    //! @brief Устанавливает значение свойства #ProtocolType
    //! @param value Новое значение ProtocolType
    //! @relates ProtocolType
    //!
    void Set_ProtocolType(int value);

    int Get_LDProtocolType() const;
    void Set_LDProtocolType(int value);
    int GetECRParams();
    int ShowImportDlg();
    int Get_LastPrintResult() const;
    bool Get_UseSlipCheck() const;
    void Set_UseSlipCheck(bool value);
    int Get_TypeOfLastEntryFMEx() const;
    int JournalOperation();
    bool Get_AutoSensorValues() const;
    void Set_AutoSensorValues(bool value);
    bool Get_AutoStartSearch() const;
    int Get_SearchTimeout() const;
    void Set_AutoStartSearch(bool value);
    void Set_SearchTimeout(int value);
    int Get_TCPConnectionTimeout() const;
    void Set_TCPConnectionTimeout(int value);
    int MFPActivization();
    int MFPCloseArchive();
    int MFPGetPermitActivizationCode();
    int MFPGetCustomerCode();
    int MFPPrepareActivization();
    int MFPSetCustomerCode();
    int MFPSetPermitActivizationCode();
    int MFPGetPrepareActivizationResult();

    //!
    //! @brief Расширенное закрытие чека.
    //!
    //! Метод производит закрытие чека комбинированным типом оплаты с вычислением налогов и суммы
    //! сдачи.
    //!
    //! @note Работает в режиме 8. Переводит ККМ в режим 2 или 3.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - сумма наличных клиента,
    //!  - #Summ2 - сумма клиента типа оплаты 2,
    //!  - #Summ3 - сумма клиента типа оплаты 3,
    //!  - #Summ4 - сумма клиента типа оплаты 4,
    //!  - #Summ5 - сумма клиента типа оплаты 5,
    //!  - #Summ6 - сумма клиента типа оплаты 6,
    //!  - #Summ7 - сумма клиента типа оплаты 7,
    //!  - #Summ8 - сумма клиента типа оплаты 8,
    //!  - #Summ9 - сумма клиента типа оплаты 9,
    //!  - #Summ10 - сумма клиента типа оплаты 10,
    //!  - #Summ11 - сумма клиента типа оплаты 11,
    //!  - #Summ12 - сумма клиента типа оплаты 12,
    //!  - #Summ13 - сумма клиента типа оплаты 13,
    //!  - #Summ14 - сумма клиента типа оплаты 14,
    //!  - #Summ15 - сумма клиента типа оплаты 15,
    //!  - #Summ16 - сумма клиента типа оплаты 16,
    //!  - #Summ17 - сумма клиента типа оплаты 17,
    //!  - #Summ18 - сумма клиента типа оплаты 18,
    //!  - #Summ19 - сумма клиента типа оплаты 19,
    //!  - #Summ20 - сумма клиента типа оплаты 20,
    //!  - #DiscountOnCheck - Скидка на чек,
    //!  - #Tax1 - 1-ый номер налоговой группы,
    //!  - #Tax2 - 2-ой номер налоговой группы,
    //!  - #Tax3 - 3-ий номер налоговой группы,
    //!  - #Tax4 - 4-ый номер налоговой группы,
    //!  - #StringForPrinting - Строка символов для печати на чеке в строке, идущей перед строкой,
    //! содержащей сумму.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #Change - сдача.
    //!
    //! @return Код ошибки
    //!
    //!
    //! @deprecated
    //!  Для онлайн-касс лучше использовать метод #FNCloseCheckEx.
    //!
    int CloseCheckEx();

    //!
    //! @brief Сумма5
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ5, #Set_Summ5
    //!
    DOXYGEN_PROPERTY(int64_t Summ5)
    //!
    //! @brief Возвращает значение свойства #Summ5
    //! @return Summ5
    //! @relates Summ5
    //!
    int64_t Get_Summ5() const;
    //!
    //! @brief Устанавливает значение свойства #Summ5
    //! @param value Новое значение Summ5
    //! @relates Summ5
    //!
    void Set_Summ5(int64_t value);

    //!
    //! @brief Сумма6
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ6, #Set_Summ6
    //!
    DOXYGEN_PROPERTY(int64_t Summ6)
    //!
    //! @brief Возвращает значение свойства #Summ6
    //! @return Summ6
    //! @relates Summ6
    //!
    int64_t Get_Summ6() const;
    //!
    //! @brief Устанавливает значение свойства #Summ6
    //! @param value Новое значение Summ6
    //! @relates Summ6
    //!
    void Set_Summ6(int64_t value);

    //!
    //! @brief Сумма7
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ7, #Set_Summ7
    //!
    DOXYGEN_PROPERTY(int64_t Summ7)
    //!
    //! @brief Возвращает значение свойства #Summ7
    //! @return Summ7
    //! @relates Summ7
    //!
    int64_t Get_Summ7() const;
    //!
    //! @brief Устанавливает значение свойства #Summ7
    //! @param value Новое значение Summ7
    //! @relates Summ7
    //!
    void Set_Summ7(int64_t value);

    //!
    //! @brief Сумма8
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ8, #Set_Summ8
    //!
    DOXYGEN_PROPERTY(int64_t Summ8)
    //!
    //! @brief Возвращает значение свойства #Summ8
    //! @return Summ8
    //! @relates Summ8
    //!
    int64_t Get_Summ8() const;
    //!
    //! @brief Устанавливает значение свойства #Summ8
    //! @param value Новое значение Summ8
    //! @relates Summ8
    //!
    void Set_Summ8(int64_t value);

    //!
    //! @brief Сумма9
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ9, #Set_Summ9
    //!
    DOXYGEN_PROPERTY(int64_t Summ9)
    //!
    //! @brief Возвращает значение свойства #Summ9
    //! @return Summ9
    //! @relates Summ9
    //!
    int64_t Get_Summ9() const;
    //!
    //! @brief Устанавливает значение свойства #Summ9
    //! @param value Новое значение Summ9
    //! @relates Summ9
    //!
    void Set_Summ9(int64_t value);

    //!
    //! @brief Сумма10
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ10, #Set_Summ10
    //!
    DOXYGEN_PROPERTY(int64_t Summ10)
    //!
    //! @brief Возвращает значение свойства #Summ10
    //! @return Summ10
    //! @relates Summ10
    //!
    int64_t Get_Summ10() const;
    //!
    //! @brief Устанавливает значение свойства #Summ10
    //! @param value Новое значение Summ10
    //! @relates Summ10
    //!
    void Set_Summ10(int64_t value);

    //!
    //! @brief Сумма11
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ11, #Set_Summ11
    //!
    DOXYGEN_PROPERTY(int64_t Summ11)
    //!
    //! @brief Возвращает значение свойства #Summ11
    //! @return Summ11
    //! @relates Summ11
    //!
    int64_t Get_Summ11() const;
    //!
    //! @brief Устанавливает значение свойства #Summ11
    //! @param value Новое значение Summ11
    //! @relates Summ11
    //!
    void Set_Summ11(int64_t value);

    //!
    //! @brief Сумма12
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ12, #Set_Summ12
    //!
    DOXYGEN_PROPERTY(int64_t Summ12)
    //!
    //! @brief Возвращает значение свойства #Summ12
    //! @return Summ12
    //! @relates Summ12
    //!
    int64_t Get_Summ12() const;
    //!
    //! @brief Устанавливает значение свойства #Summ12
    //! @param value Новое значение Summ12
    //! @relates Summ12
    //!
    void Set_Summ12(int64_t value);

    //!
    //! @brief Сумма13
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ13, #Set_Summ13
    //!
    DOXYGEN_PROPERTY(int64_t Summ13)
    //!
    //! @brief Возвращает значение свойства #Summ13
    //! @return Summ13
    //! @relates Summ13
    //!
    int64_t Get_Summ13() const;
    //!
    //! @brief Устанавливает значение свойства #Summ13
    //! @param value Новое значение Summ13
    //! @relates Summ13
    //!
    void Set_Summ13(int64_t value);

    //!
    //! @brief Сумма14
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ14, #Set_Summ14
    //!
    DOXYGEN_PROPERTY(int64_t Summ14)
    //!
    //! @brief Возвращает значение свойства #Summ14
    //! @return Summ14
    //! @relates Summ14
    //!
    int64_t Get_Summ14() const;
    //!
    //! @brief Устанавливает значение свойства #Summ14
    //! @param value Новое значение Summ14
    //! @relates Summ14
    //!
    void Set_Summ14(int64_t value);

    //!
    //! @brief Сумма15
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ15, #Set_Summ15
    //!
    DOXYGEN_PROPERTY(int64_t Summ15)
    //!
    //! @brief Возвращает значение свойства #Summ15
    //! @return Summ15
    //! @relates Summ15
    //!
    int64_t Get_Summ15() const;
    //!
    //! @brief Устанавливает значение свойства #Summ15
    //! @param value Новое значение Summ15
    //! @relates Summ15
    //!
    void Set_Summ15(int64_t value);

    //!
    //! @brief Сумма16
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ16, #Set_Summ16
    //!
    DOXYGEN_PROPERTY(int64_t Summ16)
    //!
    //! @brief Возвращает значение свойства #Summ16
    //! @return Summ16
    //! @relates Summ16
    //!
    int64_t Get_Summ16() const;
    //!
    //! @brief Устанавливает значение свойства #Summ16
    //! @param value Новое значение Summ16
    //! @relates Summ16
    //!
    void Set_Summ16(int64_t value);

    //!
    //! @brief Сумма16
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ17, #Set_Summ17
    //!
    DOXYGEN_PROPERTY(int64_t Summ17)
    //!
    //! @brief Возвращает значение свойства #Summ17
    //! @return Summ17
    //! @relates Summ17
    //!
    int64_t Get_Summ17() const;
    //!
    //! @brief Устанавливает значение свойства #Summ17
    //! @param value Новое значение Summ17
    //! @relates Summ17
    //!
    void Set_Summ17(int64_t value);

    //!
    //! @brief Сумма18
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ18, #Set_Summ18
    //!
    DOXYGEN_PROPERTY(int64_t Summ18)
    //!
    //! @brief Возвращает значение свойства #Summ18
    //! @return Summ18
    //! @relates Summ18
    //!
    int64_t Get_Summ18() const;
    //!
    //! @brief Устанавливает значение свойства #Summ18
    //! @param value Новое значение Summ18
    //! @relates Summ18
    //!
    void Set_Summ18(int64_t value);

    //!
    //! @brief Сумма19
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ19, #Set_Summ19
    //!
    DOXYGEN_PROPERTY(int64_t Summ19)
    //!
    //! @brief Возвращает значение свойства #Summ19
    //! @return Summ19
    //! @relates Summ19
    //!
    int64_t Get_Summ19() const;
    //!
    //! @brief Устанавливает значение свойства #Summ19
    //! @param value Новое значение Summ19
    //! @relates Summ19
    //!
    void Set_Summ19(int64_t value);

    //!
    //! @brief Сумма20
    //!
    //! Свойство, используемое для хранения наличных значений денежных сумм.
    //! Передается в копейках.
    //!
    //! @par Используется методами:
    //!   #CloseCheckEx
    //!
    //! @par Методы доступа:
    //!   #Get_Summ20, #Set_Summ20
    //!
    DOXYGEN_PROPERTY(int64_t Summ20)
    //!
    //! @brief Возвращает значение свойства #Summ20
    //! @return Summ20
    //! @relates Summ20
    //!
    int64_t Get_Summ20() const;
    //!
    //! @brief Устанавливает значение свойства #Summ16
    //! @param value Новое значение Summ20
    //! @relates Summ20
    //!
    void Set_Summ20(int64_t value);

    int Get_CustomerCode() const;
    void Set_CustomerCode(int value);
    int Get_PermitActivizationCode() const;
    void Set_PermitActivizationCode(int value);

    //!
    //! @brief Имя расширенного денежного регистра
    //!
    //! @par Модифицируется методами:
    //!   #GetCashRegEx
    //!
    //! @par Методы доступа:
    //!   #Get_NameCashRegEx
    //!
    DOXYGEN_PROPERTY(std::string NameCashRegEx)
    //!
    //! @brief Возвращает значение свойства #NameCashRegEx
    //! @return NameCashRegEx
    //! @relates NameCashRegEx
    //!
    std::string Get_NameCashRegEx() const;

    int Get_ActivizationStatus() const;
    void Set_ActivizationStatus(int value);
    int Get_MFPStatus() const;
    void Set_MFPStatus(int value);
    int Get_KPKValue() const;
    void Set_KPKValue(int value);
    int Get_ActivizationControlByte() const;
    void Set_ActivizationControlByte(int value);
    int Get_PrepareActivizationRemainCount() const;
    void Set_PrepareActivizationRemainCount(int value);
    int Get_AnswerCode() const;
    void Set_AnswerCode(int value);
    int GetMFPCode3Status();
    std::string Get_MFPNumber() const;
    void Set_MFPNumber(const std::string& value);

    //!
    //! @brief Тип запроса
    //!
    //! @par Используется методами:
    //!   #FNResetState
    //!
    //! @par Методы доступа:
    //!   #Get_RequestType, #Set_RequestType
    //!
    DOXYGEN_PROPERTY(int RequestType)
    //!
    //! @brief Возвращает значение свойства #RequestType
    //! @return RequestType
    //! @relates RequestType
    //!
    int Get_RequestType() const;
    //!
    //! @brief Устанавливает значение свойства #RequestType
    //! @param value Новое значение RequestType
    //! @relates RequestType
    //!
    void Set_RequestType(int value);

    int Get_ReadTimeout() const;
    void Set_ReadTimeout(int value);
    int ClearReportBuffer();
    bool Get_IsBlockedByWrongTaxPassword() const;
    int Get_LastFMRecordType() const;
    int ShowAdditionalParams();
    bool Get_CloudCashdeskEnabled() const;
    std::string Get_ECRID() const;
    void Set_CloudCashdeskEnabled(bool value);
    void Set_ECRID(const std::string& value);
    int GetCloudCashdeskParams();
    std::string Get_KSAInfo() const;
    void Set_KSAInfo(const std::string& value);
    //!
    //! @brief Горизонтальное масштабирование
    //!
    //! @par Методы доступа:
    //!   #Get_HorizScale, #Set_HorizScale
    //!
    //! @par Используется методами:
    //!   #PrintGraphics512
    //!
    DOXYGEN_PROPERTY(int HorizScale)
    //!
    //! @brief Возвращает значение свойства #HorizScale
    //! @return HorizScale
    //! @relates HorizScale
    //!
    int Get_HorizScale() const;
    //!
    //! @brief Устанавливает значение свойства #HorizScale
    //! @param value Новое значение HorizScale
    //! @relates HorizScale
    //!
    void Set_HorizScale(int value);
    //!
    //! @brief Вертикальное масштабирование
    //!
    //! @par Методы доступа:
    //!   #Get_VertScale, #Set_VertScale
    //!
    //! @par Используется методами:
    //!   #PrintGraphics512
    //!
    DOXYGEN_PROPERTY(int VertScale)
    //!
    //! @brief Возвращает значение свойства #VertScale
    //! @return VertScale
    //! @relates VertScale
    //!
    int Get_VertScale() const;
    //!
    //! @brief Устанавливает значение свойства #VertScale
    //! @param value Новое значение VertScale
    //! @relates VertScale
    //!
    void Set_VertScale(int value);
    int DrawScale();
    int Get_BarcodeFirstLine() const;
    void Set_BarcodeFirstLine(int value);
    int Get_SKNOError() const;

    void Set_SKNOError(int value);

    std::string Get_SKNOIdentifier() const;
    void Set_SKNOIdentifier(const std::string& value);
    //!
    //! @brief Загрузка графики 512
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #GraphBufferType - Тип графического буфера
    //!  - #LineLength - Длина линии 1…40 для GraphBufferType == 0; 1…64 для GraphBufferType == 1
    //!  - #FirstLineNumber - Номер начальной линии  1…1200 для GraphBufferType == 0; 1…600 для
    //!  GraphBufferType == 1
    //!  - #LineNumber - Количество последующих линий  1…1200 для GraphBufferType == 0; 1…600 для
    //!  GraphBufferType == 1
    //!  - #LineData - данные, размер должен быть равен LineNumber * LineLength
    //!
    //! @return Код ошибки
    //!
    int LoadGraphics512();
    //!
    //! @brief Печать графики 512 с масштабированием
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #FirstLineNumber - Номер начальной линии
    //!  - #LastLineNumber - Номер конечной линии
    //!  - #VertScale - Коэффициент масштабирования точки по вертикали
    //!  - #HorizScale - Коэффициент масштабирования точки по горизонтали
    //!  - #DelayedPrint - Отложенная печать
    //!
    //! @return Код ошибки
    //!
    int PrintGraphics512();
    //!
    //! @brief Тип графического буфера
    //!
    //! 0 – для команд [расширенной] графики
    //! 1 – для команд графики-512
    //!
    //! @par Методы доступа:
    //!   #Get_GraphBufferType, #Set_GraphBufferType
    //!
    //! @par Используется методами:
    //!   #LoadGraphics512
    //!
    DOXYGEN_PROPERTY(int GraphBufferType)
    //!
    //! @brief Возвращает значение свойства #GraphBufferType
    //! @return GraphBufferType
    //! @relates GraphBufferType
    //!
    int Get_GraphBufferType() const;
    //!
    //! @brief Устанавливает значение свойства #GraphBufferType
    //! @param value Новое значение GraphBufferType
    //! @relates GraphBufferType
    //!
    void Set_GraphBufferType(int value);
    //!
    //! @brief Длина линии
    //!
    //! @par Методы доступа:
    //!   #Get_LineLength, #Set_LineLength
    //!
    //! @par Используется методами:
    //!   #LoadGraphics512
    //!
    DOXYGEN_PROPERTY(int LineLength)
    //!
    //! @brief Возвращает значение свойства #LineLength
    //! @return LineLength
    //! @relates LineLength
    //!
    int Get_LineLength() const;
    //!
    //! @brief Устанавливает значение свойства #LineLength
    //! @param value Новое значение LineLength
    //! @relates LineLength
    //!
    void Set_LineLength(int value);

    //!
    //! @brief Текущий документ ФН
    //!
    //! Диапазон значений:
    //! - 0 – нет открытого документа;
    //! - 1 - Отчёт о регистрации
    //! - 2 – Отчёт об открытии смены;
    //! - 3 – Кассовый чек;
    //! - 4 – БСО;
    //! - 5 – Отчёт о закрытии смены;
    //! - 6 – Отчёт о закрытии фискального накопителя;
    //! - 7 – Подтверждение оператора;
    //! - 11 – Отчет об изменении параметров регистрации;
    //! - 18 – Отчет об изменении параметров регистрации ККТ в связи с заменой ФН;
    //! - 19 – Отчет об изменении параметров регистрации ККТ;
    //! - 20 – Кассовый чек коррекции 15h - БСО коррекции;
    //! - 21 – Отчет о состоянии расчетов;
    //! - 23 – Отчет о текущем состоянии расчетов;
    //! - 31 – Кассовый чек коррекции;
    //! - 41 – Бланк строгой отчетности коррекции.
    //!
    //! @par Методы доступа:
    //!   #Get_FNCurrentDocument, #Set_FNCurrentDocument
    //!
    //! @par Модифицируется методами:
    //!   #FNGetStatus
    //!
    DOXYGEN_PROPERTY(int FNCurrentDocument)
    //!
    //! @brief Возвращает значение свойства #FNCurrentDocument
    //! @return FNCurrentDocument
    //! @relates FNCurrentDocument
    //!
    int Get_FNCurrentDocument() const;
    //!
    //! @brief Устанавливает значение свойства #FNCurrentDocument
    //! @param value Новое значение FNCurrentDocument
    //! @relates FNCurrentDocument
    //!
    void Set_FNCurrentDocument(int value);

    //!
    //! @brief Данные документа ФН
    //!
    //! Диапазон значений:
    //! 0 – нет данных документа;
    //! 1 – получены данные документа.
    //!
    //! @par Методы доступа:
    //!   #Get_FNDocumentData, #Set_FNDocumentData
    //!
    //! @par Модифицируется методами:
    //!   #FNGetStatus
    //!
    DOXYGEN_PROPERTY(int FNDocumentData)
    //!
    //! @brief Возвращает значение свойства #FNDocumentData
    //! @return FNDocumentData
    //! @relates FNDocumentData
    //!
    int Get_FNDocumentData() const;
    //!
    //! @brief Устанавливает значение свойства #FNDocumentData
    //! @param value Новое значение FNDocumentData
    //! @relates FNDocumentData
    //!
    void Set_FNDocumentData(int value);

    //!
    //! @brief Состояние жизни ФН
    //!
    //! Диапазон значений:
    //!
    //! | значение | номер стадии |                      название стадии                          |
    //! |----------|--------------|----------------------------------------------------------------------|
    //! |   0x00   |   стадия1    | Производственная стадия                                       |
    //! |   0x01   |   стадия2    | Готовность к фискализации                                     |
    //! |   0x03   |   стадия3    | Фискальный режим                                              |
    //! |   0x07   |   стадия4    | Фискальный режим закрыт. Передача фискальных документов в ОФД |
    //! |   0x0F   |   стадия5    | Чтение данных из Архива ФН                                    |
    //!
    //! @par Методы доступа:
    //!   #Get_FNLifeState, #Set_FNLifeState
    //!
    //! @par Модифицируется методами:
    //!   #FNGetStatus
    //!
    DOXYGEN_PROPERTY(int FNLifeState)
    //!
    //! @brief Возвращает значение свойства #FNLifeState
    //! @return FNLifeState
    //! @relates FNLifeState
    //!
    int Get_FNLifeState() const;
    //!
    //! @brief Устанавливает значение свойства #FNLifeState
    //! @param value Новое значение FNLifeState
    //! @relates FNLifeState
    //!
    void Set_FNLifeState(int value);

    //!
    //! @brief Состояние смены ФН
    //!
    //! Диапазон значений:
    //! 0 – смена закрыта;
    //! 1 – смена открыта.
    //!
    //! @par Методы доступа:
    //!   #Get_FNSessionState, #Set_FNSessionState
    //!
    //! @par Модифицируется методами:
    //!   #FNGetStatus, #FNGetCurrentSessionParams
    //!
    DOXYGEN_PROPERTY(int FNSessionState)
    //!
    //! @brief Возвращает значение свойства #FNSessionState
    //! @return FNSessionState
    //! @relates FNSessionState
    //!
    int Get_FNSessionState() const;
    //!
    //! @brief Устанавливает значение свойства #FNSessionState
    //! @param value Новое значение FNSessionState
    //! @relates FNSessionState
    //!
    void Set_FNSessionState(int value);

    //!
    //! @brief ФН версия
    //!
    //! Строка версии программного обеспечения ФН
    //!
    //! @par Методы доступа:
    //!   #Get_FNSoftVersion, #Set_FNSoftVersion
    //!
    //! @par Модифицируется методами:
    //!   #FNGetVersion
    //!
    DOXYGEN_PROPERTY(std::string FNSoftVersion)
    //!
    //! @brief Возвращает значение свойства #FNSoftVersion
    //! @return FNSoftVersion
    //! @relates FNSoftVersion
    //!
    std::string Get_FNSoftVersion() const;
    //!
    //! @brief Устанавливает значение свойства #FNSoftVersion
    //! @param value Новое значение FNSoftVersion
    //! @relates FNSoftVersion
    //!
    void Set_FNSoftVersion(const std::string& value);

    //!
    //! @brief Тип программного обеспечения ФН
    //!
    //! @par Методы доступа:
    //!   #Get_FNSoftType
    //!
    //! Диапазон значений: 0 – отладочная версия; 1 – серийная версия.
    //!
    //! @par Модифицируется методами:
    //!   #FNGetVersion
    //!
    DOXYGEN_PROPERTY(int FNSoftType)
    //!
    //! @brief Возвращает значение свойства #FNSoftType
    //! @return FNSoftType
    //! @relates FNSoftType
    //!
    int Get_FNSoftType() const;

    //!
    //! @brief Флаги предупреждения ФН
    //!
    //! Диапазон значений:
    //! - 1 – Срочная замена криптографического сопроцессора (до окончания срока действия 3 дня)
    //! - 2 – Исчерпание ресурса криптографического сопроцессора (до окончания срока действия 30
    //! дней)
    //! - 4 – Переполнение памяти ФН (Архив ФН заполнен на 90 %)
    //! - 8 – Превышено время ожидания ответа ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_FNWarningFlags, #Set_FNWarningFlags
    //!
    //! @par Модифицируется методами:
    //!   #FNGetStatus
    //!
    DOXYGEN_PROPERTY(int FNWarningFlags)
    //!
    //! @brief Возвращает значение свойства #FNWarningFlags
    //! @return FNWarningFlags
    //! @relates FNWarningFlags
    //!
    int Get_FNWarningFlags() const;
    //!
    //! @brief Устанавливает значение свойства #FNWarningFlags
    //! @param value Новое значение FNWarningFlags
    //! @relates FNWarningFlags
    //!
    void Set_FNWarningFlags(int value);

    int Get_SyncTimeout() const;
    void Set_SyncTimeout(int value);

    //!
    //! @brief Запросить срок действия ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #Date - срок действия ФН,
    //!  - #FreeRegistration - оставшееся количество перерегистраций,
    //!  - #RegistrationNumber - количество регистраций.
    //!
    //! @return Код ошибки
    //!
    int FNGetExpirationTime();

    //!
    //! @brief Запросить заводской номер ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #SerialNumber - заводской номер ФН.
    //!
    //! @return Код ошибки
    //!
    int FNGetSerial();

    //!
    //! @brief Запросить состояние ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FNLifeState - состояние жизни ФН,
    //!  - #FNCurrentDocument - текущий документ ФН,
    //!  - #FNDocumentData - данные документа,
    //!  - #FNSessionState - состояние смены,
    //!  - #FNWarningFlags - флаги предупреждения,
    //!  - #Date - дата,
    //!  - #Time - время,
    //!  - #SerialNumber - заводской номер ФН,
    //!  - #DocumentNumber - номер ФД.
    //!
    //! @return Код ошибки
    //!
    int FNGetStatus();

    //!
    //! @brief Запросить версию ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FNSoftVersion - версия ПО ФН,
    //!  - #FNSoftType  - тип ПО ФН.
    //!
    //! @return Код ошибки
    //!
    int FNGetVersion();

    int FNBeginFiscalization();
    int FNFiscalization();

    //!
    //! @brief Фискальный признак.
    //!
    //! Фискальный признак – часть имитовставки по ГОСТ 28147-89, вычисленной на данные фискального
    //! документа.
    //!
    //! @par Методы доступа:
    //!   #Get_FiscalSign, #Set_FiscalSign
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument,#FNBuildCalculationStateReport,#FNBuildCorrectionReceipt,
    //! #FNBuildRegistrationReport, #FNBuildReregistrationReport, #FNGetFiscalizationResult,
    //! #FNCloseCheckEx, #FNOpenSession
    //!
    DOXYGEN_PROPERTY(uint32_t FiscalSign)
    //!
    //! @brief Возвращает значение свойства #FiscalSign
    //! @return FiscalSign
    //! @relates FiscalSign
    //!
    uint32_t Get_FiscalSign() const;
    //!
    //! @brief Устанавливает значение свойства #FiscalSign
    //! @param value Новое значение FiscalSign
    //! @relates FiscalSign
    //!
    void Set_FiscalSign(uint32_t value);

    //!
    //! @brief Фискальный признак документа в виде строки
    //!
    //! @par Методы доступа:
    //!   #Get_FiscalSignAsString
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument,#FNBuildCalculationStateReport,#FNBuildCorrectionReceipt,
    //! #FNBuildRegistrationReport, #FNBuildReregistrationReport, #FNGetFiscalizationResult,
    //! #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(std::string FiscalSignAsString)
    //!
    //! @brief Возвращает значение свойства #FiscalSignAsString
    //! @return FiscalSignAsString
    //! @relates FiscalSignAsString
    //!
    std::string Get_FiscalSignAsString() const;

    //!
    //! @brief Регистрационный номер ККТ
    //!
    //! @par Методы доступа:
    //!   #Get_KKTRegistrationNumber, #Set_KKTRegistrationNumber
    //!
    //! @par Используется методами:
    //!   #FNBuildRegistrationReport, #FNBuildReregistrationReport
    //!
    //! @par Модифицируется методами:
    //!  #FNFindDocument, #FNGetFiscalizationResult, #FNGetFiscalizationResultByNumber.
    //!
    DOXYGEN_PROPERTY(std::string KKTRegistrationNumber)
    //!
    //! @brief Возвращает значение свойства #KKTRegistrationNumber
    //! @return KKTRegistrationNumber
    //! @relates KKTRegistrationNumber
    //!
    std::string Get_KKTRegistrationNumber() const;
    //!
    //! @brief Устанавливает значение свойства #KKTRegistrationNumber
    //! @param value Новое значение KKTRegistrationNumber
    //! @relates KKTRegistrationNumber
    //!
    void Set_KKTRegistrationNumber(const std::string& value);

    //!
    //! @brief Код налогообложения
    //!
    //! Код системы налогообложения.
    //!
    //! Битовое поле.
    //!
    //! | Бит5 - Бит0 | значение | система налогообложения                               |
    //! |-------------|----------|------------------------------------------------------------|
    //! | 000001      |    1     | основная                                              |
    //! | 000010      |    2     | упрощенная система налогообложения доход              |
    //! | 000100      |    4     | упрощенная система налогообложения доход минус расход |
    //! | 001000      |    8     | единый налог на вмененный доход                       |
    //! | 010000      |    16    | единый сельскохозяйственный налог                     |
    //! | 100000      |    32    | патентная система налогообложения                     |
    //!
    //! @par Методы доступа:
    //!   #Get_TaxType, #Set_TaxType
    //!
    //! @par Используется методами:
    //!   #FNBuildRegistrationReport, #FNBuildCorrectionReceipt2, #FNBuildReregistrationReport,
    //!   #FNCloseCheckEx,
    //!
    //! @par Модифицируется методами:
    //!  #FNFindDocument, #FNGetFiscalizationResult.
    //!
    DOXYGEN_PROPERTY(int TaxType)
    //!
    //! @brief Возвращает значение свойства #TaxType
    //! @return TaxType
    //! @relates TaxType
    //!
    int Get_TaxType() const;
    //!
    //! @brief Устанавливает значение свойства #TaxType
    //! @param value Новое значение TaxType
    //! @relates TaxType
    //!
    void Set_TaxType(int value);

    //!
    //! @brief Режим работы
    //!
    //! Битовое поле
    //!
    //! | Бит5 - Бит0 | Режим работы             |
    //! |-------------|------------------------------|
    //! |    000001   | шифрование               |
    //! |    000010   | автономный режим         |
    //! |    000100   | автоматический режим     |
    //! |    001000   | применение в сфере услуг |
    //! |    010000   | режим БСО                |
    //! |    100000   | применение в Интернет    |
    //!
    //! @par Методы доступа:
    //!   #Get_WorkMode, #Set_WorkMode
    //!
    //! @par Используется методами:
    //!   #FNBuildRegistrationReport, #FNBuildReregistrationReport.
    //!
    //! @par Модифицируется методами:
    //!  #FNFindDocument, #FNGetFiscalizationResultByNumber, #FNGetFiscalizationResult.
    //!
    DOXYGEN_PROPERTY(int WorkMode)
    //!
    //! @brief Возвращает значение свойства #WorkMode
    //! @return WorkMode
    //! @relates WorkMode
    //!
    int Get_WorkMode() const;
    //!
    //! @brief Устанавливает значение свойства #WorkMode
    //! @param value Новое значение WorkMode
    //! @relates WorkMode
    //!
    void Set_WorkMode(int value);

    //!
    //! @brief Отменить документ ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора.
    //!
    //! @return Код ошибки
    //!
    int FNCancelDocument();

    //!
    //! @brief Сбросить состояние ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #RequestType - тип запроса,
    //!
    //! @return Код ошибки
    //!
    int FNResetState();

    //!
    //! @brief Найти документ ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль администратора,
    //!  - #DocumentNumber - номер ФД.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OFDTicketReceived  - получена квитанция из ОФД,
    //!  - #DocumentType - тип документа,
    //!  - #Date - дата документа,
    //!  - #Time - время документа,
    //!  - #DocumentNumber - номер ФД,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString - фискальный признак документа в виде строки.
    //!
    //! В зависимости от значения свойства DocumentType модифицируются следующие свойства:
    //! 1 (Отчет о регистрации)
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!  - #TaxType  - код системы налогообложения,
    //!  - #WorkMode - режим работы,
    //!  - #WorkModeEx - расширенные признаки работы ККТ,
    //!  - #INNOFD - ИНН ОФД,
    //!
    //! 2(Отчет об открытии смены), 5 (Отчёт о закрытии смены)
    //!  - #SessionNumber - номер смены,
    //!
    //! 3(Кассовый чек), 4(Бланк строгой отчетности), 31(Кассовый чек коррекции)
    //!  - #OperationType - тип операции,
    //!  - #Summ1 - сумма операции,
    //!
    //! 6 (Отчет о закрытии фискального накопителя
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!
    //! 11 (Отчёт об изменении параметров регистрации)
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!  - #TaxType - код системы налогообложения,
    //!  - #WorkMode - режим работы,
    //!  - #RegistrationReasonCode - код причины перерегистрации,
    //!  - #WorkModeEx - расширенные признаки работы ККТ,
    //!  - #INNOFD - ИНН ОФД,
    //!  - #RegistrationReasonCodeEx - Код причины изменения сведений о ККТ,
    //!
    //! 21 (Отчет о состоянии расчетов)
    //!  - #Date2 - дата первого неподтвержденного документа,
    //!  - #Time2 - время первого неподтвержденного документа,
    //!  - #DocumentCount - количетсво неподтвержденных документов.
    //!
    //! @return Код ошибки
    //!
    int FNFindDocument();

    //!
    //! @brief Тип документа ФН
    //!
    //! Допустимые значения:
    //! - 1 – Отчёт о регистрации
    //! - 2 – Отчёт об открытии смены
    //! - 3 – Кассовый чек
    //! - 4 – БСО
    //! - 5 – Отчёт о закрытии смены
    //! - 6 – Отчёт о закрытии фискального накопителя
    //! - 7 – Подтверждение оператора
    //! - 11 – Отчет об изменении параметров регистрации
    //! - 21 – Отчет о состоянии расчетов
    //! - 31 – Кассовый чек коррекции
    //! - 41 – Бланк строгой отчетности коррекции
    //!
    //! @par Методы доступа:
    //!   #Get_DocumentType, #Set_DocumentType
    //!
    //! @par Модифицируется методами:
    //!   #FNRequestFiscalDocumentTLV, #FNFindDocument
    //!
    DOXYGEN_PROPERTY(int DocumentType)
    //!
    //! @brief Возвращает значение свойства #DocumentType
    //! @return DocumentType
    //! @relates DocumentType
    //!
    int Get_DocumentType() const;
    //!
    //! @brief Устанавливает значение свойства #DocumentType
    //! @param value Новое значение DocumentType
    //! @relates DocumentType
    //!
    void Set_DocumentType(int value);

    //!
    //! @brief Получена ли квитанция из ОФД
    //!
    //! Диапазон значений: True – Да, False – Нет.
    //!
    //! @par Методы доступа:
    //!   #Get_OFDTicketReceived, #Set_OFDTicketReceived
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument
    //!
    DOXYGEN_PROPERTY(bool OFDTicketReceived)
    //!
    //! @brief Возвращает значение свойства #OFDTicketReceived
    //! @return OFDTicketReceived
    //! @relates OFDTicketReceived
    //!
    bool Get_OFDTicketReceived() const;
    //!
    //! @brief Устанавливает значение свойства #OFDTicketReceived
    //! @param value Новое значение OFDTicketReceived
    //! @relates OFDTicketReceived
    //!
    void Set_OFDTicketReceived(bool value);

    std::string Get_DocumentData() const;
    void Set_DocumentData(const std::string& value);

    //!
    //! @brief Открыть смену ФН.
    //!
    //! Если при открытии смены необходимо передать дополнительные теги, то можно предварительно
    //! вызвать #FNBeginOpenSession, передать теги с помощью #FNSendTLV или #FNSendTag и в
    //! заключение вызвать #FNOpenSession.
    //!
    //! @note Работает в режиме 4. Переводит ККМ в режим 2.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBeginOpenSession
    //!
    int FNOpenSession();

    //!
    //! @brief Передать структуру TLV в ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #TLVData - данные TLV (Max 250 байт).
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNSendTag
    //!
    int FNSendTLV();

    //!
    //! @brief Данные TLV
    //!
    //! Данные документа ФН в формате TLV (согласно документу ФНС «Форматы фискальных
    //! документов»).\n
    //! Например, чтобы передать тэг 1008 «адрес покупателя» со значением 12345678 следует записать
    //! в TLVData следующую последовательность байт:\n
    //! F0h 03h 08h 00h 31h 32h 33h 34h 35h 36h 37h 38h \n
    //! ,где F0h 03h – код тэга, 08h 00h – длина сообщения.
    //!
    //! @par Методы доступа:
    //!   #Get_TLVData, #Set_TLVData
    //!
    //! @par Используется методами:
    //!   #FNSendTLV, #FNSendTLVOperation, #FNCheckItemBarcode
    //!
    //! @par Модифицируется методами:
    //!   #FNSendSTLVTag, #FNReadFiscalDocumentTLV, #FNSendSTLVTagOperation, #GetTagAsTLV, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(std::vector<uint8_t> TLVData)
    //!
    //! @brief Возвращает значение свойства #TLVData
    //! @return TLVData
    //! @relates TLVData
    //!
    std::vector<uint8_t> Get_TLVData() const;
    //!
    //! @brief Устанавливает значение свойства #TLVData
    //! @param value Новое значение TLVData
    //! @relates TLVData
    //!
    void Set_TLVData(const std::vector<uint8_t>& value);

    //!
    //! @brief Данные TLV в виде Hex строки, при записи так же помещает в свойство #TLVData соотв. двоичные данные
    //!
    //! @sa TLVData
    //!
    //! @par Методы доступа:
    //!   #Get_TLVDataHex, #Set_TLVDataHex
    //!
    //! @par Используется методами:
    //!   #FNSendTLV, #FNSendTLVOperation, #FNCheckItemBarcode
    //!
    //! @par Модифицируется методами:
    //!   #FNSendSTLVTag, #FNReadFiscalDocumentTLV, #FNSendSTLVTagOperation, #GetTagAsTLV, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(std::string TLVDataHex)
    //!
    //! @brief Возвращает значение свойства #TLVDataHex
    //! @return TLVDataHex
    //! @relates TLVDataHex
    //!
    std::string Get_TLVDataHex() const;
    //!
    //! @brief Устанавливает значение свойства #TLVDataHex
    //! @param value Новое значение TLVDataHex
    //! @relates TLVDataHex
    //!
    void Set_TLVDataHex(const std::string& value);

    int FNDiscountOperation();

    //!
    //! @brief Сторно ФН.
    //! @deprecated реализация удалена. Актуальные версии ФФД не поддерживают сторно.
    //! @return Код ошибки
    //!
    int FNStorno();
    //!
    //! @brief Размер блока данных
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DataBlockSize , #Set_DataBlockSize
    //!
    //! @par Модифицируется методами:
    //!   #FNReadNotificationBlock
    //!
    DOXYGEN_PROPERTY(int DataBlockSize)
    //!
    //! @brief Возвращает значение свойства #DataBlockSize
    //! @return DataBlockSize
    //! @relates DataBlockSize
    //!
    int Get_DataBlockSize() const;
    //!
    //! @brief Устанавливает значение свойства #DataBlockSize
    //! @param value Новое значение DataBlockSize
    //! @relates DataBlockSize
    //!
    void Set_DataBlockSize(int value);

    //!
    //! @brief Длина данных
    //!
    //! Длина данных запрашиваемого фискального документа.
    //!
    //! @par Методы доступа:
    //!   #Get_DataLength, #Set_DataLength
    //!
    //! @par Модифицируется методами:
    //!   #FNRequestFiscalDocumentTLV
    //!
    DOXYGEN_PROPERTY(int DataLength)
    //!
    //! @brief Возвращает значение свойства #DataLength
    //! @return DataLength
    //! @relates DataLength
    //!
    int Get_DataLength() const;
    //!
    //! @brief Устанавливает значение свойства #DataLength
    //! @param value Новое значение DataLength
    //! @relates DataLength
    //!
    void Set_DataLength(int value);

    //!
    //! @brief Выполнить единичный обмен с ОФД средствами драйвера(EoD)
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #OFDServer - сервер ОФД
    //!  - #OFDPort - порт сервера ОФД
    //!  - #Timeout - таймаут обмена с ОФД в миллисекундах
    //!
    //! @return Код ошибки
    //!
    int OFDExchange();

    //!
    //! @brief Порт ОФД
    //!
    //! TCP порт сервера ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_OFDPort, #Set_OFDPort
    //!
    //! @par Используется методами:
    //!   #OFDExchange
    //!
    DOXYGEN_PROPERTY(int OFDPort)
    //!
    //! @brief Возвращает значение свойства #OFDPort
    //! @return OFDPort
    //! @relates OFDPort
    //!
    int Get_OFDPort() const;
    //!
    //! @brief Устанавливает значение свойства #OFDPort
    //! @param value Новое значение OFDPort
    //! @relates OFDPort
    //!
    void Set_OFDPort(int value);

    //!
    //! @brief Адрес сервера ОФД
    //!
    //! IP или DNS адрес сервера ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_OFDServer, #Set_OFDServer
    //!
    //! @par Используется методами:
    //!   #OFDExchange
    //!
    DOXYGEN_PROPERTY(std::string OFDServer)
    //!
    //! @brief Возвращает значение свойства #OFDServer
    //! @return OFDServer
    //! @relates OFDServer
    //!
    std::string Get_OFDServer() const;
    //!
    //! @brief Устанавливает значение свойства #OFDServer
    //! @param value Новое значение OFDServer
    //! @relates OFDServer
    //!
    void Set_OFDServer(const std::string& value);

    //!
    //! @brief Пауза между сессиями обмена с ОФД
    //!
    //! Время в секундах между попытками связи с ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_OFDPollPeriod, #Set_OFDPollPeriod
    //!
    //! Используется при фоновом обмене с ОФД средствами драйвера @see AutoEoD
    //!
    DOXYGEN_PROPERTY(int OFDPollPeriod)
    //!
    //! @brief Возвращает значение свойства #OFDPollPeriod
    //! @return OFDPollPeriod
    //! @relates OFDPollPeriod
    //!
    int Get_OFDPollPeriod() const;
    //!
    //! @brief Устанавливает значение свойства #OFDPollPeriod
    //! @param value Новое значение OFDPollPeriod
    //! @relates OFDPollPeriod
    //!
    void Set_OFDPollPeriod(int value);

    bool Get_OFDEnabled() const;
    void Set_OFDEnabled(bool value);

    //! @brief Начать формирование отчета о состоянии расчетов.
    //!
    //!  После вызова данного метода возможна отправка дополнительных TLV-Тегов (согласно
    //!  документу ФНС «Форматы фискальных документов») при помощи метода #FNSendTLV или #FNSendTag.
    //!  Далее для проведения отчета необходимо вызвать метод #FNBuildCalculationStateReport
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBuildCalculationStateReport
    //!
    int FNBeginCalculationStateReport();

    //! @brief  Начать закрытие фискального режима.
    //!
    //! После вызова данного метода возможна отправка дополнительных TLV-Тегов (согласно
    //! документу ФНС «Форматы фискальных документов») при помощи метода #FNSendTLV или #FNSendTag.
    //! Далее для завершения закрытия необходимо вызвать метод #FNCloseFiscalMode
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNCloseFiscalMode
    //!
    int FNBeginCloseFiscalMode();

    //! @brief  Начать закрытие смены.
    //!
    //! После вызова данного метода возможна отправка дополнительных TLV-Тегов (согласно
    //! документу ФНС «Форматы фискальных документов») при помощи методов #FNSendTLV или #FNSendTag.
    //! Далее для завершения закрытия смены необходимо вызвать метод #FNCloseSession или
    //! #PrintReportWithCleaning
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNCloseSession, #PrintReportWithCleaning
    //!
    int FNBeginCloseSession();

    //!
    //! @brief Начать формирование чека коррекции.
    //!
    //! После вызова данного метода возможна отправка дополнительных TLV-Тегов (согласно
    //! документу ФНС «Форматы фискальных документов») при помощи методов #FNSendTLV или #FNSendTag.
    //! Далее для проведения отчета необходимо вызвать метод #FNBuildCorrectionReceipt.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBuildCorrectionReceipt
    //!
    int FNBeginCorrectionReceipt();

    //!
    //! @brief Начать открытие смены.
    //!
    //! После вызова данного метода возможна отправка дополнительных TLV-Тегов (согласно
    //! документу ФНС «Форматы фискальных документов») при помощи методов #FNSendTLV или #FNSendTag.
    //! Далее необходимо вызвать метод #FNOpenSession или #OpenSession.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNOpenSession, #OpenSession
    //!
    int FNBeginOpenSession();

    //!
    //! @brief Начать формирование отчета о регистрации ККТ.
    //!
    //! После вызова данного метода возможна отправка дополнительных TLV-Тегов (согласно
    //! документу ФНС «Форматы фискальных документов») при помощи методов #FNSendTLV или #FNSendTag.
    //! Далее для проведения отчета необходимо вызвать метод #FNBuildRegistrationReport.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #ReportTypeInt - тип отчета.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBuildRegistrationReport
    //!
    int FNBeginRegistrationReport();

    //!
    //! @brief Сформировать отчет о состоянии расчетов.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #DocumentNumber - номер ФД,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString - фискальный признак документа в виде строки,
    //!  - #DocumentCount - количество неподтвержденных документов,
    //!  - #Date - дата первого неподтверждённого документа.
    //!
    //! @return Код ошибки
    //!
    int FNBuildCalculationStateReport();

    //!
    //! @brief Сформировать чек коррекции ФН.
    //!
    //! Предварительно можно вызвать #FNBeginCorrectionReceipt и передать дополнительные TLV-Теги
    //! при помощи метода #FNSendTLV или #FNSendTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #Summ1 - итог чека,
    //!  - #CheckType - тип чека.
    //!
    //! @par Модифицируемые свойства:
    //!  - #ReceiptNumber - номер чека,
    //!  - #DocumentNumber - номер ФД,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString - фискальный признак документа в виде строки.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBeginCorrectionReceipt
    //!
    //! @deprecated
    //!
    int FNBuildCorrectionReceipt();

    //!
    //! @brief Сформировать отчет о регистрации ФН.
    //!
    //! Предварительно можно вызвать #FNBeginRegistrationReport и передать дополнительные TLV-Теги
    //! при помощи метода #FNSendTLV или #FNSendTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!  - #TaxType - код системы налогообложения,
    //!  - #WorkMode - режим работы.
    //!
    //! @par Модифицируемые свойства:
    //!  - #DocumentNumber - номер ФД,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString - фискальный признак документа в виде строки.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBeginRegistrationReport
    //!
    int FNBuildRegistrationReport();

    //!
    //! @brief Закрыть фискальный режим ФН.
    //!
    //! Предварительно можно вызвать #FNBeginCloseFiscalMode и передать дополнительные TLV-Теги при
    //! помощи метода #FNSendTLV или #FNSendTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBeginCloseFiscalMode
    //!
    int FNCloseFiscalMode();

    //!
    //! @brief Закрыть смену.
    //!
    //! Метод закрывает смену и печатает сменный отчет с гашением.
    //!
    //! Предварительно можно вызвать #FNBeginCloseSession и передать дополнительные TLV-Теги при
    //! помощи метода #FNSendTLV или #FNSendTag.
    //!
    //! @note Работает в режимах 2 и 3. Переводит ККМ в режим 4.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNBeginCloseSession
    //!
    int FNCloseSession();

    //!
    //! @brief Получить параметры текущей смены ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FNSessionState - состояние смены,
    //!  - #SessionNumber - номер смены,
    //!  - #ReceiptNumber - номер чека.
    //!
    //! @return Код ошибки
    //!
    int FNGetCurrentSessionParams();

    //!
    //! @brief Получить статус информационного обмена.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #InfoExchangeStatus - статус информационного обмена,
    //!  - #MessageState - состояние чтения сообщения,
    //!  - #MessageCount - количество сообщений для ОФД,
    //!  - #DocumentNumber - номер документа для ОФД первого в очереди,
    //!  - #Date - дата документа для ОФД первого в очереди,
    //!  - #Time - время документа для ОФД первого в очереди.
    //!
    //! @return Код ошибки
    //!
    int FNGetInfoExchangeStatus();

    //!
    //! @brief Запрос квитанции о получении данных в ОФД по номеру документа.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #DocumentNumber - номер ФД.
    //!
    //! @par Модифицируемые свойства:
    //!  - #Date - дата,
    //!  - #Time - время,
    //!  - #FiscalSignOFD - фискальный признак ОФД,
    //!  - #DocumentNumber - номер ФД.
    //!
    //! @return Код ошибки
    //!
    int FNGetOFDTicketByDocNumber();

    //!
    //! @brief Запрос количества ФД, на которые нет квитанции.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #DocumentNumber - количество неподтверждённых ФД.
    //!
    //! @return Код ошибки
    //!
    int FNGetUnconfirmedDocCount();

    //!
    //! @brief Прочитать запрошенный командой #FNRequestFiscalDocumentTLV фискальный документ в
    //! формате TLV.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #TLVData - TLV структура.
    //!
    //! @return Код ошибки
    //!
    int FNReadFiscalDocumentTLV();

    //!
    //! @brief Запросить фискальный документ в формате TLV для дальнейшего чтения при помощи
    //! метода #FNReadFiscalDocumentTLV
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #DocumentNumber - номер ФД.
    //!
    //! @par Модифицируемые свойства:
    //!  - #DocumentType - тип фискального документа,
    //!  - #DataLength - длина данных.
    //!
    //! @return Код ошибки
    //!
    int FNRequestFiscalDocumentTLV();

    //!
    //! @brief Сформировать отчет о перерегистрации ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!  - #TaxType - код системы налогообложения,
    //!  - #WorkMode - режим работы,
    //!  - #RegistrationReasonCode  - код причины перерегистрации.
    //!
    //! @par Модифицируемые свойства:
    //!  - #DocumentNumber - номер ФД,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString - фискальный признак документа в виде строки.
    //!
    //! @return Код ошибки
    //!
    int FNBuildReregistrationReport();

    //!
    //! @brief Запросить итоги фискализации ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора.
    //!
    //! @par Модифицируемые свойства:
    //!  - #Date  - дата фискализации,
    //!  - #Time  - время фискализации,
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!  - #TaxType - код системы налогообложения,
    //!  - #WorkMode - режим работы,
    //!  - #RegistrationReasonCode - код причины перерегистрации,
    //!  - #DocumentNumber - номер ФД фискализации,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString фискальный признак документа в виде строки,
    //!  - #WorkModeEx - расширенные признаки работы ККТ,
    //!  - #RegistrationReasonCodeEx - Код причины изменения сведений о ККТ,
    //!  - #INNOFD - ИНН ОФД.
    //!
    //! @return Код ошибки
    //!
    int FNGetFiscalizationResult();

    //!
    //! @brief Количество документов
    //!
    //! @par Методы доступа:
    //!   #Get_DocumentCount, #Set_DocumentCount
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument, #FNBuildCalculationStateReport
    //!
    DOXYGEN_PROPERTY(int DocumentCount)
    //!
    //! @brief Возвращает значение свойства #DocumentCount
    //! @return DocumentCount
    //! @relates DocumentCount
    //!
    int Get_DocumentCount() const;
    //!
    //! @brief Устанавливает значение свойства #DocumentCount
    //! @param value Новое значение DocumentCount
    //! @relates DocumentCount
    //!
    void Set_DocumentCount(int value);

    //!
    //! @brief Номер чека
    //!
    //! @par Методы доступа:
    //!   #Get_ReceiptNumber, #Set_ReceiptNumber
    //!
    //! @par Модифицируется методами:
    //!   #FNBuildCorrectionReceipt, #FNGetCurrentSessionParams
    //!
    DOXYGEN_PROPERTY(int ReceiptNumber)
    //!
    //! @brief Возвращает значение свойства #ReceiptNumber
    //! @return ReceiptNumber
    //! @relates ReceiptNumber
    //!
    int Get_ReceiptNumber() const;
    //!
    //! @brief Устанавливает значение свойства #ReceiptNumber
    //! @param value Новое значение ReceiptNumber
    //! @relates ReceiptNumber
    //!
    void Set_ReceiptNumber(int value);

    //!
    //! @brief Статус информационного обмена
    //!
    //! Статус информационного обмена.
    //! Битовое поле:
    //! - Бит 0 – транспортное соединение установлено
    //! - Бит 1 – есть сообщение для передачи в ОФД
    //! - Бит 2 – ожидание ответного сообщения (квитанции) от ОФД
    //! - Бит 3 – есть команда от ОФД
    //! - Бит 4 – изменились настройки соединения с ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_InfoExchangeStatus, #Set_InfoExchangeStatus
    //!
    //! @par Модифицируется методами:
    //!   #FNGetInfoExchangeStatus
    //!
    DOXYGEN_PROPERTY(int InfoExchangeStatus)
    //!
    //! @brief Возвращает значение свойства #InfoExchangeStatus
    //! @return InfoExchangeStatus
    //! @relates InfoExchangeStatus
    //!
    int Get_InfoExchangeStatus() const;
    //!
    //! @brief Устанавливает значение свойства #InfoExchangeStatus
    //! @param value Новое значение InfoExchangeStatus
    //! @relates InfoExchangeStatus
    //!
    void Set_InfoExchangeStatus(int value);

    //!
    //! @brief Состояние сообщения
    //!
    //! Начато чтение сообщения для ОФД:
    //! - 0 – Нет
    //! - 1 – Да
    //!
    //! Состояние по передаче уведомлений
    //! - 0 - нет активного обмена
    //! - 1 - начато чтение уведомления
    //! - 2 - ожидание квитанции на уведомление

    //!
    //! @par Методы доступа:
    //!   #Get_MessageState, #Set_MessageState
    //!
    //! @par Модифицируется методами:
    //!   #FNGetInfoExchangeStatus, FNGetKMServerExchangeStatus
    //!
    DOXYGEN_PROPERTY(int MessageState)
    //!
    //! @brief Возвращает значение свойства #MessageState
    //! @return MessageState
    //! @relates MessageState
    //!
    int Get_MessageState() const;
    //!
    //! @brief Устанавливает значение свойства #MessageState
    //! @param value Новое значение MessageState
    //! @relates MessageState
    //!
    void Set_MessageState(int value);

    //!
    //! @brief Количество сообщений
    //!
    //! Количество сообщений для передачи в ОФД.
    //!
    //! @par Методы доступа:
    //!   #Get_MessageCount, #Set_MessageCount
    //!
    //! @par Модифицируется методами:
    //!   #FNGetInfoExchangeStatus, #FNGetMarkingCodeWorkStatus, #FNGetKMServerExchangeStatus
    //!
    DOXYGEN_PROPERTY(int MessageCount)
    //!
    //! @brief Возвращает значение свойства #MessageCount
    //! @return MessageCount
    //! @relates MessageCount
    //!
    int Get_MessageCount() const;
    //!
    //! @brief Устанавливает значение свойства #MessageCount
    //! @param value Новое значение MessageCount
    //! @relates MessageCount
    //!
    void Set_MessageCount(int value);
    //!
    //! @brief Номер сообщения
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MessageNumber, #Set_MessageNumber
    //!
    //! @par Модифицируется методами:
    //!   #FNGetKMServerExchangeStatus
    //!
    DOXYGEN_PROPERTY(int64_t MessageNumber)
    //!
    //! @brief Возвращает значение свойства #MessageNumber
    //! @return MessageNumber
    //! @relates MessageNumber
    //!
    int64_t Get_MessageNumber() const;
    //!
    //! @brief Устанавливает значение свойства #MessageNumber
    //! @param value Новое значение MessageNumber
    //! @relates MessageNumber
    //!
    void Set_MessageNumber(int64_t value);
    //!
    //! @brief Тип отчета
    //!
    //! Тип отчет регистрации КТТ.
    //!
    //! Возможные значения:
    //!
    //! | Значение |                  Тип отчета                                         |
    //! |----------|---------------------------------------------------------------------|
    //! |   0      | Отчет о регистрации КТТ                                             |
    //! |   1      | Отчет об изменении параметров регистрации ККТ, в связи с заменой ФН |
    //! |   2      | Отчет об изменении параметров регистрации ККТ без замены ФН         |
    //!
    //! @par Методы доступа:
    //!   #Get_ReportTypeInt, #Set_ReportTypeInt
    //!
    //! @par Используется методом:
    //!   #FNBeginRegistrationReport
    //!
    DOXYGEN_PROPERTY(int ReportTypeInt)
    //!
    //! @brief Возвращает значение свойства #ReportTypeInt
    //! @return ReportTypeInt
    //! @relates ReportTypeInt
    //!
    int Get_ReportTypeInt() const;
    //!
    //! @brief Устанавливает значение свойства #ReportTypeInt
    //! @param value Новое значение ReportTypeInt
    //! @relates ReportTypeInt
    //!
    void Set_ReportTypeInt(int value);

    int FNDiscountTaxOperation();

    //!
    //! @brief Закрытие чека расширенное в ФН.
    //!
    //! Закрытие чека расширенное в ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Согласно ФФД 1.05 для указания суммы предварительной оплаты (аванс) необходимо
    //! использовать свойство #Summ14, для суммы последующей оплаты (кредит) необходимо
    //! использовать свойство #Summ15, для иной формы оплаты(оплата встречным предоставлением)
    //! необходимо использовать свойство #Summ16.
    //!
    //! @note В режиме начисления налогов 1(1 - я таблица) суммы налогов на позицию и на чек
    //! должны передаваться из верхнего ПО.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #Summ1 - сумма типа оплаты 1,
    //!  - #Summ2 - сумма типа оплаты 2,
    //!  - #Summ3 - сумма типа оплаты 3,
    //!  - #Summ4 - сумма типа оплаты 4,
    //!  - #Summ5 - сумма типа оплаты 5,
    //!  - #Summ6 - сумма типа оплаты 6,
    //!  - #Summ7 - сумма типа оплаты 7,
    //!  - #Summ8 - сумма типа оплаты 8,
    //!  - #Summ9 - сумма типа оплаты 9,
    //!  - #Summ10 - сумма типа оплаты 10,
    //!  - #Summ11 - сумма типа оплаты 11,
    //!  - #Summ12 - сумма типа оплаты 12,
    //!  - #Summ13 - сумма типа оплаты 13,
    //!  - #Summ14 - сумма предварительной оплаты (аванс),
    //!  - #Summ15 - сумма последующей оплаты (кредит),
    //!  - #Summ16 - сумма иной формы оплаты (оплата встречным предоставлением),
    //!  - #RoundingSumm - округление до рубля в копейках,
    //!  - #TaxValue1 - сумма налога 1,
    //!  - #TaxValue2 - сумма налога 2,
    //!  - #TaxValue3 - сумма налога 3,
    //!  - #TaxValue4 - сумма налога 4,
    //!  - #TaxValue5 - сумма налога 5,
    //!  - #TaxValue6 - сумма налога 6,
    //!  - #TaxValue7 - сумма налога 7,
    //!  - #TaxValue8 - сумма налога 8,
    //!  - #TaxValue9 - сумма налога 9,
    //!  - #TaxValue10 - сумма налога 10,
    //!  - #TaxType - система налогообложения,
    //!  - #StringForPrinting Строка для печати.
    //!
    //! @par Модифицируемые свойства:
    //!  - #Change - сумма сдачи,
    //!  - #DocumentNumber - номер ФД,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString - фискальный признак документа в виде строки.
    //!
    //! @return Код ошибки
    //!
    int FNCloseCheckEx();

    int64_t Get_ChargeValue() const;
    int64_t Get_DiscountValue() const;

    //!
    //! @brief Сумма налога
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue, #Set_TaxValue
    //!
    //! @par Используется методами:
    //!   #FNOperation
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue)
    //!
    //! @brief Возвращает значение свойства #TaxValue
    //! @return TaxValue
    //! @relates TaxValue
    //!
    int64_t Get_TaxValue() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue
    //! @param value Новое значение TaxValue
    //! @relates TaxValue
    //!
    void Set_TaxValue(int64_t value);

    void Set_ChargeValue(int64_t value);
    void Set_DiscountValue(int64_t value);

    //!
    //! @brief Код причины перерегистрации
    //!
    //! Допустимые значения:
    //! - 1 – замена ФН;
    //! - 2 – замена ОФД;
    //! - 3 – изменение реквизитов;
    //! - 4 – изменение настроек ККТ.
    //!
    //! @par Методы доступа:
    //!   #Get_RegistrationReasonCode, #Set_RegistrationReasonCode
    //!
    //! @par Используется методами:
    //!   #FNBuildRegistrationReport.
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument, #FNGetFiscalizationResult.
    //!
    DOXYGEN_PROPERTY(int RegistrationReasonCode)
    //!
    //! @brief Возвращает значение свойства #RegistrationReasonCode
    //! @return RegistrationReasonCode
    //! @relates RegistrationReasonCode
    //!
    int Get_RegistrationReasonCode() const;
    //!
    //! @brief Устанавливает значение свойства #RegistrationReasonCode
    //! @param value Новое значение RegistrationReasonCode
    //! @relates RegistrationReasonCode
    //!
    void Set_RegistrationReasonCode(int value);

    std::string Get_DiscountName() const;
    void Set_DiscountName(const std::string& value);

    //!
    //! @brief Передает в ФН тег 1008 (“телефон или e-mail покупателя”).
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #CustomerEmail- Еmail покупателя
    //!
    //! @return Код ошибки
    //!
    int FNSendCustomerEmail();

    //!
    //! @brief EmailПользователя
    //!
    //! Телефон или е-mail покупателя.
    //!
    //! @par Методы доступа:
    //!   #Get_CustomerEmail, #Set_CustomerEmail
    //!
    //! @par Используется методами:
    //!   #FNSendCustomerEmail.
    //!
    DOXYGEN_PROPERTY(std::string CustomerEmail)
    //!
    //! @brief Возвращает значение свойства #CustomerEmail
    //! @return CustomerEmail
    //! @relates CustomerEmail
    //!
    std::string Get_CustomerEmail() const;
    //!
    //! @brief Устанавливает значение свойства #CustomerEmail
    //! @param value Новое значение CustomerEmail
    //! @relates CustomerEmail
    //!
    void Set_CustomerEmail(const std::string& value);

    int Annulment();

    //!
    //! @brief Дата2
    //!
    //! Дата первого неподтвержденного документа.
    //!
    //! @par Методы доступа:
    //!   #Get_Date2, #Set_Date2
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument
    //!
    DOXYGEN_PROPERTY(std::time_t Date2)
    //!
    //! @brief Возвращает значение свойства #Date2
    //! @return Date2
    //! @relates Date2
    //!
    std::time_t Get_Date2() const;
    //!
    //! @brief Устанавливает значение свойства #Date2
    //! @param value Новое значение Date2
    //! @relates Date2
    //!
    void Set_Date2(std::time_t value);

    //!
    //! @brief Время2
    //!
    //! Время первого неподтвержденного документа.
    //!
    //! @par Методы доступа:
    //!   #Get_Time2, #Set_Time2
    //!
    //! @par Модифицируется методами:
    //!   #FNFindDocument
    //!
    DOXYGEN_PROPERTY(std::time_t Time2)
    //!
    //! @brief Возвращает значение свойства #Time2
    //! @return Time2
    //! @relates Time2
    //!
    std::time_t Get_Time2() const;
    //!
    //! @brief Устанавливает значение свойства #Time2
    //! @param value Новое значение Time2
    //! @relates Time2
    //!
    void Set_Time2(std::time_t value);

    //!
    //! @brief Фискальный признак ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_FiscalSignOFD, #Set_FiscalSignOFD
    //!
    //! @par Модифицируется методами:
    //!   #FNGetOFDTicketByDocNumber
    //!
    DOXYGEN_PROPERTY(std::string FiscalSignOFD)
    //!
    //! @brief Возвращает значение свойства #FiscalSignOFD
    //! @return FiscalSignOFD
    //! @relates FiscalSignOFD
    //!
    std::string Get_FiscalSignOFD() const;
    //!
    //! @brief Устанавливает значение свойства #FiscalSignOFD
    //! @param value Новое значение FiscalSignOFD
    //! @relates FiscalSignOFD
    //!
    void Set_FiscalSignOFD(const std::string& value);

    //!
    //! @brief Автоматическое открытие смены, если закрыта
    //!
    //! @par Методы доступа:
    //!   #Get_AutoOpenSession, #Set_AutoOpenSession
    //!
    //! @par Используется методами:
    //!   #Buy, #OpenCheck, #ReturnBuy, #ReturnSale, #Sale,
    //!   #FNBeginCorrectionReceipt, #FNBuildCorrectionReceipt,
    //!   #FNBuildCorrectionReceipt2, #FNOperation, #FNOpenCheckCorrection
    //!
    DOXYGEN_PROPERTY(bool AutoOpenSession)
    //!
    //! @brief Возвращает значение свойства #AutoOpenSession
    //! @return AutoOpenSession
    //! @relates AutoOpenSession
    //!
    bool Get_AutoOpenSession() const;
    //!
    //! @brief Устанавливает значение свойства #AutoOpenSession
    //! @param value Новое значение AutoOpenSession
    //! @relates AutoOpenSession
    void Set_AutoOpenSession(bool value);

    int FNDiscountChargeRN();

    //!
    //! @brief Экспорт всех таблиц в файл
    //!
    //! Экспортирует таблицы в формате CSV в кодировке utf-8:
    //! Формат записей: № таблицы, №строки, № поля, размер поля, тип поля, мин, макс, 'наименование поля', 'значение'
    //!
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #FileName - файл дл
    //!
    //! @return Код ошибки
    //!
    int ExportTables();
    //!
    //! @brief Импорт таблиц из файла csv файла
    //!
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #FileName - файл дл
    //!
    //! @return Код ошибки
    //!
    int ImportTables();

    //!
    //! @brief Отправить произвольный тег в ФН.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #TagNumber - Номер Тега
    //!  - #TagType - Тип Тега
    //!  - #TagValueInt - Значение Тега целое
    //!  - #TagValueStr - Значение тега строка
    //!  - #TagValueFVLN - Значение тегаFVLN
    //!  - #TagValueDateTime - Значение тега дата время
    //!  - #TagValueBin - Значение тега бинарное
    //!  - #TagValueLength - Длина значения тега
    //!
    //! @return Код ошибки
    //!
    int FNSendTag();

    //!
    //! @brief Номер тега
    //!
    //! Номер тега согласно документу ФНС “Форматы фискальных документов”.
    //!
    //! @par Методы доступа:
    //!   #Get_TagNumber, #Set_TagNumber
    //!
    //! @par Используется методами:
    //!   #FNAddTag, #FNSendTag, #FNBeginSTLVTag
    //!
    DOXYGEN_PROPERTY(int TagNumber)
    //!
    //! @brief Возвращает значение свойства #TagNumber
    //! @return TagNumber
    //! @relates TagNumber
    //!
    int Get_TagNumber() const;
    //!
    //! @brief Устанавливает значение свойства #TagNumber
    //! @param value Новое значение TagNumber
    //! @relates TagNumber
    //!
    void Set_TagNumber(int value);

    //!
    //! @brief Тип тега
    //!
    //! Может принимать одно из следующих значений:
    //!  - TT_Byte = 0. Тип Byte
    //!  - TT_Uint16 = 1. Тип Uint16
    //!  - TT_Uint32 = 2. Тип UInt32
    //!  - TT_VLN = 3. Тип VLN
    //!  - TT_FVLN = 4. Тип FVLN
    //!  - TT_BitMask = 5. Тип "битовое поле"
    //!  - TT_UnixTime = 6. Тип "время"
    //!  - TT_String = 7. Тип "строка".
    //!
    //! @par Методы доступа:
    //!   #Get_TagType, #Set_TagType
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(int TagType)
    //!
    //! @brief Возвращает значение свойства #TagType
    //! @return TagType
    //! @relates TagType
    //!
    int Get_TagType() const;
    //!
    //! @brief Устанавливает значение свойства #TagType
    //! @param value Новое значение TagType
    //! @relates TagType
    //!
    void Set_TagType(int value);

    //!
    //! @brief Значение целочисленного тега
    //!
    //! Используется для следующих типов TagType: TT_Byte, TT_Uint16, TT_Uint32.
    //!
    //! @par Методы доступа:
    //!   #Get_TagValueInt, #Set_TagValueInt
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(int TagValueInt)
    //!
    //! @brief Возвращает значение свойства #TagValueInt
    //! @return TagValueInt
    //! @relates TagValueInt
    //!
    uint64_t Get_TagValueInt() const;
    //!
    //! @brief Устанавливает значение свойства #TagValueInt
    //! @param value Новое значение TagValueInt
    //! @relates TagValueInt
    //!
    void Set_TagValueInt(uint64_t value);

    //!
    //! @brief Строковое значение тега
    //!
    //! Используется для типа TagType TT_String.
    //!
    //! @par Методы доступа:
    //!   #Get_TagValueStr, #Set_TagValueStr
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(std::string TagValueStr)
    //!
    //! @brief Возвращает значение свойства #TagValueStr
    //! @return TagValueStr
    //! @relates TagValueStr
    //!
    std::string Get_TagValueStr() const;
    //!
    //! @brief Устанавливает значение свойства #TagValueStr
    //! @param value Новое значение TagValueStr
    //! @relates TagValueStr
    //!
    void Set_TagValueStr(const std::string& value);

    //!
    //! @brief Значение тега с плавающей запятой
    //!
    //! Используется для TagType TT_FVLN.
    //!
    //! @par Методы доступа:
    //!   #Get_TagValueFVLN, #Set_TagValueFVLN
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(double TagValueFVLN)
    //!
    //! @brief Возвращает значение свойства #TagValueFVLN
    //! @return TagValueFVLN
    //! @relates TagValueFVLN
    //!
    double Get_TagValueFVLN() const;
    //!
    //! @brief Устанавливает значение свойства #TagValueFVLN
    //! @param value Новое значение TagValueFVLN
    //! @relates TagValueFVLN
    //!
    void Set_TagValueFVLN(double value);

    //!
    //! @brief Значение тега с датой и временем
    //!
    //! Используется для TagType TT_UnixType.
    //!
    //! @par Методы доступа:
    //!   #Get_TagValueDateTime, #Set_TagValueDateTime
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(std::time_t TagValueDateTime)
    //!
    //! @brief Возвращает значение свойства #TagValueDateTime
    //! @return TagValueDateTime
    //! @relates TagValueDateTime
    //!
    std::time_t Get_TagValueDateTime() const;
    //!
    //! @brief Устанавливает значение свойства #TagValueDateTime
    //! @param value Новое значение TagValueDateTime
    //! @relates TagValueDateTime
    //!
    void Set_TagValueDateTime(std::time_t value);

    //!
    //! @brief Значение тега с бинарными данными
    //!
    //! Используется для типа TagType TT_VLN, TT_BitMask.
    //!
    //! @par Методы доступа:
    //!   #Get_TagValueBin, #Set_TagValueBin
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(std::string TagValueBin)
    //!
    //! @brief Возвращает значение свойства #TagValueBin
    //! @return TagValueBin
    //! @relates TagValueBin
    //!
    std::string Get_TagValueBin() const;
    //!
    //! @brief Устанавливает значение свойства #TagValueBin
    //! @param value Новое значение TagValueBin
    //! @relates TagValueBin
    //!
    void Set_TagValueBin(const std::string& value);

    //!
    //! @brief Количество байт длины значения тега
    //!
    //! Используется для типов TagType: TT_VLN, TT_FVLN, TT_BitMask.
    //!
    //! @par Методы доступа:
    //!   #Get_TagValueLength, #Set_TagValueLength
    //!
    //! @par Используется методами:
    //!   #FNAddTag
    //!
    DOXYGEN_PROPERTY(int TagValueLength)
    //!
    //! @brief Возвращает значение свойства #TagValueLength
    //! @return TagValueLength
    //! @relates TagValueLength
    //!
    int Get_TagValueLength() const;
    //!
    //! @brief Устанавливает значение свойства #TagValueLength
    //! @param value Новое значение TagValueLength
    //! @relates TagValueLength
    //!
    void Set_TagValueLength(int value);

    //!
    //! @brief Получить заводской номер устройства
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!
    //! @par Модифицируемые свойства:
    //!  - #SerialNumber - заводской номер
    //!
    //! @return Код ошибки
    //!
    int ReadSerialNumber();
    int FNPrintOperatorConfirm();

    //!
    //! @brief Запрос итогов фискализации ФН по номеру
    //!
    //! Запрос итогов фискализации по номеру фискализации.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Работает во всех режимах. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #RegistrationNumber - номер фискализации.
    //!
    //! @par Модифицируемые свойства:
    //!  - #Date  - дата фискализации,
    //!  - #Time  - время фискализации,
    //!  - #INN - ИНН,
    //!  - #KKTRegistrationNumber - регистрационный номер ККТ,
    //!  - #TaxType - код системы налогообложения,
    //!  - #WorkMode - режим работы,
    //!  - #RegistrationReasonCode - код причины перерегистрации,
    //!  - #DocumentNumber - номер ФД фискализации,
    //!  - #FiscalSign - фискальный признак,
    //!  - #FiscalSignAsString фискальный признак документа в виде строки,
    //!  - #WorkModeEx - расширенные признаки работы ККТ,
    //!  - #RegistrationReasonCodeEx - Код причины изменения сведений о ККТ,
    //!  - #INNOFD - ИНН ОФД.
    //!
    //! @return Код ошибки
    //!
    int FNGetFiscalizationResultByNumber();

    int AnnulmentRB();
    int FNGetTagDescription();
    std::string Get_TagDescription() const;
    void Set_TagDescription(const std::string& value);
    int FNPrintDocument();
    //!
    //! @brief Получить документ из ФН в виде текста.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #DocumentNumber - номер ФД.
    //!  - #ShowTagNumber - Показывать номер тэга.
    //!
    //! @par Модифицируемые свойства:
    //!  - #StringForPrinting - Cтрока с перечислением тегов ФН и их значений, формат зависит от DFE_DataPresentation
    //!
    //! Выдает документ или в виде строк разделенных \n (уровень вложенности тега определяется количеством пробелов в начале строки) или в виде json.
    //! Вид представления задается методом #SetDeviceFunction функцией DFE_DataPresentation.
    //!
    //! @return Код ошибки
    //!
    int FNGetDocumentAsString();

    //! @brief Выводить номер тэга
    //!
    //! Если установлен, при выводе данных чека по ФД в строку добавляется номер тэга.
    //!
    //! @par Методы доступа:
    //!   #Get_ShowTagNumber, #Set_ShowTagNumber
    //!
    //! @par Используется методами:
    //!   #FNGetDocumentAsString
    //!
    DOXYGEN_PROPERTY(bool ShowTagNumber)
    //!
    //! @brief Возвращает значение свойства #ShowTagNumber
    //! @return ShowTagNumber
    //! @relates ShowTagNumber
    //!
    bool Get_ShowTagNumber() const;
    //!
    //! @brief Устанавливает значение свойства #ShowTagNumber
    //! @param value Новое значение ShowTagNumber
    //! @relates ShowTagNumber
    //!
    void Set_ShowTagNumber(bool value);
    int Ping();
    std::string Get_URL() const;
    void Set_URL(const std::string& value);
    int Get_PingTime() const;
    void Set_PingTime(int value);
    int Get_PingResult() const;
    void Set_PingResult(int value);
    bool Get_ICSEnabled() const;
    int Get_ICSPollPeriod() const;
    void Set_ICSEnabled(bool value);
    void Set_ICSPollPeriod(int value);

    //!
    //! @brief Операция в ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Если #Summ1Enabled имеет значение "ложь", то сумма операции рассчитывается кассой
    //! как цена*количество, в противном случае сумма операции берётся из значения #Summ1 и не
    //! должна отличаться более чем на +-1 коп от рассчитанной кассой.
    //!
    //! @note В режиме начисления налогов 1(1 Таблица)налоги на позицию и на чек должны
    //! передаваться из верхнего ПО. Если #TaxValueEnabled имеет значение "Ложь", то считается,
    //! что сумма налога на позицию не указана, в противном случае сумма налога учитывается ФР и
    //! передаётся в ОФД. Для налогов 3 и 4 сумма налога всегда считается равной нулю и в ОФД не
    //! передаётся.
    //!
    //! @note Если строка начинается символами //, то она передаётся на сервер ОФД, но не
    //! печатается на кассе.
    //!
    //! @note Количество округляется до 6 знаков после запятой.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #CheckType - тип операции,
    //!  - #Quantity - количество (до 6 знаков после запятой),
    //!  - #Price - цена(в копейках),
    //!  - #Summ1 - сумма операции(в копейках),
    //!  - #Summ1Enabled - использовать сумму операции,
    //!  - #TaxValue - сумма нолога(в копейках),
    //!  - #TaxValueEnabled - использовать сумму налога,
    //!  - #Tax1 - налоговая ставка,
    //!  - #Department - отдел (0..16 режим свободной продажи, 255 – режим продажи по коду
    //!  товара),
    //!  - #PaymentTypeSign - признак способа расчета,
    //!  - #PaymentItemSign - признак предмета расчета,
    //!  - #StringForPrinting - наименование товара.
    //!  - #MeasureUnit - мера количества предмета расчета (ФФД 1.2)
    //!  - #DivisionalQuantity  - признак дробной реализации маркированного товара (ФФД 1.2)
    //!  - #Numerator  - числитель дробной части реализации маркированного товара, #DivisionalQuantity должно быть True (ФФД 1.2)
    //!  - #Denominator  - знаменатель дробной части реализации маркированного товара, #DivisionalQuantity должно быть True (ФФД 1.2)
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @return Код ошибки
    //!
    int FNOperation();

    //!
    //! @brief Отправить TLV, привязанный к операции.
    //!
    //! Передать произвольную TLV структуру, привязанную к операции.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #TLVData - данные TLV структуры.
    //!
    //! @return Код ошибки
    //!
    int FNSendTLVOperation();

    //!
    //! @brief Сумма округления
    //!
    //! @par Методы доступа:
    //!   #Get_RoundingSumm, #Set_RoundingSumm
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int RoundingSumm)
    //!
    //! @brief Возвращает значение свойства #RoundingSumm
    //! @return RoundingSumm
    //! @relates RoundingSumm
    //!
    int Get_RoundingSumm() const;
    //!
    //! @brief Устанавливает значение свойства #RoundingSumm
    //! @param value Новое значение RoundingSumm
    //! @relates RoundingSumm
    //!
    void Set_RoundingSumm(int value);

    //!
    //! @brief Значение налога 1
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue1, #Set_TaxValue1
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue1)
    //!
    //! @brief Возвращает значение свойства #TaxValue1
    //! @return TaxValue1
    //! @relates TaxValue1
    //!
    int64_t Get_TaxValue1() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue1
    //! @param value Новое значение TaxValue1
    //! @relates TaxValue1
    //!
    void Set_TaxValue1(int64_t value);

    //!
    //! @brief Значение налога 2
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue2, #Set_TaxValue2
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue2)
    //!
    //! @brief Возвращает значение свойства #TaxValue2
    //! @return TaxValue2
    //! @relates TaxValue2
    //!
    int64_t Get_TaxValue2() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue2
    //! @param value Новое значение TaxValue2
    //! @relates TaxValue2
    //!
    void Set_TaxValue2(int64_t value);

    //!
    //! @brief Значение налога 3
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue3, #Set_TaxValue3
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue3)
    //!
    //! @brief Возвращает значение свойства #TaxValue3
    //! @return TaxValue3
    //! @relates TaxValue3
    //!
    int64_t Get_TaxValue3() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue3
    //! @param value Новое значение TaxValue3
    //! @relates TaxValue3
    //!
    void Set_TaxValue3(int64_t value);

    //!
    //! @brief Значение налога 4
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue4, #Set_TaxValue4
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue4)
    //!
    //! @brief Возвращает значение свойства #TaxValue4
    //! @return TaxValue4
    //! @relates TaxValue4
    //!
    int64_t Get_TaxValue4() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue4
    //! @param value Новое значение TaxValue4
    //! @relates TaxValue4
    //!
    void Set_TaxValue4(int64_t value);

    //!
    //! @brief Значение налога 5
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue5, #Set_TaxValue5
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue5)
    //!
    //! @brief Возвращает значение свойства #TaxValue5
    //! @return TaxValue5
    //! @relates TaxValue5
    //!
    int64_t Get_TaxValue5() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue5
    //! @param value Новое значение TaxValue5
    //! @relates TaxValue5
    //!
    void Set_TaxValue5(int64_t value);

    //!
    //! @brief Значение налога 6
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue6, #Set_TaxValue6
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue6)
    //!
    //! @brief Возвращает значение свойства #TaxValue6
    //! @return TaxValue6
    //! @relates TaxValue6
    //!
    int64_t Get_TaxValue6() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue6
    //! @param value Новое значение TaxValue6
    //! @relates TaxValue6
    //!
    void Set_TaxValue6(int64_t value);

    //!
    //! @brief Значение налога 7
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue7, #Set_TaxValue7
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue7)
    //!
    //! @brief Возвращает значение свойства #TaxValue6
    //! @return TaxValue7
    //! @relates TaxValue7
    //!
    int64_t Get_TaxValue7() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue7
    //! @param value Новое значение TaxValue7
    //! @relates TaxValue7
    //!
    void Set_TaxValue7(int64_t value);

    //!
    //! @brief Значение налога 8
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue8, #Set_TaxValue8
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue8)
    //!
    //! @brief Возвращает значение свойства #TaxValue8
    //! @return TaxValue8
    //! @relates TaxValue8
    //!
    int64_t Get_TaxValue8() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue8
    //! @param value Новое значение TaxValue8
    //! @relates TaxValue8
    //!
    void Set_TaxValue8(int64_t value);

    //!
    //! @brief Значение налога 9
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue9, #Set_TaxValue9
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue9)
    //!
    //! @brief Возвращает значение свойства #TaxValue9
    //! @return TaxValue9
    //! @relates TaxValue9
    //!
    int64_t Get_TaxValue9() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue9
    //! @param value Новое значение TaxValue9
    //! @relates TaxValue9
    //!
    void Set_TaxValue9(int64_t value);

    //!
    //! @brief Значение налога 10
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValue10, #Set_TaxValue10
    //!
    //! @par Используется методами:
    //!   #FNCloseCheckEx
    //!
    DOXYGEN_PROPERTY(int64_t TaxValue10)
    //!
    //! @brief Возвращает значение свойства #TaxValue6
    //! @return TaxValue10
    //! @relates TaxValue10
    //!
    int64_t Get_TaxValue10() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValue10
    //! @param value Новое значение TaxValue10
    //! @relates TaxValue10
    //!
    void Set_TaxValue10(int64_t value);

    //!
    //! @brief Сумма1 вкл
    //!
    //! @par Методы доступа:
    //!   #Get_Summ1Enabled, #Set_Summ1Enabled
    //!
    //! @par Используется методами:
    //!   #FNOperation
    //!
    DOXYGEN_PROPERTY(bool Summ1Enabled)
    //!
    //! @brief Возвращает значение свойства #Summ1Enabled
    //! @return Summ1Enabled
    //! @relates Summ1Enabled
    //!
    bool Get_Summ1Enabled() const;
    //!
    //! @brief Устанавливает значение свойства #Summ1Enabled
    //! @param value Новое значение Summ1Enabled
    //! @relates Summ1Enabled
    //!
    void Set_Summ1Enabled(bool value);

    bool Get_TaxValue1Enabled() const;
    bool Get_TaxValue2Enabled() const;
    bool Get_TaxValue3Enabled() const;
    bool Get_TaxValue4Enabled() const;
    bool Get_TaxValue5Enabled() const;
    bool Get_TaxValue6Enabled() const;
    bool Get_TaxValue7Enabled() const;
    bool Get_TaxValue8Enabled() const;
    bool Get_TaxValue9Enabled() const;
    bool Get_TaxValue10Enabled() const;
    bool Get_AddTaxesEnabled() const;

    //!
    //! @brief Значение налога1 вкл
    //!
    //! Признак самостоятельного расчета суммы налога.
    //!
    //! @par Методы доступа:
    //!   #Get_TaxValueEnabled, #Set_TaxValueEnabled
    //!
    //! @par Используется методами:
    //!   #FNOperation
    //!
    DOXYGEN_PROPERTY(bool TaxValueEnabled)
    //!
    //! @brief Возвращает значение свойства #TaxValueEnabled
    //! @return TaxValueEnabled
    //! @relates TaxValueEnabled
    //!
    bool Get_TaxValueEnabled() const;
    //!
    //! @brief Устанавливает значение свойства #TaxValueEnabled
    //! @param value Новое значение TaxValueEnabled
    //! @relates TaxValueEnabled
    //!
    void Set_TaxValueEnabled(bool value);

    void Set_TaxValue1Enabled(bool value);
    void Set_TaxValue2Enabled(bool value);
    void Set_TaxValue3Enabled(bool value);
    void Set_TaxValue4Enabled(bool value);
    void Set_TaxValue5Enabled(bool value);
    void Set_TaxValue6Enabled(bool value);
    void Set_TaxValue7Enabled(bool value);
    void Set_TaxValue8Enabled(bool value);
    void Set_TaxValue9Enabled(bool value);
    void Set_TaxValue10Enabled(bool value);
    void Set_AddTaxesEnabled(bool value);

    //!
    //! @brief Признак способа расчета
    //!
    //! Возможные значения:
    //!
    //! | Значение | Описание             |
    //! |----------|:-----------------------:|
    //! | 1        | Предоплата 100%      |
    //! | 2        | Частичная предоплата |
    //! | 3        | Аванс                |
    //! | 4        | Полный расчет        |
    //! | 5        | Частичный расчет     |
    //! | 6        | Передача в кредит    |
    //! | 7        | Оплата кредита       |
    //!
    //! @par Методы доступа:
    //!   #Get_PaymentTypeSign, #Set_PaymentTypeSign
    //!
    //! @par Используется методами:
    //!   #FNOperation
    //!
    DOXYGEN_PROPERTY(int PaymentTypeSign)
    //!
    //! @brief Возвращает значение свойства #PaymentTypeSign
    //! @return PaymentTypeSign
    //! @relates PaymentTypeSign
    //!
    int Get_PaymentTypeSign() const;
    //!
    //! @brief Устанавливает значение свойства #PaymentTypeSign
    //! @param value Новое значение PaymentTypeSign
    //! @relates PaymentTypeSign
    //!
    void Set_PaymentTypeSign(int value);

    //!
    //! @brief Признак предмета расчета
    //!
    //! Возможные значения:
    //!
    //! | Значение | Описание                  |
    //! |----------|:-------------------------:|
    //! | 1        | Товар                     |
    //! | 2        | Подакцизный товар         |
    //! | 3        | Работа                    |
    //! | 4        | Услуга                    |
    //! | 5        | Ставка азартной игры      |
    //! | 6        | Выигрыш азартной игры     |
    //! | 7        | Лотерейный билет          |
    //! | 8        | Выигрыш лотереи           |
    //! | 9        | Предоставление РИД        |
    //! | 10       | Платеж                    |
    //! | 11       | Агентское вознаграждение  |
    //! | 12       | Выплата                   |
    //! | 13       | Иной предмет расчета      |
    //! | 14       | Имущественное право       |
    //! | 15       | Внереализационный доход   |
    //! | 16       | Иные платежи и взносы     |
    //! | 17       | Торговый сбор             |
    //! | 18       | Курортный сбор            |
    //! | 19       | Залог                     |
    //! | 20       | Расход                    |
    //! | 21       | Взносы на ОПС ИП          |
    //! | 22       | Взносы на ОПС             |
    //! | 23       | Взносы на ОМС ИП          |
    //! | 24       | Взносы на ОМС             |
    //! | 25       | Взносы на ОСС             |
    //! | 26       | Платеж казино             |
    //!
    //! @par Методы доступа:
    //!   #Get_PaymentItemSign, #Set_PaymentItemSign
    //!
    //! @par Используется методами:
    //!   #FNOperation
    //!
    DOXYGEN_PROPERTY(int PaymentItemSign)
    //!
    //! @brief Возвращает значение свойства #PaymentItemSign
    //! @return PaymentItemSign
    //! @relates PaymentItemSign
    //!
    int Get_PaymentItemSign() const;
    //!
    //! @brief Устанавливает значение свойства #PaymentItemSign
    //! @param value Новое значение PaymentItemSign
    //! @relates PaymentItemSign
    //!
    void Set_PaymentItemSign(int value);

    //!
    //! @brief Сформировать чек коррекции V2.
    //!
    //! Сформировать чек коррекции. Команда версии 2. См. так же #FNBeginCorrectionReceipt.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #CorrectionType - Тип коррекции
    //!  - #CalculationSign - Признак расчёта
    //!  - #Summ1 - cумма по чеку,
    //!  - #Summ2 - cумма по чеку наличными,
    //!  - #Summ3 - сумма по чеку электронными,
    //!  - #Summ4 - сумма по чеку предоплатой,
    //!  - #Summ5 - сумма по чеку постоплатой,
    //!  - #Summ6 - сумма по чеку встречным представлением,
    //!  - #Summ7 - сумма НДС 20%,
    //!  - #Summ8 - сумма НДС 10%,
    //!  - #Summ9 - сумма расчета по ставке 0%,
    //!  - #Summ10 - сумма расчета по чеку без НДС,
    //!  - #Summ11 - сумма расчета по чеку 20/120,
    //!  - #Summ12 - сумма расчета по расч. ставке 10/110,
    //!  - #TaxType - код применяемой системы налогооблажения.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @par Модифицируемые свойства:
    //!  - #ReceiptNumber - номер чека,
    //!  - #DocumentNumber - номер фискального документа,
    //!  - #FiscalSign - фискальный признак.
    //!
    //! @return Код ошибки
    //!
    int FNBuildCorrectionReceipt2();

    //!
    //! @brief Признак расчета
    //!
    //! Диапазон значений:
    //! - 1 – коррекция прихода, операция, при которой пользователь вносит денежные средства
    //! коррекции;
    //! - 3 – коррекция расхода, операция, при которой пользователь изымает денежные средства.
    //!
    //! @par Методы доступа:
    //!   #Get_CalculationSign, #Set_CalculationSign
    //!
    //! @par Используется методами:
    //!   #FNBuildCorrectionReceipt2
    //!
    DOXYGEN_PROPERTY(int CalculationSign)
    //!
    //! @brief Возвращает значение свойства #CalculationSign
    //! @return CalculationSign
    //! @relates CalculationSign
    //!
    int Get_CalculationSign() const;
    //!
    //! @brief Устанавливает значение свойства #CalculationSign
    //! @param value Новое значение CalculationSign
    //! @relates CalculationSign
    //!
    void Set_CalculationSign(int value);

    //!
    //! @brief Тип коррекции
    //!
    //! Диапазон значений:
    //! 0 – самостоятельно;
    //! 1 – по предписанию.
    //!
    //! @par Методы доступа:
    //!   #Get_CorrectionType, #Set_CorrectionType
    //!
    //! @par Используется методами:
    //!   #FNBuildCorrectionReceipt2
    //!
    DOXYGEN_PROPERTY(int CorrectionType)
    //!
    //! @brief Возвращает значение свойства #CorrectionType
    //! @return CorrectionType
    //! @relates CorrectionType
    //!
    int Get_CorrectionType() const;
    //!
    //! @brief Устанавливает значение свойства #CorrectionType
    //! @param value Новое значение CorrectionType
    //! @relates CorrectionType
    //!
    void Set_CorrectionType(int value);

    int Get_OFDReadTimeout() const;
    void Set_OFDReadTimeout(int value);

    //!
    //! @brief Получить необнуляемые суммы в ФН.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Необнуляемые суммы обновляются после снятия отчета с
    //! гашением(#PrintReportWithCleaning)
    //!
    //! @par Модифицируемые свойства:
    //!  - #Summ1 - сумма прихода,
    //!  - #Summ2 - сумма расхода,
    //!  - #Summ3 - сумма возврата прихода,
    //!  - #Summ4 - сумма возврата расхода.
    //!
    //! @return Код ошибки
    //!
    int FNGetNonClearableSumm();
    //!
    //! @brief Автоматичесий обмен с ОФД средствами драйвера
    //!
    //! Передача данных в ОФД средствами драйвера (Ethernet over Driver).
    //! Если включено - драйвер в отдельном потоке опрашивает принтер и обмениватся данными с ОФД.
    //! Настройки соединения берутся из таблицы "Параметры ОФД".
    //!
    //! Для работы необходимо выставить поле "Режим обмена с ОФД" в 0.
    //! (Таблица 21: "Сетевые интерфейсы", Поле: 2) настройка вступает в силу после перезапуска ККТ.
    //! @par Используемые свойства:
    //!  - #OFDPollPeriod - время в секундах между попытками связи с ОФД
    //!
    //! @par Методы доступа:
    //!   #Get_AutoEoD, #Set_AutoEoD
    //!
    //!
    DOXYGEN_PROPERTY(bool AutoEoD)
    //!
    //! @brief Возвращает значение свойства #AutoEoD
    //! @return AutoEoD
    //! @relates AutoEoD
    //!
    bool Get_AutoEoD() const;
    //!
    //! @brief Устанавливает значение свойства #AutoEoD
    //! @param value Новое значение AutoEoD
    //! @relates AutoEoD
    //!
    void Set_AutoEoD(bool value);
    int ResetSerialNumber();
    int DBFindDocument();
    std::string Get_DBFilePath() const;
    void Set_DBFilePath(const std::string& value);
    int DBPrintDocument();
    int Get_KKTLicense() const;
    int Get_LicenseNumber() const;
    int Get_PUKCode() const;
    int ReadKKTLicenses();
    void Set_KKTLicense(int value);
    void Set_LicenseNumber(int value);
    void Set_PUKCode(int value);
    bool Get_OFDExchangeSuspended() const;
    void Set_OFDExchangeSuspended(bool value);
    int CloseCheckBel();
    //!
    //! @brief дублирует свойство @see AutoEoD
    //!
    //! @par Методы доступа:
    //!   #Get_AutoOFDExchange, #Set_AutoOFDExchange
    //!
    //!
    DOXYGEN_PROPERTY(bool AutoOFDExchange)
    //!
    //! @brief Возвращает значение свойства #AutoOFDExchange
    //! @return AutoOFDExchange
    //! @relates AutoOFDExchange
    //!
    bool Get_AutoOFDExchange() const;
    //!
    //! @brief Устанавливает значение свойства #AutoOFDExchange
    //! @param value Новое значение AutoOFDExchange
    //! @relates AutoOFDExchange
    //!
    void Set_AutoOFDExchange(bool value);
    int GetKKTLicenseByNumber();
    int WriteKKTLicense();
    //!
    //! @brief Передает в ФН тег 1117 (“адрес электронной почты отправителя чека”).
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #EmailAddress- Еmail отправителя
    //!
    //! @return Код ошибки
    //!
    int FNSendSenderEmail();
    //! @brief Еmail отправителя
    //!
    //! Значение тэга 1117 "адрес электронной почты отправителя чека"
    //!
    //! @par Методы доступа:
    //!   #Get_EmailAddress, #Set_EmailAddress
    //!
    //!
    DOXYGEN_PROPERTY(std::string EmailAddress)
    //! @brief Возвращает значение свойства #EmailAddress
    //! @return EmailAddress
    //! @relates EmailAddress
    //!
    std::string Get_EmailAddress() const;
    //!
    //! @brief Устанавливает значение свойства #EmailAddress
    //! @param value Новое значение EmailAddress
    //! @relates EmailAddress
    //!
    void Set_EmailAddress(const std::string& value);
    int64_t Get_Discount1() const;
    int64_t Get_Discount2() const;
    int64_t Get_Discount3() const;
    int64_t Get_Discount4() const;
    bool Get_UseTaxDiscountBel() const;
    void Set_Discount1(int64_t value);
    void Set_Discount2(int64_t value);
    void Set_Discount3(int64_t value);
    void Set_Discount4(int64_t value);
    void Set_UseTaxDiscountBel(bool value);
    std::string Get_Summ1AsString() const;
    std::string Get_Summ2AsString() const;
    std::string Get_Summ3AsString() const;
    std::string Get_Summ4AsString() const;
    int DBGetNextDocument();
    int DBPrintNextDocument();
    int DBQueryDocumentsInSession();
    int Get_DBDocType() const;
    void Set_DBDocType(int value);
    int Get_OPBarcodeInputType() const;
    std::string Get_OPIdPayment() const;
    int Get_OPRequisiteNumber() const;
    std::string Get_OPRequisiteValue() const;
    int Get_OPSystem() const;
    int Get_OPTransactionStatus() const;
    int Get_OPTransactionType() const;
    int OnlinePay();
    int OPGetLastRequisite();
    int OPGetLastStatus();
    void Set_OPBarcodeInputType(int value);
    void Set_OPIdPayment(const std::string& value);
    void Set_OPRequisiteNumber(int value);
    void Set_OPRequisiteValue(const std::string& value);
    void Set_OPSystem(int value);
    void Set_OPTransactionStatus(int value);
    void Set_OPTransactionType(int value);

    //!
    //! @brief Сгенерировать токен МОНО
    //!
    //! @par Модифицируемые свойства:
    //!  - #Token - новый токен МОНО
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @return Код ошибки
    //!
    int GenerateMonoToken();
    //! @brief Токен аутентификации
    //!
    //! @par Методы доступа:
    //!   #Get_Token, #Set_Token
    //!
    //!
    DOXYGEN_PROPERTY(std::string Token)
    //! @brief Возвращает значение свойства #Token
    //! @return Token
    //! @relates Token
    //!
    std::string Get_Token() const;
    //!
    //! @brief Устанавливает значение свойства #Token
    //! @param value Новое значение Token
    //! @relates Token
    //!
    void Set_Token(const std::string& value);

    //!
    //! @brief Перезагрузить ККТ.
    //!
    //! @note Перезагружает ККТ
    //!
    //! @return Код ошибки
    //!
    int RebootKKT();

    //!
    //! @brief Добавить тег.
    //!
    //! Добавляет тег (не STLV) к родительскому STLV-тегу с указанным TagID. Может быть вызван
    //! только после вызова #FNBeginSTLVTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #TagID - ID родительского STLV-тега,
    //!  - #TagNumber - номерТега STLV,
    //!  - #TagType - тип тега,
    //!  - #TagValueInt - значение целочисленного тега,
    //!  - #TagValueStr - строковое значение тега,
    //!  - #TagValueFVLN - значение тега с плавающей запятой,
    //!  - #TagValueDateTime - значение тега с датой и временем,
    //!  - #TagValueBin Строка - значение тега с бинарными данными,
    //!  - #TagValueLength - количество байт длины значения тега.
    //!
    //! @return Код ошибки
    //!
    //! @sa FNBeginSTLVTag
    //!
    int FNAddTag();

    //!
    //! @brief Начать СТЛВ тег.
    //!
    //! Начинает формирование тега STLV(тег, включающий в себя другие вложенные теги).
    //!
    //! Для добавления обычных(не STLV) вложенных тегов после вызова #FNBeginSTLVTag необходимо
    //! использовать метод #FNAddTag. Для того, чтобы добавить внутрь STLV-тега еще один
    //! STLV-тег, нужно повторно вызвать #FNBeginSTLVTag. Метод модифицирует свойство TagID для
    //! идентификации STLV-тега, в который будут добавляться следующие теги. При первом вызове
    //! #FNBeginSTLVTag вернет TagID = 0.
    //!
    //! К примеру, следующая последовательность вызовов :
    //!   FNBeginSTLVTag
    //!   FNAddTag
    //!   FNAddTag
    //!   FNBeginSTLVTag
    //!   FNAddTag
    //!   FNAddTag
    //! cоздаст следующую STLV-структуру:
    //!   STLV
    //!     Tag 1
    //!     Tag 2
    //!     STLV
    //!       Tag 1
    //!       Tag 2
    //!
    //! Для отправки сформированного STLV-тега следует использовать метод #FNSendSTLVTag либо
    //! #FNSendSTLVTagOperation. После вызова одного из этих методов STLV-структура очищается и
    //! снова можно начать формирование следующей STLV- структуры методом #FNBeginSTLVTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #TagID - ID родительского STLV-тега(необязателен при первом вызове #FNSendSTLVTag),
    //!  - #TagNumber - номерТега STLV,
    //!
    //! @par Модифицируемые свойства:
    //!  - #TagID - ID созданного STLV-тега.
    //!
    //! @return Код ошибки
    //!
    //! @sa FNAddTag
    //!
    int FNBeginSTLVTag();

    //!
    //! @brief Отправить СТЛВ тег.
    //!
    //! Отправляет STLV тег, предварительно сформированный методами #FNBeginSTLVTag, #FNAddTag.
    //! После вызова данного метода можно начинать формирование нового STLV-тега при помощи
    //! #FNBeginSTLVTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #TLVData - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNSendSTLVTag();

    //!
    //! @brief Отправить СТЛВ тег, привязанный к операции.
    //!
    //! Отправляет STLV тег, привязанный к операции. Тег должен быть предварительно сформирован
    //! методами #FNBeginSTLVTag, #FNAddTag. После вызова данного метода можно начинать формирование
    //! нового STLV-тега при помощи #FNBeginSTLVTag.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #TLVData.
    //!
    //! @return Код ошибки
    //!
    int FNSendSTLVTagOperation();
    //!
    //! @brief Отправить тег, привязанный к операции.
    //!
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #TagNumber - Номер Тега
    //!  - #TagType - Тип Тега
    //!  - #TagValueInt - Значение Тега целое
    //!  - #TagValueStr - Значение тега строка
    //!  - #TagValueFVLN - Значение тегаFVLN
    //!  - #TagValueDateTime - Значение тега дата время
    //!  - #TagValueBin - Значение тега бинарное
    //!  - #TagValueLength - Длина значения тега
    //!
    //! @return Код ошибки
    //!
    int FNSendTagOperation();

    //!
    //! @brief Идентификатор STLV-тега
    //!
    //! @par Методы доступа:
    //!   #Get_TagID, #Set_TagID
    //!
    //! @par Используется методами:
    //!   #FNAddTag, #FNBeginSTLVTag
    //!
    //! @par Модифицируется методами:
    //!   #FNBeginSTLVTag
    //!
    DOXYGEN_PROPERTY(int TagID)
    //!
    //! @brief Возвращает значение свойства #TagID
    //! @return TagID
    //! @relates TagID
    //!
    int Get_TagID() const;
    //!
    //! @brief Устанавливает значение свойства #TagID
    //! @param value Новое значение TagID
    //! @relates TagID
    //!
    void Set_TagID(int value);
    // clang-format off
    //!
    //! @brief URI для соединения с ККТ
    //!
    //! Параметры соединения передаются после путя в схеме после символа '?' в виде key=value.
    //! Разделяются '&'
    //!
    //! Общие параметры:
    //!
    //! | параметр     | описание                                              | возможные значения                                           | По умолчанию | спец. параметры                                                                                  |
    //! |--------------|-------------------------------------------------------|--------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------|
    //! | protocol     | тип протокола                                         | v1 - стандартный протокол ФР, v2 - альтернативный протокол.  | v1           | enq_mode в 0 - без ENQ перед каждой команды(по умолчанию), 1 - посылать ENQ перед каждой командой|
    //! | timeout      | таймаут соединения/исполнения команды в миллисекундах | число                                                        | 15000        |                                                                                                  |
    //!
    //! Поддерживаемые схемы:
    //!
    //! | схема    | описание                                 | путь                                                                | спец. параметры                                                                                                                                                             |
    //! |----------|------------------------------------------|---------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    //! | tcp      | tcp сокет                                | ip:[port] по умолчанию порт 7778                                    | plain_transfer, auto - автоматически пытаться переводить протокол в режим надежной передачи при подключении. так же возможно значени on - всегда включена надежная передача |
    //! | tcpfd    | уже открытый tcp сокет                   | fd - получается из файлового дескриптора на posix или HANDLE на win | plain_transfer, auto - автоматически пытаться переводить протокол в режим надежной передачи при подключении. так же возможно значени on - всегда включена надежная передача |
    //! | serial   | последовательный(COM/tty) порт           | для Windows COM#. для UNIX - полный путь или имя устройства в /dev/ | baudrate=115200 - скорость порта                                                                                                                                            |
    //! | btserial | bluetooth rfcomm соединение              | адрес bluetooth устройства. пример: 000190C55E78                    | ---                                                                                                                                                                         |
    //! | cdcacm   | соединение по cdcacm средствами драйвера | любой. захватывается первое устройство с известными VID/PID         | ---                                                                                                                                                                         |
    //! | ssl      | ssl/tls socket                           | ip:port                                                             | ca_path=путь - путь к der/pem файлу корневого сертификата(обязательный параметр), verification=skip - не выполнять верификацию сертификата, cn_host=hostname - имя хоста при проверке сертификата |
    //!
    //! Примеры:
    //! * serial://ttyUSB0?baudrate=115200&timeout=20000&protocol=v1
    //! * tcp://192.168.1.120:7778?timeout=30000&protocol=v1&plain_transfer=auto
    //! * btserial://000190C55E78?timeout=10000&protocol=v2
    //! * cdcacm://shtrihfr?timeout=4000&protocol=v1
    //! * ssl://192.168.137.111:7778?timeout=30000&ca_path=/etc/cert.pem&cn_host=shtrih_kkt.local
    //!
    //! @par Методы доступа:
    //!   #Get_ConnectionURI, #Set_ConnectionURI
    //!
    //! @par Используется методами:
    //!   #Connect
    //!
    DOXYGEN_PROPERTY(std::string ConnectionURI)
    // clang-format on
    //!
    //! @brief Устанавливает значение свойства #ConnectionURI
    //! @param value Новое значение ConnectionURI
    //! @relates ConnectionURI
    //!
    void Set_ConnectionURI(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #ConnectionURI
    //! @return ConnectionURI
    //! @relates ConnectionURI
    //!
    std::string Get_ConnectionURI() const;
    //!
    //! @brief Код символа
    //!
    //! @par Используется методом:
    //!   #LoadFontSymbol
    //!
    //! @par Методы доступа:
    //!   #Get_SymbolCode, #Set_SymbolCode
    DOXYGEN_PROPERTY(int SymbolCode)
    int Get_SymbolCode() const;
    void Set_SymbolCode(int value);
    //!
    //! @brief Ширина символа
    //!
    //! @par Используется методом:
    //!   #LoadFontSymbol
    //!
    //! @par Методы доступа:
    //!   #Get_SymbolWidth, #Set_SymbolWidth
    DOXYGEN_PROPERTY(int SymbolWidth)
    int Get_SymbolWidth() const;
    void Set_SymbolWidth(int value);
    //!
    //! @brief Высота символа
    //!
    //! @par Используется методом:
    //!   #LoadFontSymbol
    //!
    //! @par Методы доступа:
    //!   #Get_SymbolHeight, #Set_SymbolHeight
    DOXYGEN_PROPERTY(int SymbolHeight)
    int Get_SymbolHeight() const;
    void Set_SymbolHeight(int value);

    int Get_FileType() const;
    void Set_FileType(int value);

    //!
    //! @brief Блок данных для загрузки
    //!
    //! @par Используется методом:
    //!   #LoadBlockData
    //!
    //! @par Методы доступа:
    //!   #Get_BlockData, #Set_BlockData
    //!
    DOXYGEN_PROPERTY(std::vector<uint8_t> BlockData)
    //!
    //! @brief Возвращает значение свойства #BlockData
    //! @return BlockData
    //! @relates BlockData
    //!
    std::vector<uint8_t> Get_BlockData() const;
    //!
    //! @brief Устанавливает значение свойства #BlockData
    //! @param value Новое значение BlockData
    //! @relates BlockData
    //!
    void Set_BlockData(const std::vector<uint8_t>& value);

    int Get_DelayOnDisconnect() const;
    void Set_DelayOnDisconnect(int value);
    //!
    //! @brief Переносить строки
    //!
    //! @par Используется методом:
    //!   #PrintString
    //!
    //! @par Методы доступа:
    //!   #Get_WrapStrings, #Set_WrapStrings
    //!
    DOXYGEN_PROPERTY(bool WrapStrings)
    //!
    //! @brief Возвращает значение свойства #WrapStrings
    //! @return WrapStrings
    //! @relates WrapStrings
    //!
    bool Get_WrapStrings() const;
    //!
    //! @brief Устанавливает значение свойства #WrapStrings
    //! @param value Новое значение WrapStrings
    //! @relates WrapStrings
    //!
    void Set_WrapStrings(bool value);

    //!
    //! @brief Код маркировки товара
    //!
    //! GTIN - Global Trade Item Number
    //!
    //! @par Методы доступа:
    //!   #Get_GTIN, #Set_GTIN
    //!
    //! @par Используется методами:
    //!   FNSendItemCodeData
    //!
    DOXYGEN_PROPERTY(std::string GTIN)
    //!
    //! @brief Set_GTIN Устанавливает значения свойства #GTIN
    //! @param value Новое знаение GTIN
    //!
    void Set_GTIN(const std::string& value);
    //!
    //! @brief Get_GTIN Возвращает значения свойства #GTIN
    //! @return GTIN
    //!
    std::string Get_GTIN() const;
    //!
    //! @brief Тип маркировки товара
    //!
    //! Может принмать значения:
    //! 2 - Изделия из меха
    //! 3 - Лекарственные препараты
    //! 5 - Табачная продукция
    //!
    //! @par Методы доступа:
    //!   #Get_MarkingType, #Set_MarkingType
    //!
    //! @par Используется методами:
    //!   #FNSendItemCodeData
    //!
    DOXYGEN_PROPERTY(int MarkingType)
    //!
    //! @brief Устанавливает значение свойства #MarkingType
    //! @param value Новое значение MarkingType
    //! @relates MarkingType
    //!
    void Set_MarkingType(int value);
    //!
    //! @brief Возвращает значение свойства #MarkingType
    //! @return MarkingType
    //! @relates MarkingType
    //!
    int Get_MarkingType() const;
    //!
    //! @brief Отправить КТН тег.
    //!
    //! @deprecated
    //! Отправляет тег 1162 (Код товарной номенклатуры), привязанный к операции. Метод должен
    //! вызываться только после метода #FNOperation.
    //!
    //! Тег формируется следующим образом:
    //!  - MarkingType(2 байта)
    //!  - GTIN(6 байт числа в Big endian, если не равен 0, иначе пропускается)
    //!  - SerialNumber(строка, передаются все символы)
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #MarkingType - Тип маркировки товара. Возможные значения:
    //!      0000h – Нераспознанный код товара
    //!      4508h (17672) - Код товара в формате EAN-8, UPC-E
    //!      450Dh (17677) - Код товара в формате EAN-13, UPC-A
    //!      490Eh (18702) - Код товара в формате ITF-14
    //!      444Dh (17485) - Код товара в формате GS1 Data Matrix или Data Matrix маркировки
    //!      5246h (21062) - Код товара средства идентификации мехового изделия
    //!      С514h (50452) - Код товара в кодировке ЕГАИС 2.0 в формате PDF417
    //!      C51Eh (50462) - Код товара в кодировке ЕГАИС 3.0 в формате Data Matrix
    //!  - #GTIN - Код маркировки товара (Global Trade Item Number), передается как текст,
    //!     например "12345". GTIN используется только для типа маркировки 444Dh (17485)
    //!  - #SerialNumber - Серийный номер спользуется только для типа маркировки 444Dh (17485).
    //!  - #BarCode -  Данные кода товара – используется для типов маркировки кроме 444Dh (17485).
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNSendTLVOperation, #FNSendItemBarcode
    //!
    int FNSendItemCodeData();
    //!
    //! @brief Проверка маркированного товара
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #BarCode, #BarcodeHex  - код маркировки
    //!  - #ItemStatus  - планируемый статус (Тег 2003 ФФД)
    //!        1 - Штучный товар, подлежащий обязательной маркировке средством идентификации, реализован
    //!        2 - Мерный товар, подлежащий обязательной маркировке средством идентификации, в стадии реализации
    //!        3 - Штучный товар, подлежащий обязательной маркировке средством идентификации, возвращен
    //!        4 - Часть товара, подлежащего обязательной маркировке средством идентификации, возвращена
    //!        255 - Статус товара, подлежащего обязательной маркировке средством идентификации, не изменился
    //!  - #CheckItemMode - режим обработки (Тег 2102 ФФД, сейчас всегда должен быть 0)
    //!  - #TLVData, TLVDataHex - Список TLV. Если планируется
    //!    частичное выбытие (согласно с тегом 2003), то необходимо сформировать
    //!    буфер из тегов 2108 (мера) и 1023(количество) и передать его в
    //!    данное свойство (см. пример ниже)
    //!  - #CrptCheck - выполнять так же онлайн проверку на сервере ЦРПТ
    //!  - #CrptToken - токен аутентификации ЦРПТ
    //!  - #CrptCdnListUrl - ссылка на для получения списка хостов ЦРПТ для онлайн проверки КМ
    //!  - #CrptExchangeCaCertPath - путь файла для корневого сертфииката для обмена с ЦРПТ
    //!
    //! @par Модифицируемые свойства:
    //!  - #CheckItemLocalResult  - статус локальной проверки, тег 2004 битовое поле:
    //!         бит 0:
    //!               0 - код маркировки не может быть проверен фискальным накопителем с использованием ключа проверки КП
    //!               1 - код маркировки проверен фискальным накопителем с использованием ключа проверки КП
    //!         бит 1:
    //!               0 - результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП отрицательный
    //!                   (в случае, если значение нулевого бита равно «1»)
    //!                   или код маркировки не может быть проверен фискальным накопителем
    //!                   с использованием ключа проверки КП (в случае, если значение нулевого бита равно «0»
    //!               1 - результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП положительный
    //!  - #CheckItemLocalError  - причина, по которой не была проведена локальная проверка
    //!     Может принимать значения:
    //!         0 – КМ проверен в ФН
    //!         1 – КМ данного типа не подлежит проверки в ФН
    //!         2 – ФН не содержит ключ проверки кода проверки этого КМ
    //!         3 – Проверка невозможна, так как отсутствуют идентификаторы применения GS1 91 и / или 92 или их формат неверный
    //!         4 – Внутренняя ошибка в ФН при проверке этого КМ
    //!  - #MarkingType2 - распознанный тип КМ, Тег 2100 ФФД
    //!         0 - Тип кода маркировки не идентифицирован (код маркировки отсутствует, не может быть прочитан или может быть прочитан, но не может быть распознан)
    //!         1 - Короткий код маркировки
    //!         2 - Код маркировки со значением кода проверки длиной 88 символов, подлежащим проверке в ФН
    //!         3 - Код маркировки со значением кода проверки длиной 44 символа, не подлежащим проверке в ФН
    //!         4 - Код маркировки со значением кода проверки длиной 44 символа, подлежащим проверке в ФН
    //!         5 - Код маркировки со значением кода проверки длиной 4 символа, не подлежащим проверке в ФН
    //!  - #KMServerErrorCode  - код ответа ФН на команду онлайн-проверки,
    //!         0xFF - означает, что сервер не ответил в течении таймаута.
    //!         0x20 - см. свойство #KMServerCheckingStatus, которое может принимать значения
    //!                в соответствии со след. таблицей:
    //!                    1 – Неверный фискальный признак
    //!                    2 – Неверный формат ответа
    //!                    3 – Неверный номер запроса в ответе
    //!                    4 – Неверный номер ФН
    //!                    5 – Неверный CRC блока данных
    //!                    7 – Неверная длина ответа
    //!  - #KMServerCheckingStatus - результат проверки КМ. Тег 2106. Только если сервер ответил без ошибок, иначе значение -1
    //!      Состояния битов реквизита:
    //!        0b00000000 - Проверка КП КМ не выполнена, статус товара ОИСМ не проверен
    //!        0b00000001 - Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен
    //!        0b00000011 - Проверка КП КМ выполнена с положительным результатом, статус товара ОИСМ не проверен
    //!        0b00010000 - Проверка КП КМ не выполнена, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)
    //!        0b00010001 - Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)
    //!        0b00010011 - Проверка КП КМ выполнена в ФН с положительным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)
    //!        0b00000101 - Проверка КП КМ выполнена с отрицательным результатом, статус товара у ОИСМ некорректен
    //!        0b00000111 - Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ некорректен
    //!  - #TLVData, TLVDataHex - список TLV реквизитов ответа сервера в виде HEX строки. Только если сервер ответил без ошибок
    //!  - #OutputStrJson - результат онлайн проверки КМ в ЦРПТ
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNCheckItemBarcode2
    //!
    int FNCheckItemBarcode();
    //!
    //! @brief Проверка маркированного товара 2
    //!
    //! В отличие от FNCheckItemBarcode вместо #TLVData использует свойства #MeasureUnit, #Quantity, #DivisionalQuantity, #Numerator, #Denominator.
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #BarCode, #BarcodeHex  - код маркировки
    //!  - #ItemStatus  - планируемый статус (Тег 2003 ФФД)
    //!        1 - Штучный товар, подлежащий обязательной маркировке средством идентификации, реализован
    //!        2 - Мерный товар, подлежащий обязательной маркировке средством идентификации, в стадии реализации
    //!        3 - Штучный товар, подлежащий обязательной маркировке средством идентификации, возвращен
    //!        4 - Часть товара, подлежащего обязательной маркировке средством идентификации, возвращена
    //!        255 - Статус товара, подлежащего обязательной маркировке средством идентификации, не изменился
    //!  - #CheckItemMode - режим обработки (Тег 2102 ФФД, сейчас всегда должен быть 0)
    //!  - #MeasureUnit - мера количества
    //!  - #Quantity - количество
    //!  - #DivisionalQuantity - признак дробной реализации
    //!  - #Numerator - числитель дробной части
    //!  - #Denominator - знаменатель дробной части
    //!  - #CrptCheck - выполнять так же онлайн проверку на сервере ЦРПТ
    //!  - #CrptToken - токен аутентификации ЦРПТ
    //!  - #CrptCdnListUrl - ссылка на для получения списка хостов ЦРПТ для онлайн проверки КМ
    //!  - #CrptExchangeCaCertPath - путь файла для корневого сертфииката для обмена с ЦРПТ
    //!
    //! @par Модифицируемые свойства:
    //!  - #CheckItemLocalResult  - статус локальной проверки, тег 2004 битовое поле:
    //!         бит 0:
    //!               0 - код маркировки не может быть проверен фискальным накопителем с использованием ключа проверки КП
    //!               1 - код маркировки проверен фискальным накопителем с использованием ключа проверки КП
    //!         бит 1:
    //!               0 - результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП отрицательный
    //!                   (в случае, если значение нулевого бита равно «1»)
    //!                   или код маркировки не может быть проверен фискальным накопителем
    //!                   с использованием ключа проверки КП (в случае, если значение нулевого бита равно «0»
    //!               1 - результат проверки КП КМ фискальным накопителем с использованием ключа проверки КП положительный
    //!  - #CheckItemLocalError  - причина, по которой не была проведена локальная проверка
    //!     Может принимать значения:
    //!         0 – КМ проверен в ФН
    //!         1 – КМ данного типа не подлежит проверки в ФН
    //!         2 – ФН не содержит ключ проверки кода проверки этого КМ
    //!         3 – Проверка невозможна, так как отсутствуют идентификаторы применения GS1 91 и / или 92 или их формат неверный
    //!         4 – Внутренняя ошибка в ФН при проверке этого КМ
    //!  - #MarkingType2 - распознанный тип КМ, Тег 2100 ФФД
    //!         0 - Тип кода маркировки не идентифицирован (код маркировки отсутствует, не может быть прочитан или может быть прочитан, но не может быть распознан)
    //!         1 - Короткий код маркировки
    //!         2 - Код маркировки со значением кода проверки длиной 88 символов, подлежащим проверке в ФН
    //!         3 - Код маркировки со значением кода проверки длиной 44 символа, не подлежащим проверке в ФН
    //!         4 - Код маркировки со значением кода проверки длиной 44 символа, подлежащим проверке в ФН
    //!         5 - Код маркировки со значением кода проверки длиной 4 символа, не подлежащим проверке в ФН
    //!  - #KMServerErrorCode  - код ответа ФН на команду онлайн-проверки,
    //!         0xFF - означает, что сервер не ответил в течении таймаута.
    //!         0x20 - см. свойство #KMServerCheckingStatus, которое может принимать значения
    //!                в соответствии со след. таблицей:
    //!                    1 – Неверный фискальный признак
    //!                    2 – Неверный формат ответа
    //!                    3 – Неверный номер запроса в ответе
    //!                    4 – Неверный номер ФН
    //!                    5 – Неверный CRC блока данных
    //!                    7 – Неверная длина ответа
    //!  - #KMServerCheckingStatus - результат проверки КМ. Тег 2106. Только если сервер ответил без ошибок, иначе значение -1
    //!      Состояния битов реквизита:
    //!        0b00000000 - Проверка КП КМ не выполнена, статус товара ОИСМ не проверен
    //!        0b00000001 - Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен
    //!        0b00000011 - Проверка КП КМ выполнена с положительным результатом, статус товара ОИСМ не проверен
    //!        0b00010000 - Проверка КП КМ не выполнена, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)
    //!        0b00010001 - Проверка КП КМ выполнена в ФН с отрицательным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)
    //!        0b00010011 - Проверка КП КМ выполнена в ФН с положительным результатом, статус товара ОИСМ не проверен (ККТ функционирует в автономном режиме)
    //!        0b00000101 - Проверка КП КМ выполнена с отрицательным результатом, статус товара у ОИСМ некорректен
    //!        0b00000111 - Проверка КП КМ выполнена с положительным результатом, статус товара у ОИСМ некорректен
    //!  - #TLVData, TLVDataHex - список TLV реквизитов ответа сервера в виде HEX строки. Только если сервер ответил без ошибок
    //!  - #OutputStrJson - результат онлайн проверки КМ в ЦРПТ
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNCheckItemBarcode
    //!
    int FNCheckItemBarcode2();
    //!
    //! @brief Запрос параметра открытия ФН.
    //!
    //! Позволяет получить отдельные теги из документов регистрации/перерегистрации
    //!
    //! @note Работает только с онлайн-кассами.
    //! * - длина ответного сообщения зависит от TLV структуры, возвращаемой ФН на заданный номер
    //! тега (кроме FFFFh);
    //! * - при запросе всех тегов TLV структура не возвращается (X=0).
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль системного администратора,
    //!  - #RegistrationNumber - порядковый номер отчета о регистрации/перерегистрации
    //!  - #TagNumber - Номер тега (Тип Т, TLV параметра)
    //!
    //! @return Код ошибки
    //!
    int FNRequestRegistrationTLV();
    //!
    //! @brief Прочитать версию загрузчика
    //!
    //! @par Модифицируемые свойства:
    //!  - #LoaderVersion - версия загрузчика
    //!
    //! @return Код ошибки
    //!
    int ReadLoaderVersion();
    //!
    //! @brief Не печатать чек
    //!
    //! @par Методы доступа:
    //!   #Get_LoaderVersion
    //!
    //!
    DOXYGEN_PROPERTY(std::string LoaderVersion)
    //!
    //! @brief Возвращает значение свойства #LoaderVersion
    //! @return LoaderVersion
    //! @relates LoaderVersion
    //!
    std::string Get_LoaderVersion() const;

    int Get_RequestDocumentType() const;
    void Set_RequestDocumentType(int value);

    //!
    //! @brief Открыть чек коррекции.
    //!
    //! Метод открывает документ (чек) коррекции определённого типа (приход, расход, возврат прихода,
    //! возврат расхода).
    //!
    //! @note Работает только с онлайн-кассами ФФД 1.2
    //!
    //! @note Работает в режимах 2, 4, 7 и 9. Переводит ККМ в режим 8 или 3.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #CheckType - Тип открываемого документа/чека. Возможные значения:
    //!    * 0 - приход,
    //!    * 1 - расход,
    //!    * 2 - возврат прихода,
    //!    * 3 - возврат расхода.
    //!  - #AutoOpenSession - открывать смену автоматически
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int FNOpenCheckCorrection();

    //!
    //! @brief Расширенные признаки работы ККТ
    //!
    //! Битовое поле
    //!
    //! | Номер бита | Расширенные признаки работы ККТ         |
    //! |------------|-----------------------------------------|
    //! |      0     | Продажа подакцизного товара             |
    //! |      1     | Признак проведения азартных игр         |
    //! |      2     | Признак проведения лотереи              |
    //! |      3     | Признак установки принтера в автомате   |
    //! |      4     | Признак торговли маркиров.товарами(1.2) |
    //! |      5     | Признак ломбардной деятельности(1.2)    |
    //! |      6     | Признак страховой деятельности(1.1)     |
    //!
    //! @par Методы доступа:
    //!   #Get_WorkModeEx, #Set_WorkModeEx
    //!
    //! @par Модифицируется методами:
    //!  #FNGetFiscalizationResultByNumber, #FNGetFiscalizationResult, #FNFindDocument.
    //!
    DOXYGEN_PROPERTY(int WorkModeEx)
    //!
    //! @brief Возвращает значение свойства #WorkModeEx
    //! @return WorkModeEx
    //! @relates WorkModeEx
    //!
    int Get_WorkModeEx() const;
    //!
    //! @brief Устанавливает значение свойства #WorkModeEx
    //! @param value Новое значение WorkModeEx
    //! @relates WorkModeEx
    //!
    void Set_WorkModeEx(int value);

    //!
    //! @brief ИНН ОФД
    //!
    //! Идентификационный номер оператора фискальных данных.
    //!
    //! Допустимая длина строки: до 12 символов.
    //! Допустимы только символы «0», «1», «2», «3», «4», «5», «6», «7», «8» и «9».
    //!
    //! @par Методы доступа:
    //!   #Get_INNOFD, #Set_INNOFD
    //!
    //! @par Модифицируется методами:
    //!  #FNGetFiscalizationResultByNumber, #FNGetFiscalizationResult, #FNFindDocument.
    //!
    DOXYGEN_PROPERTY(std::string INNOFD)
    //!
    //! @brief Возвращает значение свойства #INNOFD
    //! @return INNOFD
    //! @relates INNOFD
    //!
    std::string Get_INNOFD() const;
    //!
    //! @brief Устанавливает значение свойства #INNOFD
    //! @param value Новое значение INNOFD
    //! @relates INNOFD
    //!
    void Set_INNOFD(const std::string& value);

    //!
    //! @brief Код причины изменения сведений о ККТ
    //!
    //! Битовое поле
    //!
    //! | Номер бита | Причина изменения сведений о ККТ                                                                 |
    //! |------------|--------------------------------------------------------------------------------------------------|
    //! |      0     | Замена фискального накопителя                                                                    |
    //! |      1     | Замена оператора фискальных данных                                                               |
    //! |      2     | Изменение наименования пользователя контрольно-кассовой техники                                  |
    //! |      3     | Изменение адреса и (или) места установки (применения) контрольно-кассовой техники                |
    //! |      4     | Перевод ККТ из автономного режима в режим передачи данных                                        |
    //! |      5     | Перевод ККТ из режима передачи данных в автономный режим                                         |
    //! |      6     | Изменение версии модели ККТ                                                                      |
    //! |      7     | Изменение перечня систем налогообложения, применяемых при осуществлении расчетов                 |
    //! |      8     | Изменение номера автоматического устройства для расчетов, в составе которого применяется ККТ     |
    //! |      9     | Перевод ККТ из автоматического режима в неавтоматический режим (осуществление расчетов кассиром) |
    //! |     10     | Перевод ККТ из неавтоматического режима (осуществление расчетов кассиром) в автоматический режим |
    //! |     11     | Перевод ККТ из режима, не позволяющего формировать БСО, в режим, позволяющий формировать БСО     |
    //! |     12     | Перевод ККТ из режима, позволяющего формировать БСО, в режим, не позволяющий формировать БСО     |
    //! |     13     | Перевод ККТ из режима расчетов в сети Интернет (позволяющего не печатать кассовый чек и БСО) в режим, позволяющий печатать кассовый чек и БСО |
    //! |     14     | Перевод ККТ из режима, позволяющего печатать кассовый чек и БСО, в режим расчетов в сети Интернет (позволяющего не печатать кассовый чек и БСО) |
    //! |     15     | Перевод ККТ из режима, позволяющего оказывать услуги платежного агента (субагента) или банковского платежного агента, в режим, не позволяющий оказывать услуги платежного агента (субагента) или банковского платежного агента |
    //! |     16     | Перевод ККТ из режима, не позволяющего оказывать услуги платежного агента (субагента) или банковского платежного агента в режим, позволяющий оказывать услуги платежного агента (субагента) или банковского платежного агента |
    //! |     17     | Перевод ККТ из режима, позволяющего применять ККТ при приеме ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению азартных игр, в режим, не позволяющий применять ККТ при приеме ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению азартных игр |
    //! |     18     | Перевод ККТ из режима, не позволяющего применять ККТ при приеме ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению азартных игр, в режим, позволяющий применять ККТ при приеме ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению азартных игр |
    //! |     19     | Перевод ККТ из режима, позволяющего применять ККТ при приеме денежных средств при реализации лотерейных билетов, электронных лотерейных билетов, приеме лотерейных ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению лотерей, в режим, не позволяющий применять ККТ при приеме денежных средств при реализации лотерейных билетов, электронных лотерейных билетов, приеме лотерейных ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению лотерей |
    //! |     20     | Перевод ККТ из режима, не позволяющего применять ККТ при приеме денежных средств при реализации лотерейных билетов, электронных лотерейных билетов, приеме лотерейных ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению лотерей, в режим, позволяющий применять ККТ при приеме денежных средств при реализации лотерейных билетов, электронных лотерейных билетов, приеме лотерейных ставок и выплате денежных средств в виде выигрыша при осуществлении деятельности по проведению лотерей |
    //! |     21     | Изменение версии ФФД                                                                             |
    //! |     31     | Иные причины                                                                                     |
    //!
    //! @par Методы доступа:
    //!   #Get_RegistrationReasonCodeEx, #Set_RegistrationReasonCodeEx
    //!
    //! @par Модифицируется методами:
    //!  #FNGetFiscalizationResultByNumber, #FNGetFiscalizationResult, #FNFindDocument.
    //!
    DOXYGEN_PROPERTY(int RegistrationReasonCodeEx)
    //!
    //! @brief Возвращает значение свойства #RegistrationReasonCodeEx
    //! @return RegistrationReasonCodeEx
    //! @relates RegistrationReasonCodeEx
    //!
    int Get_RegistrationReasonCodeEx() const;
    //!
    //! @brief Устанавливает значение свойства #RegistrationReasonCodeEx
    //! @param value Новое значение RegistrationReasonCodeEx
    //! @relates RegistrationReasonCodeEx
    //!
    void Set_RegistrationReasonCodeEx(int value);

    int FNCountersSync();

    //!
    //! @brief  Запрос ресурса свободной памяти в ФН
    //!
    //! @par Модифицируемые свойства:
    //!  - #FN30DayResource - Ресурс данных 30-дневного хранения
    //!     (Размер свободной области в килобайтах для записи документов 30-дневного хранения.
    //!     После 30 дней работы значение может колебаться на постоянном уровне)
    //!  - #FN5YearResource - Ресурс пятилетнего хранения (ориентировочное количество документов, которые можно создать в ФН)
    //!
    //!
    //! @return Код ошибки
    //!
    int FNGetFreeMemoryResource();

    //!
    //! @brief Не печатать чек
    //!
    //! @deprecated
    //! для отключения печати стоит использовать метод @see SetDeviceFunction с #DFE_SkipAllPrinting
    //!
    //! @par Методы доступа:
    //!   #Get_SkipPrint, #Set_SkipPrint
    //!
    //!
    DOXYGEN_PROPERTY(bool SkipPrint)
    //!
    //! @brief Возвращает значение свойства #SkipPrint
    //! @return SkipPrint
    //! @relates SkipPrint
    //!
    bool Get_SkipPrint() const;
    //!
    //! @brief Устанавливает значение свойства #SkipPrint
    //! @param value Новое значение SkipPrint
    //! @relates SkipPrint
    //!
    void Set_SkipPrint(bool value);

    //!
    //! @brief Получить сумму денег в денежном ящике.
    //!
    //! Позволяет получить сумму денег в денежном ящике
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован,
    //!  - #Summ1 - сумма денег в денежном ящике.
    //!
    //! @return Код ошибки
    //!
    int ReadCashDrawerSum();

    //!
    //! @brief Прочитать лицензию из ККМ.
    //!
    //! Позволяет прочитать лицензию из ККМ.
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Модифицируемые свойства:
    //!  - #License - лицензия.
    //!
    //! @return Код ошибки
    //!
    int ReadFeatureLicenses();

    //!
    //! @brief Записать лицензию в ККМ.
    //!
    //! Записывает лицензию в ККМ. Для этого передается лицензия и цифровая
    //! подпись.
    //!
    //! @note Метод может вызываться в любом режиме. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #License - лицензия,
    //!  - #DigitalSign - цифровая подпись лицензии.
    //!
    //! @return Код ошибки
    //!
    int WriteFeatureLicenses();

    //! @brief Цифровая подпись лицензии
    //!
    //! @par Методы доступа:
    //!   #Get_DigitalSign, #Set_DigitalSign
    //!
    //! @par Используется методами:
    //!   #WriteFeatureLicenses
    //!
    DOXYGEN_PROPERTY(std::string DigitalSign)
    //!
    //! @brief Возвращает значение свойства #DigitalSign
    //! @return DigitalSign
    //! @relates DigitalSign
    //!
    std::string Get_DigitalSign() const;
    //!
    //! @brief Устанавливает значение свойства #DigitalSign
    //! @param value Новое значение DigitalSign
    //! @relates DigitalSign
    //!
    void Set_DigitalSign(const std::string& sign);

    //! @brief Номер функции устройства
    //!
    //! @par Методы доступа:
    //!   #Get_DeviceFunctionNumber, #Set_DeviceFunctionNumber
    //!
    //! @par Используется методами:
    //!   #SetDeviceFunction, #GetDeviceFunction
    //!
    DOXYGEN_PROPERTY(int DeviceFunctionNumber)
    //!
    //! @brief Возвращает значение свойства #DeviceFunctionNumber
    //! @return DeviceFunctionNumber
    //! @relates DeviceFunctionNumber
    //!
    int Get_DeviceFunctionNumber() const;
    //!
    //! @brief Устанавливает значение свойства #DeviceFunctionNumber
    //! @param value Новое значение DeviceFunctionNumber
    //! @relates DeviceFunctionNumber
    //!
    void Set_DeviceFunctionNumber(int value);

    //!
    //! @brief Значение фунции устройства, в зависимости от свойства
    //!
    //!
    //! @par Модифицируется методом:
    //!   #GetDeviceFunction
    //!
    //! @par Методы доступа:
    //!   #Get_ValueOfFunctionInteger, #Set_ValueOfFunctionInteger
    //!
    DOXYGEN_PROPERTY(int ValueOfFunctionInteger)
    //!
    //! @brief Возвращает значение свойства #ValueOfFunctionInteger
    //! @return ValueOfFunctionInteger
    //! @relates ValueOfFunctionInteger
    //!
    int Get_ValueOfFunctionInteger() const;
    //!
    //! @brief Устанавливает значение свойства #ValueOfFunctionInteger
    //! @param value Новое значение ValueOfFunctionInteger
    //! @relates ValueOfFunctionInteger
    //!
    void Set_ValueOfFunctionInteger(int value);
    //!
    //! @brief Значение функции устройства строковое
    //!
    //!
    //! @par Модифицируется методом:
    //!   #GetDeviceFunction
    //!
    //! @par Методы доступа:
    //!   #Get_ValueOfFunctionString, #Set_ValueOfFunctionString
    //!
    DOXYGEN_PROPERTY(std::string ValueOfFunctionString)
    //!
    //! @brief Возвращает значение свойства #ValueOfFunctionString
    //! @return ValueOfFunctionString
    //! @relates ValueOfFunctionString
    //!
    std::string Get_ValueOfFunctionString() const;
    //!
    //! @brief Устанавливает значение свойства #ValueOfFunctionString
    //! @param value Новое значение ValueOfFunctionString
    //! @relates ValueOfFunctionString
    //!
    void Set_ValueOfFunctionString(const std::string& value);

    //!
    //! @brief Установить значение функции устройства.
    //!
    //! Устанавливает свойство функции устройства, в зависимости от свойства #DeviceFunctionNumber
    //!
    //! @par Используемые свойства:
    //!  - #DeviceFunctionNumber - Номер функции устройства
    //!  - #ValueOfFunctionInteger - числовое значение функции
    //!  - #ValueOfFunctionString - строковое значение функции
    //!
    //! @return Код ошибки
    //!
    int SetDeviceFunction();
    //!
    //! @brief Получает значение функции устройства.
    //!
    //! Получает свойство функции устройства, в зависимости от свойства #DeviceFunctionNumber
    //!
    //! @par Используемые свойства:
    //!  - #DeviceFunctionNumber - Номер функции устройства,
    //!
    //! @par Модифицируемые свойства:
    //!  - #ValueOfFunctionInteger - числовое значение функции
    //!  - #ValueOfFunctionString - строковое значение функции
    //!
    //! @return Код ошибки
    //!
    int GetDeviceFunction();

    //!
    //! @brief Привязать марку к позиции
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @note Требуется функциональная лицензии ККТ
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #Barcode - код маркировки
    //!  - #MCOSUSign - признак ОСУ
    //!  - #CrptCheck - есть True, будет автоматически выполнять проверку в ЦРПТ,
    //!                 даже если предварительно не было проверки в @see #FNCheckItemBarcode.
    //!  - #Price - цена, используется при проверке допустимой Минимальной Розничной Цены,
    //!             при проверке КМ в ЦРПТ
    //!
    //! @par Модифицируемые свойства:
    //!  - #MarkingType - первые 2 байта значения реквизита "код товара”
    //!  - #MarkingTypeEx - Тип Data Matrix
    //!     0 – КМ 88
    //!     1 - КМ симметричный
    //!     2 - КМ Табачный
    //!     3 - КМ 44
    //!  для ФФД 1.2 в ответ так же могут быть добавлен поля от команды #FNCheckItemBarcode
    //!
    //! @return Код ошибки
    //!
    //! @sa #FNSendTLVOperation, #FNSendItemCodeData
    //!
    int FNSendItemBarcode();
    //!
    //! @brief Получить состояние по передаче уведомлений о реализации маркированного товара
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #MessageState  - Состояние передачи уведомлений
    //!     0 - нет активного обмена;
    //!     1 - начато чтение уведомления;
    //!     2 - ожидание квитанции на уведомление;
    //!  - #MessageCount  - Количество уведомлений в очереди (0 если на все уведомления была получена квитанция)
    //!  - #MessageNumber  - Номер уведомления для передачи, или уведомления на которое ожидается квитанция
    //!  - #Date, Time  - Дата и время текущего уведомления(0, если на все уведомления получена квитанция)
    //!  - #FreeMemorySize - Процент заполнения области хранения уведомлений
    //!
    //! @return Код ошибки
    //!
    //!
    int FNGetKMServerExchangeStatus();
    //!
    //! @brief Запрос статуса по работе с кодами маркировки
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #MCCheckStatus - Состояние проверки КМ
    //!     0 - работа с КМ временно заблокирована
    //!     1 - нет КМ на проверке
    //!     2 - передан КМ в команде B1h
    //!     3 - сформирован запрос о статусе КМ в команде B5h
    //!     4 -  получен ответ на запрос о статусе КМ в команде B6h
    //!  - #MCNotificationStatus - Состояние формирования уведомления
    //!     0 - уведомление о реализации не формируется
    //!     1 - начато формирование уведомления о реализации
    //!  - #MCCommandFlags - Флаги разрешения команд работы с КМ
    //!     Биты                 Код разрешенной команды
    //!     -------------------------------------------------------------------------------------------------
    //!      0 0 0 0 0 0 0 1 B1h
    //!      0 0 0 0 0 0 1 0 B2h
    //!      0 0 0 0 0 1 0 0 B3h
    //!      0 0 0 0 1 0 0 0 B5h
    //!      0 0 0 1 0 0 0 0 B6h
    //!      0 0 1 0 0 0 0 0 B7h с доп. кодом 1
    //!      0 1 0 0 0 0 0 0 B7h с доп. кодом 2
    //!      1 0 0 0 0 0 0 0 B7h с доп. кодом 3
    //!  - #MCCheckResultSavedCount -  Количество сохранённых результатов проверки КМ
    //!  - #MCRealizationCount  - Количество КМ, включенных в уведомление о реализации
    //!  - #MCStorageSize  - Заполнение области хранения маркированного товара
    //!    0 - область заполнена менее чем на 50%
    //!     1 - область заполнена от 50% до 80%
    //!     2 - область заполнена от 80% до 90%
    //!     3 - область заполнена более чем на 90%
    //!  - #MessageCount - Количество уведомлений в очереди
    //!
    //! @return Код ошибки
    //!
    //!
    int FNGetMarkingCodeWorkStatus();

    //!
    //! @brief Начать чтение уведомлений о реализации маркированного товара из ФН (ФФД 1.2) (автономный режим)
    //! Уведомления читаются затем последовательно вызовом метода #FNReadNotificationBlock
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNBeginReadNotifications();
    //!
    //! @brief Прочитать блок уведомления о реализации маркированного товара из ФН.
    //! Производится последовательное чтение. Ошибка 8 означает, что все уведомления прочитаны. (ФФД 1.2) (автономный режим)
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #NotificationNumber - Номер текущего уведомления
    //!  - #NotificationCount - Общее число уведомлений
    //!  - #NotificationSize - Полный размер текущего уведомления
    //!  - #DataOffset - Смещение от начала текущего уведомления
    //!  - #DataBlockSize - Размер блока данных
    //!  - #DataBlock, DataBlockHex - Прочитанный блок данных
    //!
    //! @return Код ошибки
    //!
    int FNReadNotificationBlock();
    //!
    //! @brief Подтверждение выгрузки уведомления (ФФД 1.2)
    //!
    //! @note Работает только с онлайн-кассами.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #NotificationNumber  - номер подтверждаемого уведомления
    //!  - #CheckSum - Контрольная сумма уведомления (CRC16)
    //!
    //! @return Код ошибки
    //!
    int FNConfirmNotificationRead();
    //!
    //! @brief Получить представление тега в виде TLV массива байт.
    //! Для работы с STLV-тегами необходимо сначала использовать методы
    //! #FNBeginSTLVTag, #FNAddTag
    //!
    //!
    //! @par Используемые свойства:
    //!  - #TagNumber  - Номер тега
    //!  - #TagType   - тип тега
    //!  - #TLVData,TLVDataHex - Контрольная сумма уведомления (CRC16)
    //!
    //! @return Код ошибки
    //!
    int GetTagAsTLV();
    //!
    //! @brief Режим совместимости КЯ при печати признака маркировки
    //!
    //! false - режим выключен, true - включен.
    //! Если режим совместимости включен, и в КЯ был передан тег 1162, то при выполнении FNOperation в начало названия
    //! товара(StringForPrinting) добавляется "[М] ". Только тогда на чеке будет напечатан признак маркировки.
    //! По умолчанию режим совместиости включен.
    //!
    //! @par Используется методами:
    //!   #FNOperation
    //!
    //! @par Методы доступа:
    //!   #Get_EnableCashcoreMarkCompatibility, #Set_EnableCashcoreMarkCompatibility
    //!
    DOXYGEN_PROPERTY(bool EnableCashcoreMarkCompatibility)
    //!
    //! @brief Возвращает значение свойства #EnableCashcoreMarkCompatibility
    //! @return EnableCashcoreMarkCompatibility
    //! @relates EnableCashcoreMarkCompatibility
    //!
    bool Get_EnableCashcoreMarkCompatibility() const;
    //!
    //! @brief Устанавливает значение свойства #EnableCashcoreMarkCompatibility
    //! @param value Новое значение EnableCashcoreMarkCompatibility
    //! @relates EnableCashcoreMarkCompatibility
    //!
    void Set_EnableCashcoreMarkCompatibility(bool value);
    //!
    //! @brief Результат локальной проверки КМ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CheckItemLocalError , #Set_CheckItemLocalError
    //!
    //! @par Используется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int CheckItemLocalError)
    //!
    //! @brief Устанавливает значение свойства #CheckItemLocalError
    //! @param value Новое значение CheckItemLocalError
    //! @relates CheckItemLocalError
    //!
    void Set_CheckItemLocalError(int value);
    //!
    //! @brief Возвращает значение свойства #CheckItemLocalError
    //! @return CheckItemLocalError
    //! @relates CheckItemLocalError
    //!
    int Get_CheckItemLocalError() const;
    //!
    //! @brief Расширенный тип маркировки товара
    //!
    //! Может принмать значения:
    //!    0 - КМ-88
    //!    1 – Симметричный
    //!    2 – Табачный
    //!    3 - КМ-44
    //!
    //! @par Методы доступа:
    //!   #Get_MarkingTypeEx, #Set_MarkingTypeEx
    //!
    //! @par Модифицируется методами:
    //!   #FNSendItemBarcode
    //!
    DOXYGEN_PROPERTY(int MarkingTypeEx)
    //!
    //! @brief Устанавливает значение свойства #MarkingTypeEx
    //! @param value Новое значение MarkingTypeEx
    //! @relates MarkingTypeEx
    //!
    void Set_MarkingTypeEx(int value);
    //!
    //! @brief Возвращает значение свойства #MarkingTypeEx
    //! @return MarkingTypeEx
    //! @relates MarkingTypeEx
    //!
    int Get_MarkingTypeEx() const;
    //!
    //! @brief Мера количества
    //!
    //! Может принмать значения:
    //!     0 - Применяется для предметов расчета, которые могут быть реализованы поштучно или единицами
    //!     10 - Грамм
    //!     11 - Килограмм
    //!     12 - Тонна
    //!     20 - Сантиметр
    //!     21 - Дециметр
    //!     22 - Метр
    //!     30 - Квадратный сантиметр
    //!     31 - Квадратный дециметр
    //!     32 - Квадратный метр
    //!     40 - Миллилитр
    //!     41 - Литр
    //!     42 - Кубический метр
    //!     50 - Киловатт час
    //!     51 - Гигакалория
    //!     70 - Сутки (день)
    //!     71 - Час
    //!     72 - Минута
    //!     73 - Секунда
    //!     80 - Килобайт
    //!     81 - Мегабайт
    //!     82 - Гигабайт
    //!     83 - Терабайт
    //!     255 - Применяется при использовании иных единиц измерения
    //!
    //! @par Методы доступа:
    //!   #Get_MeasureUnit, #Set_MeasureUnit
    //!
    //! @par Используется методами:
    //!   #FNOperation, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int MeasureUnit)
    //!
    //! @brief Устанавливает значение свойства #MeasureUnit
    //! @param value Новое значение MeasureUnit
    //! @relates MeasureUnit
    //!
    void Set_MeasureUnit(int value);
    //!
    //! @brief Возвращает значение свойства #MeasureUnit
    //! @return MeasureUnit
    //! @relates MeasureUnit
    //!
    int Get_MeasureUnit() const;

    //!
    //! @brief Дробное количество
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DivisionalQuantity, #Set_DivisionalQuantity
    //!
    //! @par Используется методами:
    //!   #FNOperation, FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(bool DivisionalQuantity)
    //!
    //! @brief Устанавливает значение свойства #DivisionalQuantity
    //! @param value Новое значение DivisionalQuantity
    //! @relates DivisionalQuantity
    //!
    void Set_DivisionalQuantity(bool value);
    //!
    //! @brief Возвращает значение свойства #DivisionalQuantity
    //! @return DivisionalQuantity
    //! @relates DivisionalQuantity
    //!
    bool Get_DivisionalQuantity() const;
    //!
    //! @brief Числитель
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_Numerator, #Set_Numerator
    //!
    //! @par Используется методами:
    //!   #FNOperation, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(uint64_t Numerator)
    //!
    //! @brief Устанавливает значение свойства #Numerator
    //! @param value Новое значение Numerator
    //! @relates Numerator
    //!
    void Set_Numerator(uint64_t value);
    //!
    //! @brief Возвращает значение свойства #Numerator
    //! @return Numerator
    //! @relates Numerator
    //!
    uint64_t Get_Numerator() const;
    //!
    //! @brief Знаменатель
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_Denominator, #Set_Denominator
    //!
    //! @par Используется методами:
    //!   #FNOperation, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(uint64_t Denominator)
    //!
    //! @brief Устанавливает значение свойства #Denominator
    //! @param value Новое значение Denominator
    //! @relates Denominator
    //!
    void Set_Denominator(uint64_t value);
    //!
    //! @brief Возвращает значение свойства #Denominator
    //! @return Denominator
    //! @relates Denominator
    //!
    uint64_t Get_Denominator() const;
    //!
    //! @brief Размер свободной памяти
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_FreeMemorySize , #Set_FreeMemorySize
    //!
    //! @par Модифицируется методами:
    //!   #FNGetKMServerExchangeStatus
    //!
    DOXYGEN_PROPERTY(int FreeMemorySize)
    //!
    //! @brief Возвращает значение свойства #FreeMemorySize
    //! @return FreeMemorySize
    //! @relates FreeMemorySize
    //!
    int Get_FreeMemorySize() const;
    //!
    //! @brief Устанавливает значение свойства #FreeMemorySize
    //! @param value Новое значение FreeMemorySize
    //! @relates FreeMemorySize
    //!
    void Set_FreeMemorySize(int value);
    //!
    //! @brief Состояние проверки КМ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCCheckStatus, #Set_MCCheckStatus
    //!
    //! @par Модифицируется методами:
    //!   #FNGetMarkingCodeWorkStatus
    //!
    DOXYGEN_PROPERTY(int MCCheckStatus)
    //!
    //! @brief Возвращает значение свойства #MCCheckStatus
    //! @return MCCheckStatus
    //! @relates MCCheckStatus
    //!
    int Get_MCCheckStatus() const;
    //!
    //! @brief Устанавливает значение свойства #MCCheckStatus
    //! @param value Новое значение MCCheckStatus
    //! @relates MCCheckStatus
    //!
    void Set_MCCheckStatus(int value);
    //!
    //! @brief Состояние уведомления КМ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCNotificationStatus , #Set_MCNotificationStatus
    //!
    //! @par Модифицируется методами:
    //!   #FNGetMarkingCodeWorkStatus
    //!
    DOXYGEN_PROPERTY(int MCNotificationStatus)
    //!
    //! @brief Возвращает значение свойства #MCNotificationStatus
    //! @return MCNotificationStatus
    //! @relates MCNotificationStatus
    //!
    int Get_MCNotificationStatus() const;
    //!
    //! @brief Устанавливает значение свойства #MCNotificationStatus
    //! @param value Новое значение MCNotificationStatus
    //! @relates MCNotificationStatus
    //!
    void Set_MCNotificationStatus(int value);
    //!
    //! @brief Флаги команд КМ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCCommandFlags , #Set_MCCommandFlags
    //!
    //! @par Модифицируется методами:
    //!   #FNGetMarkingCodeWorkStatus
    //!
    DOXYGEN_PROPERTY(int MCCommandFlags)
    //!
    //! @brief Возвращает значение свойства #MCCommandFlags
    //! @return MCCommandFlags
    //! @relates MCCommandFlags
    //!
    int Get_MCCommandFlags() const;
    //!
    //! @brief Устанавливает значение свойства #MCCommandFlags
    //! @param value Новое значение MCCommandFlags
    //! @relates MCCommandFlags
    //!
    void Set_MCCommandFlags(int value);
    //!
    //! @brief Количество КМ, результаты проверки которых, сохранены в ФН
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCCheckResultSavedCount , #Set_MCCheckResultSavedCount
    //!
    //! @par Модифицируется методами:
    //!   #FNGetMarkingCodeWorkStatus
    //!
    DOXYGEN_PROPERTY(int MCCheckResultSavedCount)
    //!
    //! @brief Возвращает значение свойства #MCCheckResultSavedCount
    //! @return MCCheckResultSavedCount
    //! @relates MCCheckResultSavedCount
    //!
    int Get_MCCheckResultSavedCount() const;
    //!
    //! @brief Устанавливает значение свойства #MCCheckResultSavedCount
    //! @param value Новое значение MCCheckResultSavedCount
    //! @relates MCCheckResultSavedCount
    //!
    void Set_MCCheckResultSavedCount(int value);
    //!
    //! @brief Количество КМ, включенных в уведомление о реализации
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCRealizationCount , #Set_MCRealizationCount
    //!
    //! @par Модифицируется методами:
    //!   #FNGetMarkingCodeWorkStatus
    //!
    DOXYGEN_PROPERTY(int MCRealizationCount)
    //!
    //! @brief Возвращает значение свойства #MCRealizationCount
    //! @return MCRealizationCount
    //! @relates MCRealizationCount
    //!
    int Get_MCRealizationCount() const;
    //!
    //! @brief Устанавливает значение свойства #MCRealizationCount
    //! @param value Новое значение MCRealizationCount
    //! @relates MCRealizationCount
    //!
    void Set_MCRealizationCount(int value);
    //!
    //! @brief Заполнение области хранения маркированного товара
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCStorageSize , #Set_MCStorageSize
    //!
    //! @par Модифицируется методами:
    //!   #FNGetMarkingCodeWorkStatus
    //!
    DOXYGEN_PROPERTY(int MCStorageSize)
    //!
    //! @brief Возвращает значение свойства #MCStorageSize
    //! @return MCStorageSize
    //! @relates MCStorageSize
    //!
    int Get_MCStorageSize() const;
    //!
    //! @brief Устанавливает значение свойства #MCStorageSize
    //! @param value Новое значение MCStorageSize
    //! @relates MCStorageSize
    //!
    void Set_MCStorageSize(int value);
    //!
    //! @brief Контрольная сумма
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CheckSum , #Set_CheckSum
    //!
    //! @par Модифицируется методами:
    //!   #FNConfirmNotificationRead
    //!
    DOXYGEN_PROPERTY(uint64_t CheckSum)
    //!
    //! @brief Возвращает значение свойства #CheckSum
    //! @return CheckSum
    //! @relates CheckSum
    //!
    uint64_t Get_CheckSum() const;
    //!
    //! @brief Устанавливает значение свойства #CheckSum
    //! @param value Новое значение CheckSum
    //! @relates CheckSum
    //!
    void Set_CheckSum(uint64_t value);
    //!
    //! @brief Количество уведомлений
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_NotificationCount , #Set_NotificationCount
    //!
    //! @par Модифицируется методами:
    //!   #FNBeginReadNotifications
    //!
    DOXYGEN_PROPERTY(int NotificationCount)
    //!
    //! @brief Возвращает значение свойства #NotificationCount
    //! @return NotificationCount
    //! @relates NotificationCount
    //!
    int Get_NotificationCount() const;
    //!
    //! @brief Устанавливает значение свойства #NotificationCount
    //! @param value Новое значение NotificationCount
    //! @relates NotificationCount
    //!
    void Set_NotificationCount(int value);
    //!
    //! @brief Номер уведомления
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_NotificationNumber , #Set_NotificationNumber
    //!
    //! @par Модифицируется методами:
    //!   #FNBeginReadNotifications
    //!
    DOXYGEN_PROPERTY(int64_t NotificationNumber)
    //!
    //! @brief Возвращает значение свойства #NotificationNumber
    //! @return NotificationNumber
    //! @relates NotificationNumber
    //!
    int64_t Get_NotificationNumber() const;
    //!
    //! @brief Устанавливает значение свойства #NotificationNumber
    //! @param value Новое значение NotificationNumber
    //! @relates NotificationNumber
    //!
    void Set_NotificationNumber(int64_t value);
    //!
    //! @brief Размер уведомления
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_NotificationSize , #Set_NotificationSize
    //!
    //! @par Модифицируется методами:
    //!   #FNBeginReadNotifications, #FNGetDocumentSize
    //!
    DOXYGEN_PROPERTY(int NotificationSize)
    //!
    //! @brief Возвращает значение свойства #NotificationSize
    //! @return NotificationSize
    //! @relates NotificationSize
    //!
    int Get_NotificationSize() const;
    //!
    //! @brief Устанавливает значение свойства #NotificationSize
    //! @param value Новое значение NotificationSize
    //! @relates NotificationSize
    //!
    void Set_NotificationSize(int value);
    //!
    //! @brief Смещение данных
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DataOffset , #Set_DataOffset
    //!
    //! @par Модифицируется методами:
    //!   #FNReadNotificationBlock
    //!
    DOXYGEN_PROPERTY(int DataOffset)
    //!
    //! @brief Возвращает значение свойства #DataOffset
    //! @return DataOffset
    //! @relates DataOffset
    //!
    int Get_DataOffset() const;
    //!
    //! @brief Устанавливает значение свойства #DataOffset
    //! @param value Новое значение DataOffset
    //! @relates DataOffset
    //!
    void Set_DataOffset(int value);
    //!
    //! @brief Тип маркировки товара 2(Распознанный тип КМ	Тег 2100)
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MarkingType2, #Set_MarkingType2
    //!
    //! @par Модифицируется методами:
    //!   #FNSendItemCodeData, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int MarkingType2)
    //!
    //! @brief Устанавливает значение свойства #MarkingType2
    //! @param value Новое значение MarkingType2
    //! @relates MarkingType2
    //!
    void Set_MarkingType2(int value);
    //!
    //! @brief Возвращает значение свойства #MarkingType2
    //! @return MarkingType2
    //! @relates MarkingType2
    //!
    int Get_MarkingType2() const;
    //! @brief Прочитать случайную последовательность из ФН
    //!
    //! @par Методы доступа:
    //!   #Get_RandomSequence, #Set_RandomSequence
    //!
    //! @par Используется методами:
    //!   #ReadRandomSequence
    //!
    DOXYGEN_PROPERTY(std::vector<uint8_t> RandomSequence)
    //!
    //! @brief Возвращает значение свойства #RandomSequence
    //! @return RandomSequence
    //! @relates RandomSequence
    //!
    std::vector<uint8_t> Get_RandomSequence() const;
    //!
    //! @brief Устанавливает значение свойства #RandomSequence
    //! @param value Новое значение RandomSequence
    //! @relates RandomSequence
    //!
    void Set_RandomSequence(const std::vector<uint8_t>& value);
    //! @brief Прочитать случайную последовательность из ФН
    //!
    //! @par Методы доступа:
    //!   #Get_RandomSequenceHex, #Set_RandomSequenceHex
    //! @see #RandomSequence
    //!
    DOXYGEN_PROPERTY(std::string RandomSequenceHex)
    //!
    //! @brief Возвращает значение свойства #RandomSequenceHex
    //! @return RandomSequenceHex
    //! @relates RandomSequenceHex
    //!
    std::string Get_RandomSequenceHex() const;
    //!
    //! @brief Устанавливает значение свойства #RandomSequenceHex
    //! @param value Новое значение RandomSequenceHex
    //! @relates RandomSequenceHex
    //!
    void Set_RandomSequenceHex(const std::string& value);
    //!
    //! @brief Получить случайную последовательность
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //!
    //! @par Модифицируемые свойства:
    //!  - #RandomSequence  - случайная последовательнос
    //!
    //! @return Код ошибки
    //!
    int ReadRandomSequence();
    //!
    //! @brief Авторизоваться
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #AuthData - данные для авторизации.
    //!
    //! @return Код ошибки
    //!
    int Authorization();
    //! @brief Данные для авторизации
    //!
    //! @par Методы доступа:
    //!   #Get_AuthData, #Set_AuthData
    //!
    //! @par Используется методами:
    //!   #Authorization
    //!
    DOXYGEN_PROPERTY(std::vector<uint8_t> AuthData)
    //!
    //! @brief Возвращает значение свойства #AuthData
    //! @return AuthData
    //! @relates AuthData
    //!
    std::vector<uint8_t> Get_AuthData() const;
    //!
    //! @brief Устанавливает значение свойства #AuthData
    //! @param value Новое значение AuthData
    //! @relates AuthData
    //!
    void Set_AuthData(const std::vector<uint8_t>& value);
    //!
    //! @brief Принять код маркировки
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNAcceptMarkingCode();
    int FNAcceptMakringCode();
    //!
    //! @brief Отвергнуть код маркировки
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNDeclineMarkingCode();
    //!
    //! @brief Очистить буфер проверки КМ
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNMarkingClearBuffer();
    //!
    //! @brief Привязать код маркировки
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNBindMarkingItem();
    //!
    //! @brief Начать чтение архива ФН
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @return Код ошибки
    //!
    int FNBeginReadArchive();
    //!
    //! @brief Прочитать документ и добавить его в архив ФН.(Необходимо предварительно вызвать метод #FNBeginReadArchive)
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #DocumentNumber - номер документа
    //!
    //! @return Код ошибки
    //!
    int FNReadArchiveItem();
    //!
    //! @brief Сохранить архив ФН в файл
    //!
    //! @par Используемые свойства:
    //!  - #FileName - имя файла
    //!  - #FNArchiveType - тип файла архива
    //!  - #MarkingOnly - только документы в которых есть КМ
    //!
    //! @return Код ошибки
    //!
    int FNSaveArchive();

    //!
    //! @brief Тип файла архива ФН
    //!
    //! 0 - двоичный формат .crpt @see https://честныйзнак.рф/upload/%D0%A4%D0%BE%D1%80%D0%BC%D0%B0%D1%82_%D0%B2%D1%8B%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B8_%D1%81_%D0%B0%D0%B2%D1%82%D0%BE%D0%BD%D0%BE%D0%BC%D0%BD%D1%8B%D1%85_%D0%9A%D0%9A%D0%A2.pdf
    //! 1 - текстовый формат
    //!
    //! @par Методы доступа:
    //!   #Get_FNArchiveType, #Set_FNArchiveType
    //!
    //! @par Используется методами:
    //!   #FNSaveArchive
    //!
    DOXYGEN_PROPERTY(int FNArchiveType)
    //!
    //! @brief Устанавливает значение свойства #FNArchiveType
    //! @param value Новое значение FNArchiveType
    //! @relates FNArchiveType
    //!
    void Set_FNArchiveType(int value);
    //!
    //! @brief Возвращает значение свойства #FNArchiveType
    //! @return FNArchiveType
    //! @relates FNArchiveType
    //!
    int Get_FNArchiveType() const;
    //!
    //! @brief Только с кодами маркировки
    //!
    //! @par Методы доступа:
    //!   #Get_MarkingOnly, #Set_MarkingOnly
    //!
    //! @par Используется методами:
    //!   #FNSaveArchive
    //!
    DOXYGEN_PROPERTY(bool MarkingOnly)
    //!
    //! @brief Устанавливает значение свойства #MarkingOnly
    //! @param value Новое значение MarkingOnly
    //! @relates MarkingOnly
    //!
    void Set_MarkingOnly(bool value);
    //!
    //! @brief Возвращает значение свойства #MarkingOnly
    //! @return MarkingOnly
    //! @relates MarkingOnly
    //!
    bool Get_MarkingOnly() const;
    void Set_LastDocumentNumber(int value);
    int Get_LastDocumentNumber() const;
    void Set_FirstDocumentNumber(int value);
    int Get_FirstDocumentNumber() const;
    //!
    //! @brief Статус позиции
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_ItemStatus, #Set_ItemStatus
    //!
    //! @par Используется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int ItemStatus)
    //!
    //! @brief Устанавливает значение свойства #ItemStatus
    //! @param value Новое значение ItemStatus
    //! @relates ItemStatus
    //!
    void Set_ItemStatus(int value);
    //!
    //! @brief Возвращает значение свойства #ItemStatus
    //! @return ItemStatus
    //! @relates ItemStatus
    //!
    int Get_ItemStatus() const;
    //!
    //! @brief Режим обработки
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CheckItemMode, #Set_CheckItemMode
    //!
    //! @par Используется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int CheckItemMode)
    //!
    //! @brief Устанавливает значение свойства #CheckItemMode
    //! @param value Новое значение CheckItemMode
    //! @relates CheckItemMode
    //!
    void Set_CheckItemMode(int value);
    //!
    //! @brief Возвращает значение свойства #CheckItemMode
    //! @return CheckItemMode
    //! @relates CheckItemMode
    //!
    int Get_CheckItemMode() const;
    //!
    //! @brief Статус локальной проверки
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CheckItemLocalResult, #Set_CheckItemLocalResult
    //!
    //! @par Модифицируется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int CheckItemLocalResult)
    //!
    //! @brief Устанавливает значение свойства #CheckItemLocalResult
    //! @param value Новое значение CheckItemLocalResult
    //! @relates CheckItemLocalResult
    //!
    void Set_CheckItemLocalResult(int value);
    //!
    //! @brief Возвращает значение свойства #CheckItemLocalResult
    //! @return CheckItemLocalResult
    //! @relates CheckItemLocalResult
    //!
    int Get_CheckItemLocalResult() const;
    //!
    //! @brief Код ответа ФН на команду онлайн-проверки КМ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_KMServerErrorCode, #Set_KMServerErrorCode
    //!
    //! @par Модифицируется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int KMServerErrorCode)
    //!
    //! @brief Устанавливает значение свойства #KMServerErrorCode
    //! @param value Новое значение KMServerErrorCode
    //! @relates KMServerErrorCode
    //!
    void Set_KMServerErrorCode(int value);
    //!
    //! @brief Возвращает значение свойства #KMServerErrorCode
    //! @return KMServerErrorCode
    //! @relates KMServerErrorCode
    //!
    int Get_KMServerErrorCode() const;
    //!
    //! @brief Результат онлайн проверки КМ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_KMServerCheckingStatus, #Set_KMServerCheckingStatus
    //!
    //! @par Модифицируется методами:
    //!   #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(int KMServerCheckingStatus)
    //!
    //! @brief Устанавливает значение свойства #KMServerCheckingStatus
    //! @param value Новое значение KMServerCheckingStatus
    //! @relates KMServerCheckingStatus
    //!
    void Set_KMServerCheckingStatus(int value);
    //!
    //! @brief Возвращает значение свойства #KMServerCheckingStatus
    //! @return KMServerCheckingStatus
    //! @relates KMServerCheckingStatus
    //!
    int Get_KMServerCheckingStatus() const;
    //!
    //! @brief Послать дополнительный реквизит пользователя, тег 1084
    //!
    //! @par Используемые свойства:
    //!  - #UserAttributeName - наименование дополнительного реквизита пользователя(тег 1085)
    //!  - #UserAttributeValue - значение дополнительного реквизита пользователя(тег 1086)
    //!
    //! @return Код ошибки
    //!
    int FNSendUserAttribute();
    //!
    //! @brief Наименование дополнительного реквизита пользователя
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_UserAttributeName, #Set_UserAttributeName
    //!
    //! @par Используется методами:
    //!   #FNSendUserAttribute
    //!
    DOXYGEN_PROPERTY(std::string UserAttributeName)
    //!
    //! @brief Устанавливает значение свойства #UserAttributeName
    //! @param value Новое значение UserAttributeName
    //! @relates UserAttributeName
    //!
    void Set_UserAttributeName(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #UserAttributeName
    //! @return UserAttributeName
    //! @relates UserAttributeName
    //!
    std::string Get_UserAttributeName() const;
    //!
    //! @brief Значение дополнительного реквизита пользователя
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_UserAttributeValue, #Set_UserAttributeValue
    //!
    //! @par Используется методами:
    //!  #FNSendUserAttribute
    //!
    //!
    DOXYGEN_PROPERTY(std::string UserAttributeValue)
    //!
    //! @brief Устанавливает значение свойства #UserAttributeValue
    //! @param value Новое значение UserAttributeValue
    //! @relates UserAttributeValue
    //!
    void Set_UserAttributeValue(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #UserAttributeValue
    //! @return UserAttributeValue
    //! @relates UserAttributeValue
    //!
    std::string Get_UserAttributeValue() const;
    //!
    //! @brief Общий таймаут ожидания окончания печати
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_WaitForPrintingTimeout, #Set_WaitForPrintingTimeout
    //!
    //! @par Используется методами:
    //!   #WaitForPrinting
    //!
    //!
    DOXYGEN_PROPERTY(int64_t WaitForPrintingTimeout)
    //!
    //! @brief Устанавливает значение свойства #WaitForPrintingTimeout
    //! @param value Новое значение WaitForPrintingTimeout
    //! @relates WaitForPrintingTimeout
    //!
    void Set_WaitForPrintingTimeout(int64_t value);
    //!
    //! @brief Возвращает значение свойства #WaitForPrintingTimeout
    //! @return WaitForPrintingTimeout
    //! @relates WaitForPrintingTimeout
    //!
    int64_t Get_WaitForPrintingTimeout() const;
    //!
    //! @brief Входные данные декларативного документа
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DeclarativeInput, #Set_DeclarativeInput
    //!
    //! @par Используется методами:
    //!
    //!
    //! @par Модифицируется методами:
    //!
    //!
    DOXYGEN_PROPERTY(std::string DeclarativeInput)
    //!
    //! @brief Устанавливает значение свойства #DeclarativeInput
    //! @param value Новое значение DeclarativeInput
    //! @relates DeclarativeInput
    //!
    void Set_DeclarativeInput(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #DeclarativeInput
    //! @return DeclarativeInput
    //! @relates DeclarativeInput
    //!
    std::string Get_DeclarativeInput() const;
    //!
    //! @brief Выходные данные декларативного документа
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DeclarativeOutput, #Set_DeclarativeOutput
    //!
    //! @par Используется методами:
    //!
    //!
    //! @par Модифицируется методами:
    //!
    //!
    DOXYGEN_PROPERTY(std::string DeclarativeOutput)
    //!
    //! @brief Устанавливает значение свойства #DeclarativeOutput
    //! @param value Новое значение DeclarativeOutput
    //! @relates DeclarativeOutput
    //!
    void Set_DeclarativeOutput(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #DeclarativeOutput
    //! @return DeclarativeOutput
    //! @relates DeclarativeOutput
    //!
    std::string Get_DeclarativeOutput() const;
    //!
    //! @brief Путь/тип интерпретации декларативного документа
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_DeclarativeEndpointPath, #Set_DeclarativeEndpointPath
    //!
    //! @par Используется методами:
    //!
    //!
    //! @par Модифицируется методами:
    //!
    //!
    DOXYGEN_PROPERTY(std::string DeclarativeEndpointPath)
    //!
    //! @brief Устанавливает значение свойства #DeclarativeEndpointPath
    //! @param value Новое значение DeclarativeEndpointPath
    //! @relates DeclarativeEndpointPath
    //!
    void Set_DeclarativeEndpointPath(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #DeclarativeEndpointPath
    //! @return DeclarativeEndpointPath
    //! @relates DeclarativeEndpointPath
    //!
    std::string Get_DeclarativeEndpointPath() const;
    //!
    //! @brief Рендер декларативного документа
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!  - #DeclarativeInput - входные данные декларативного документа
    //!  - #DeclarativeEndpointPath - путь/тип интерпретации декларативного документа
    //!
    //! @par Модифицируемые свойства:
    //!  - #DeclarativeOutput - результат рендеринга декларативного документа
    //!
    //! @return Код ошибки
    //!
    int RenderDeclarativeDocument();
    //!
    //! @brief Загружает пользовательский шрифт из файла в формате "spf"
    //!
    //! @par Используемые свойства:
    //!  - #FileName - имя файла шрифта
    //!
    //! @par Модифицируемые свойства:
    //!
    //! @return Код ошибки
    //!
    int LoadFont();
    //!
    //! @brief Прочитать хеш пользовательского шрифта
    //!
    //! @par Модифицируемые свойства:
    //!  - #FontHashHex - хеш пользовательского шрифта из ККТ
    //!
    //! @return Код ошибки
    //!
    int ReadFontHash();
    //!
    //! @brief Сбросить пользовательский шрифт в ККТ на шрифт по умолчанию (№1)
    //!
    //! @return Код ошибки
    //!
    int ResetFont();
    //!
    //! @brief Хеш пользовательского шрифта из ККТ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_FontHashHex
    //!
    //!
    //! @par Модифицируется методами:
    //!  #ReadFontHash
    //!
    DOXYGEN_PROPERTY(std::string FontHashHex)
    //!
    //! @brief Возвращает значение свойства #FontHashHex
    //! @return FontHashHex
    //! @relates FontHashHex
    //!
    std::string Get_FontHashHex() const;
    //!
    //! @brief Загружает данные символа пользовательского шрифта (№9)
    //!
    //! @par Используемые свойства:
    //!  - #SymbolCode - Код символа 0-255
    //!  - #SymbolWidth -  Ширина символа в пикселях
    //!  - #SymbolHeight -  Высота символа в пикселях
    //!  - #BlockData - Блок данных шрифта
    //!
    //! @par Модифицируемые свойства:
    //!
    //! @return Код ошибки
    //!
    int LoadFontSymbol();
    //!
    //! @brief Декодировать TLV в строку
    //!
    //! @par Используемые свойства:
    //!  - #TLVData - TLV для декодирования данные
    //!  - #ShowTagNumber - Показывать номер тэга.
    //!
    //! @par Модифицируемые свойства:
    //!  - #StringForPrinting - Cтрока с перечислением тегов ФН и их значений, формат зависит от DFE_DataPresentation
    //!
    //! Выдает TLV или в виде строк разделенных \n или в виде json.
    //! Вид представления задается методом #SetDeviceFunction функцией DFE_DataPresentation.
    //!
    //! @return Код ошибки
    //!
    int DecodeTLVData();
    //!
    //! @brief Признак ОСУ(Объемно Сортового Учета)
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_MCOSUSign, #Set_MCOSUSign
    //!
    //! @par Используется методами:
    //!   #FNSendItemBarcode
    //!
    //! @par Модифицируется методами:
    //!
    //!
    DOXYGEN_PROPERTY(bool MCOSUSign)
    //!
    //! @brief Устанавливает значение свойства #MCOSUSign
    //! @param value Новое значение MCOSUSign
    //! @relates MCOSUSign
    //!
    void Set_MCOSUSign(bool value);
    //!
    //! @brief Возвращает значение свойства #MCOSUSign
    //! @return MCOSUSign
    //! @relates MCOSUSign
    //!
    bool Get_MCOSUSign() const;
    //!
    //! @brief Получить исполнение ФНа (подверсия)
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль пользователя.
    //!
    //! @par Модифицируемые свойства:
    //!  - #FNImplementation - исполнение ФН
    //!
    //! @return Код ошибки
    //!
    int FNGetImplementation();
    //!
    //! @brief Запрос статуса поддержки ФН ОСУ.
    //!
    //! @par Модифицируемые свойства:
    //!   - #FNOSUSupportStatus -  статуса поддержки ФН ОСУ
    //!
    //! @return Код ошибки
    //!
    int FNGetOSUSupportStatus();
    //!
    //! @brief Размер в байтах текущего документа в ФН
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!
    //! @par Модифицируемые свойства:
    //!  - #DocumentSize - размер документа
    //!  - #NotificationSize - размер уведомления
    //!
    //! @return Код ошибки
    //!
    int FNGetDocumentSize();
    //!
    //! @brief Размер текущего документа в ФН в байтах
    //!
    //! @par Методы доступа:
    //!   #Get_DocumentSize, #Set_DocumentSize
    //!
    //! @par Модифицируется методами:
    //!   #FNGetDocumentSize
    //!
    DOXYGEN_PROPERTY(int DocumentSize)
    //!
    //! @brief Устанавливает значение свойства #DocumentSize
    //! @param value Новое значение DocumentSize
    //! @relates DocumentSize
    //!
    void Set_DocumentSize(int value);
    //!
    //! @brief Возвращает значение свойства #DocumentSize
    //! @return DocumentSize
    //! @relates DocumentSize
    //!
    int Get_DocumentSize() const;
    //!
    //! @brief Исполнение ФН
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_FNImplementation, #Set_FNImplementation
    //!
    //! @par Модифицируется методами:
    //!   #FNGetImplementation
    //!
    DOXYGEN_PROPERTY(std::string FNImplementation)
    //!
    //! @brief Устанавливает значение свойства #FNImplementation
    //! @param value Новое значение FNImplementation
    //! @relates FNImplementation
    //!
    void Set_FNImplementation(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #FNImplementation
    //! @return FNImplementation
    //! @relates FNImplementation
    //!
    std::string Get_FNImplementation() const;
    //!
    //! @brief Cтатус поддержки ФН ОСУ
    //! Возможные значения:
    //!    FF - не поддерживает
    //!    00 - поддерживает и ОСУ не активна
    //!    01 - поддерживает и ОСУ активна
    //!
    //! @par Методы доступа:
    //!   #Get_FNOSUSupportStatus, #Set_FNOSUSupportStatus
    //!
    //! @par Модифицируется методами:
    //!   #FNGetOSUSupportStatus
    //!
    DOXYGEN_PROPERTY(int FNOSUSupportStatus)
    //!
    //! @brief Устанавливает значение свойства #FNOSUSupportStatus
    //! @param value Новое значение FNOSUSupportStatus
    //! @relates FNOSUSupportStatus
    //!
    void Set_FNOSUSupportStatus(int value);
    //!
    //! @brief Возвращает значение свойства #FNOSUSupportStatus
    //! @return FNOSUSupportStatus
    //! @relates FNOSUSupportStatus
    //!
    int Get_FNOSUSupportStatus() const;
    //!
    //! @brief Возвращает штрихкод фискального чека
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора
    //!  - #DocumentNumber - номер фискального документа
    //!
    //! @par Модифицируемые свойства:
    //!  - #BarCode - строка для формирования ШК фискального чека
    //!
    //! @return Код ошибки
    //!
    int FNReadFiscalBarcode();
    //!
    //! @brief Печать cтроки с переносом
    //!
    //! Метод служит для печати строки символов на чековой ленте и/или на контрольной ленте
    //!(в операционном журнале).
    //!
    //! @note Любой, кроме режимов 11, 12 и 14. Не меняет режима ККМ.
    //!
    //! @par Используемые свойства:
    //!  - #Password - пароль оператора,
    //!  - #UseReceiptRibbon - признак операции с чековой лентой,
    //!  - #UseJournalRibbon - признак операции с лентой операционного журнала,
    //!  - #StringForPrinting - строка символов кодовой таблицы WIN1251 для
    //! печати.
    //!
    //! @par Модифицируемые свойства:
    //!  - #OperatorNumber - порядковый номер оператора, чей пароль был использован.
    //!
    //! \return Код ошибки
    //!
    int PrintStringWithWrap();
    //!
    //! @brief Дополнительно проверять Код Маркировки онлайн через сервера ЦРПТ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CrptCheck, #Set_CrptCheck
    //!
    //! @par Используется методами: #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    //!
    //!
    DOXYGEN_PROPERTY(bool CrptCheck)
    //!
    //! @brief Устанавливает значение свойства #CrptCheck
    //! @param value Новое значение CrptCheck
    //! @relates CrptCheck
    //!
    void Set_CrptCheck(bool value);
    //!
    //! @brief Возвращает значение свойства #CrptCheck
    //! @return CrptCheck
    //! @relates CrptCheck
    //!
    bool Get_CrptCheck() const;
    //!
    //! @brief Проверить коды маркировки на сервере ЦРПТ
    //!
    //! @par Используемые свойства:
    //!  - #InputStrJson - Входной документ JSON
    //!  - #CrptToken - токен аутентификации ЦРПТ
    //!  - #CrptCdnListUrl - ссылка на для получения списка хостов ЦРПТ для онлайн проверки КМ
    //!  - #CrptExchangeCaCertPath - путь файла для корневого сертфииката для обмена с ЦРПТ
    //!
    //!
    //! @par Модифицируемые свойства:
    //!  - #OutputStrJson - Выходной документ JSON
    //!
    //! @return Код ошибки
    //!
    int FNCheckItemBarcodeCrpt();
    //!
    //! @brief Входной документ JSON
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_InputStrJson, #Set_InputStrJson
    //!
    //! @par Используется методами: #FNCheckItemBarcodeCrpt
    //!
    //!
    //!
    DOXYGEN_PROPERTY(std::string InputStrJson)
    //!
    //! @brief Устанавливает значение свойства #InputStrJson
    //! @param value Новое значение InputStrJson
    //! @relates InputStrJson
    //!
    void Set_InputStrJson(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #InputStrJson
    //! @return InputStrJson
    //! @relates InputStrJson
    //!
    std::string Get_InputStrJson() const;
    //!
    //! @brief Выходной документ JSON
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_OutputStrJson, #Set_OutputStrJson
    //!
    //!
    //! @par Модифицируется методами: #FNCheckItemBarcodeCrpt
    //!
    //!
    DOXYGEN_PROPERTY(std::string OutputStrJson)
    //!
    //! @brief Устанавливает значение свойства #OutputStrJson
    //! @param value Новое значение OutputStrJson
    //! @relates OutputStrJson
    //!
    void Set_OutputStrJson(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #OutputStrJson
    //! @return OutputStrJson
    //! @relates OutputStrJson
    //!
    std::string Get_OutputStrJson() const;
    //!
    //! @brief Аутентификационный токен ЦРПТ
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CrptToken, #Set_CrptToken
    //!
    //! @par Используется методами: #FNCheckItemBarcodeCrpt, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    //!
    //! @par Модифицируется методами:
    //!
    //!
    DOXYGEN_PROPERTY(std::string CrptToken)
    //!
    //! @brief Устанавливает значение свойства #CrptToken
    //! @param value Новое значение CrptToken
    //! @relates CrptToken
    //!
    void Set_CrptToken(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #CrptToken
    //! @return CrptToken
    //! @relates CrptToken
    //!
    std::string Get_CrptToken() const;
    //!
    //! @brief Ссылка на для получения списка хостов ЦРПТ для онлайн проверки КМ
    //!
    //! По-умолчанию используется продакшен хост:  https://markirovka.crpt.ru
    //! Можно так же установить тестовый хост: https://markirovka.sandbox.crptech.ru или произвольный
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_CrptCdnListUrl, #Set_CrptCdnListUrl
    //!
    //! @par Используется методами: #FNCheckItemBarcodeCrpt, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    //!
    DOXYGEN_PROPERTY(std::string CrptCdnListUrl)
    //!
    //! @brief Устанавливает значение свойства #CrptCdnListUrl
    //! @param value Новое значение CrptCdnListUrl
    //! @relates CrptCdnListUrl
    //!
    void Set_CrptCdnListUrl(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #CrptCdnListUrl
    //! @return CrptCdnListUrl
    //! @relates CrptCdnListUrl
    //!
    std::string Get_CrptCdnListUrl() const;
    //!
    //! @brief Путьк файлу с корневым сертификатом
    //! По умолчанию: /etc/ssl/cert.pem
    //!
    //! @par Методы доступа:
    //!   #Get_CrptExchangeCaCertPath, #Set_CrptExchangeCaCertPath
    //!
    //! @par Используется методами: #FNCheckItemBarcodeCrpt, #FNCheckItemBarcode, #FNCheckItemBarcode2
    //!
    DOXYGEN_PROPERTY(std::string CrptExchangeCaCertPath)
    //!
    //! @brief Устанавливает значение свойства #CrptExchangeCaCertPath
    //! @param value Новое значение CrptExchangeCaCertPath
    //! @relates CrptExchangeCaCertPath
    //!
    void Set_CrptExchangeCaCertPath(const std::string& value);
    //!
    //! @brief Возвращает значение свойства #CrptExchangeCaCertPath
    //! @return CrptExchangeCaCertPath
    //! @relates CrptExchangeCaCertPath
    //!
    std::string Get_CrptExchangeCaCertPath() const;
    //!
    //! @brief Ресурс пятилетнего хранения (ориентировочное количество документов, которые можно создать в ФН)
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_FN5YearResource, #Set_FN5YearResource
    //!
    //!
    //! @par Модифицируется методами: #FNGetFreeMemoryResource
    //!
    //!
    DOXYGEN_PROPERTY(uint32_t FN5YearResource)
    //!
    //! @brief Устанавливает значение свойства #FN5YearResource
    //! @param value Новое значение FN5YearResource
    //! @relates FN5YearResource
    //!
    void Set_FN5YearResource(uint32_t value);
    //!
    //! @brief Возвращает значение свойства #FN5YearResource
    //! @return FN5YearResource
    //! @relates FN5YearResource
    //!
    uint32_t Get_FN5YearResource() const;
    //!
    //! @brief Ресурс данных 30-дневного хранения
    //! (Размер свободной области в килобайтах для записи документов 30-дневного хранения.
    //! После 30 дней работы значение может колебаться на постоянном уровне).
    //!
    //!
    //! @par Методы доступа:
    //!   #Get_FN30DayResource, #Set_FN30DayResource
    //!
    //!
    //! @par Модифицируется методами: #FNGetFreeMemoryResource
    //!
    DOXYGEN_PROPERTY(uint32_t FN30DayResource)
    //!
    //! @brief Устанавливает значение свойства #FN30DayResource
    //! @param value Новое значение FN30DayResource
    //! @relates FN30DayResource
    //!
    void Set_FN30DayResource(uint32_t value);
    //!
    //! @brief Возвращает значение свойства #FN30DayResource
    //! @return FN30DayResource
    //! @relates FN30DayResource
    //!
    uint32_t Get_FN30DayResource() const;
    //! Далее технические методы драйвера. Не влияют на ККТ
    //!
    //! \brief setPropertyChangedCallback
    //! Можно получать уведомления при изменении свойств.
    //! В аргумент коллбека передается название аргумента
    //!
    void setPropertyChangedCallback(std::function<void(const std::string&)>);
    //!
    //! \brief setPropertyTouchedCallback
    //! Получать уведомления о том что свойство было "потрогано"
    //! отличие от Changed в том что коллбэк будет вызван даже если значение не изменилось.
    //!
    void setPropertyTouchedCallback(std::function<void(const std::string&)>);
    /**
     * \brief setLogCallback
     * Если требуется собственная обработка логгирования можно использовать обратный вызов.
     * Функцию необходимо вызвать <b>ДО</b> первого инстанцирования classic_interface.
     */
    static void setLogCallback(void (*const func)(const std::string&));
    /**
     * \brief setLogCallback_v2
     * Если требуется собственная обработка логгирования можно использовать обратный вызов.
     * Функцию необходимо вызвать <b>ДО</b> первого инстанцирования classic_interface.
     *
     * Если в @see setLogCallback принималась функция с единственным аргументом std::string,
     * которая вызывалась сразу с полным форматированием лога - здесь можно передать более продвинутый коллбэк:
     *
     * порядок аргументов коллбэка:
     * int level - уровень логгирования один из: TRACE = 0, DEBUG = 1, INFO = 2, WARN = 3, ERROR = 4, CRITICAL = 5, OFF = 6
     * const char* logger_name - имя логгера
     * size_t logger_name_size - длина имени логгера
     * const char* msg - сообщение для логгирования
     * size_t msg_sizeconst - длина сообщения для логгирования
     *
     */
    static void setLogCallback_v2(void (*func)(int, const char*, size_t, const char*, size_t));

private:
    struct Impl;
    const std::unique_ptr<Impl> m_pimpl;
};

#undef DOXYGEN_PROPERTY
}
#endif // CLASSIC_API_H
