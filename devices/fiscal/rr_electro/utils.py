def parse_kkt_report(text: str) -> dict:
    result = {}
    lines = text.strip().splitlines()
    current_product = {}
    section_stack = []
    products = []
    in_product_section = False

    def set_nested_field(container: dict, path: list[str], key: str, value: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
        for section in path:
            container = container.setdefault(section, {})
        container[key] = value

    for line in lines:
        line = line.rstrip()
        stripped = line.lstrip()
        indent = len(line) - len(stripped)

        if not stripped:
            continue

        # –ù–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        if stripped == "–ü–†–ï–î–ú. –†–ê–°–ß–ï–¢–ê":
            if current_product:
                products.append(current_product)
                current_product = {}
            in_product_section = True
            section_stack = []
            continue

        # –í—ã—Ö–æ–¥ –∏–∑ —Ç–æ–≤–∞—Ä–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if in_product_section and indent == 0 and not stripped.startswith(("–ù–ê–ò–ú–ï–ù. –ü–†–ï–î–ú. –†–ê–°–ß–ï–¢–ê", "–¶–ï–ù–ê –ó–ê –ï–î. –ü–†–ï–î–ú. –†–ê–°–ß.", "–ö–û–õ-–í–û –ü–†–ï–î–ú. –†–ê–°–ß–ï–¢–ê", "–ú–ï–†–ê –ö–û–õ-–í–ê –ü–†–ï–î–ú. –†–ê–°–ß.", "–°–¢–û–ò–ú. –ü–†–ï–î–ú. –†–ê–°–ß–ï–¢–ê", "–°–¢–ê–í–ö–ê –ù–î–°", "–ü–†–ò–ó–ù. –°–ü–û–°–û–ë–ê –†–ê–°–ß.", "–ü–†–ò–ó–ù. –ü–†–ï–î–ú–ï–¢–ê –†–ê–°–ß.")):
            if current_product:
                products.append(current_product)
                current_product = {}
            in_product_section = False
            section_stack = []

        # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–¢" –∏–ª–∏ "–û–¢–†–ê–°–õ. –†–ï–ö–í. –ü–†–ï–î–ú. –†–ê–°–ß.")
        if in_product_section and indent > 0 and ":" not in stripped:
            section_stack.append(stripped)
            continue

        # –í–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if in_product_section and indent > 0 and ":" in stripped:
            key, value = stripped.split(":", 1)
            set_nested_field(current_product, section_stack, key.strip(), value.strip())
            continue

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
        if in_product_section and indent == 0 and ":" in stripped:
            key, value = stripped.split(":", 1)
            current_product[key.strip()] = value.strip()
            section_stack = []
            continue

        # –û–±—â–∏–µ –ø–æ–ª—è (–≤–Ω–µ —Ç–æ–≤–∞—Ä–Ω–æ–π —Å–µ–∫—Ü–∏–∏)
        if not in_product_section and ":" in stripped:
            key, value = stripped.split(":", 1)
            result[key.strip()] = value.strip()
        else:
            result["–ó–ê–ì–û–õ–û–í–û–ö"] = result.get("–ó–ê–ì–û–õ–û–í–û–ö", "") + " " + stripped

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
    if current_product:
        products.append(current_product)

    if products:
        result["–ü–†–ï–î–ú–ï–¢–´ –†–ê–°–ß–ï–¢–ê"] = products

    return result


def decode_km_server_checking_status(status_value):
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ KMServerCheckingStatus (—Ç–µ–≥ 2106)

    Args:
        status_value: –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (int –∏–ª–∏ -1 –µ—Å–ª–∏ –æ—à–∏–±–∫–∞)

    Returns:
        str: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    """

    if status_value == -1:
        return "‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_map = {
        0b00000000: "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω",
        0b00000001: "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –§–ù —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω",
        0b00000011: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω",
        0b00010000: "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω (–ö–ö–¢ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ)",
        0b00010001: "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –§–ù —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω (–ö–ö–¢ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ)",
        0b00010011: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω (–ö–ö–¢ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ)",
        0b00000101: "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —É –û–ò–°–ú –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω",
        0b00000111: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —É –û–ò–°–ú –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if status_value in status_map:
        return status_map[status_value]

    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ç—ã
    result = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_value} (0b{status_value:08b})\n"

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–∏—Ç—ã
    km_check_bits = status_value & 0b00000011  # –±–∏—Ç—ã 0-1
    autonomous_bit = status_value & 0b00010000  # –±–∏—Ç 4
    oism_status_bit = status_value & 0b00000100  # –±–∏—Ç 2

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú
    if km_check_bits == 0b00:
        result += "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
    elif km_check_bits == 0b01:
        result += "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º\n"
    elif km_check_bits == 0b11:
        result += "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ü –ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º\n"

    # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
    if autonomous_bit:
        result += "- –ö–ö–¢ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ\n"

    # –°—Ç–∞—Ç—É—Å –û–ò–°–ú
    if oism_status_bit:
        result += "- –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ —É –û–ò–°–ú –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω\n"
    else:
        result += "- –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –û–ò–°–ú –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n"

    return result.strip()


def print_km_status(driver):
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å KMServerCheckingStatus

    Args:
        driver: –æ–±—ä–µ–∫—Ç –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º KMServerCheckingStatus
    """
    status = driver.driver.KMServerCheckingStatus
    decoded_status = decode_km_server_checking_status(status)

    print(f"KMServerCheckingStatus: {status}")
    print(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {decoded_status}")
    print("-" * 50)
